Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    TRUE
    STRING
    SEMICOLON
    COLON
    CANDY
    FALSE

Grammar

Rule 0     S' -> class
Rule 1     class -> main_add vars_global init_vars func_list MAIN main_retorno block
Rule 2     main_add -> <empty>
Rule 3     main_retorno -> <empty>
Rule 4     vars_global -> varsGlobal vars_global
Rule 5     vars_global -> empty
Rule 6     init_vars -> asign init_vars
Rule 7     init_vars -> empty
Rule 8     func_list -> func func_list
Rule 9     func_list -> empty
Rule 10    func -> FUNC idCheck LPAR funcx RPAR block func_end
Rule 11    func_end -> <empty>
Rule 12    idCheck -> ID
Rule 13    funcx -> vars paramCheck
Rule 14    funcx -> vars paramCheck COMA funcx
Rule 15    funcx -> empty
Rule 16    paramCheck -> <empty>
Rule 17    block -> LCBRACKET blockx RCBRACKET
Rule 18    blockx -> vars
Rule 19    blockx -> vars blockx
Rule 20    blockx -> statement
Rule 21    blockx -> statement blockx
Rule 22    statement -> asign
Rule 23    statement -> condition
Rule 24    statement -> cycle
Rule 25    statement -> print
Rule 26    statement -> list
Rule 27    statement -> call
Rule 28    statement -> add
Rule 29    statement -> remove
Rule 30    statement -> find
Rule 31    statement -> sort
Rule 32    statement -> printList
Rule 33    statement -> move
Rule 34    statement -> toy
Rule 35    statement -> clean
Rule 36    statement -> play
Rule 37    statement -> return
Rule 38    return -> RETURN LPAR par_call expression RPAR par_call2
Rule 39    return -> RETURN LPAR par_call call RPAR par_call2
Rule 40    varsGlobal -> type ID
Rule 41    vars -> type ID
Rule 42    type -> INT
Rule 43    type -> FLOAT
Rule 44    type -> BOOLEAN
Rule 45    asign -> ID id_val EQUAL equal_val expression
Rule 46    asign -> ID id_val EQUAL equal_val call
Rule 47    id_val -> <empty>
Rule 48    equal_val -> <empty>
Rule 49    expression -> exp
Rule 50    expression -> exp COMPARISON op_val expression
Rule 51    exp -> termino
Rule 52    exp -> termino PLUS op_val exp
Rule 53    exp -> termino MINUS op_val exp
Rule 54    termino -> factor
Rule 55    termino -> factor MULTIPLY op_val termino
Rule 56    termino -> factor DIVIDE op_val termino
Rule 57    termino_val -> <empty>
Rule 58    op_val -> <empty>
Rule 59    factor -> LPAR expression RPAR
Rule 60    factor -> MINUS varcte
Rule 61    factor -> varcte termino_val
Rule 62    varcte -> ID
Rule 63    varcte -> NUMINT
Rule 64    varcte -> NUMFLOAT
Rule 65    varcte -> BOOLEANTYPE
Rule 66    print -> PRINT LPAR par_call printx RPAR par_call2
Rule 67    printx -> expression
Rule 68    printx -> ID id_val
Rule 69    printx -> call
Rule 70    printx -> expression PLUS op_val printx
Rule 71    printx -> ID id_val PLUS op_val printx
Rule 72    printx -> call PLUS op_val printx
Rule 73    cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3
Rule 74    cycle_1 -> <empty>
Rule 75    cycle_2 -> <empty>
Rule 76    cycle_3 -> <empty>
Rule 77    condition -> IF LPAR expression RPAR cond_1 block else cond_2
Rule 78    else -> ELSE cond_else block
Rule 79    else -> empty
Rule 80    cond_1 -> <empty>
Rule 81    cond_2 -> <empty>
Rule 82    cond_else -> <empty>
Rule 83    list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET
Rule 84    listx -> ID id_param
Rule 85    listx -> ID id_param COMA listx
Rule 86    listx -> NUMINT id_param
Rule 87    listx -> NUMINT id_param COMA listx
Rule 88    listx -> NUMFLOAT id_param
Rule 89    listx -> NUMFLOAT id_param COMA listx
Rule 90    idCheck_List -> ID
Rule 91    id_param -> <empty>
Rule 92    id_param2 -> <empty>
Rule 93    listx_add -> ID id_param2
Rule 94    listx_add -> NUMINT id_param2
Rule 95    listx_add -> NUMFLOAT id_param2
Rule 96    add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR
Rule 97    idCheck_Add -> <empty>
Rule 98    remove -> ID idCheck_Add POINT REMOVE LPAR RPAR
Rule 99    find -> ID idCheck_Add POINT FIND LPAR NUMINT RPAR
Rule 100   sort -> ID idCheck_Add POINT SORT LPAR RPAR
Rule 101   printList -> ID idCheck_Add POINT PRINTLIST LPAR RPAR
Rule 102   call -> ID id_call LPAR par_call RPAR par_call2
Rule 103   call -> ID id_call LPAR par_call params RPAR par_call2
Rule 104   id_call -> <empty>
Rule 105   par_call -> <empty>
Rule 106   par_call2 -> <empty>
Rule 107   params -> expression COMA params
Rule 108   params -> ID COMA params
Rule 109   params -> expression
Rule 110   params -> ID
Rule 111   move -> CAT POINT MOVE LPAR NUMINT COMA NUMINT RPAR
Rule 112   toy -> ADD POINT TOY LPAR RPAR
Rule 113   clean -> CAT POINT CLEAN LPAR RPAR
Rule 114   play -> CAT POINT PLAY LPAR RPAR
Rule 115   empty -> <empty>

Terminals, with rules where they appear

ADD                  : 96 112
BOOLEAN              : 44
BOOLEANTYPE          : 65
CANDY                : 
CLEAN                : 113
COLON                : 
COMA                 : 14 85 87 89 107 108 111
COMPARISON           : 50
DIVIDE               : 56
ELSE                 : 78
EQUAL                : 45 46 83
FALSE                : 
FIND                 : 99
FLOAT                : 43
FUNC                 : 10
ID                   : 12 40 41 45 46 62 68 71 84 85 90 93 96 98 99 100 101 102 103 108 110
IF                   : 77
INT                  : 42
LBRACKET             : 83
LCBRACKET            : 17
LIST                 : 83
LPAR                 : 10 38 39 59 66 73 77 96 98 99 100 101 102 103 111 112 113 114
MAIN                 : 1
MINUS                : 53 60
MOVE                 : 111
MULTIPLY             : 55
NUMFLOAT             : 64 88 89 95
NUMINT               : 63 86 87 94 99 111 111
PLAY                 : 114
PLUS                 : 52 70 71 72
POINT                : 96 98 99 100 101 111 112 113 114
PRINT                : 66
PRINTLIST            : 101
RBRACKET             : 83
RCBRACKET            : 17
REMOVE               : 98
RETURN               : 38 39
RPAR                 : 10 38 39 59 66 73 77 96 98 99 100 101 102 103 111 112 113 114
SEMICOLON            : 
SORT                 : 100
STRING               : 
TOY                  : 112
TRUE                 : 
WHILE                : 73
error                : 

Nonterminals, with rules where they appear

CAT                  : 111 113 114
add                  : 28
asign                : 6 22
block                : 1 10 73 77 78
blockx               : 17 19 21
call                 : 27 39 46 69 72
class                : 0
clean                : 35
cond_1               : 77
cond_2               : 77
cond_else            : 78
condition            : 23
cycle                : 24
cycle_1              : 73
cycle_2              : 73
cycle_3              : 73
else                 : 77
empty                : 5 7 9 15 79
equal_val            : 45 46
exp                  : 49 50 52 53
expression           : 38 45 50 59 67 70 73 77 107 109
factor               : 54 55 56
find                 : 30
func                 : 8
func_end             : 10
func_list            : 1 8
funcx                : 10 14
idCheck              : 10
idCheck_Add          : 96 98 99 100 101
idCheck_List         : 83
id_call              : 102 103
id_param             : 84 85 86 87 88 89
id_param2            : 93 94 95
id_val               : 45 46 68 71
init_vars            : 1 6
list                 : 26
listx                : 83 85 87 89
listx_add            : 96
main_add             : 1
main_retorno         : 1
move                 : 33
op_val               : 50 52 53 55 56 70 71 72
par_call             : 38 39 66 102 103
par_call2            : 38 39 66 102 103
paramCheck           : 13 14
params               : 103 107 108
play                 : 36
print                : 25
printList            : 32
printx               : 66 70 71 72
remove               : 29
return               : 37
sort                 : 31
statement            : 20 21
termino              : 51 52 53 55 56
termino_val          : 61
toy                  : 34
type                 : 40 41
varcte               : 60 61
vars                 : 13 14 18 19
varsGlobal           : 4
vars_global          : 1 4

