Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    TRUE
    STRING
    POOP
    SEMICOLON
    COLON
    BALL
    CANDY
    FALSE

Grammar

Rule 0     S' -> class
Rule 1     class -> main_add vars_global init_vars func_list MAIN main_retorno block
Rule 2     main_add -> <empty>
Rule 3     main_retorno -> <empty>
Rule 4     vars_global -> varsGlobal vars_global
Rule 5     vars_global -> empty
Rule 6     init_vars -> asign init_vars
Rule 7     init_vars -> empty
Rule 8     func_list -> func func_list
Rule 9     func_list -> empty
Rule 10    func -> FUNC idCheck LPAR funcx RPAR block func_end
Rule 11    func_end -> <empty>
Rule 12    idCheck -> ID
Rule 13    funcx -> vars paramCheck
Rule 14    funcx -> vars paramCheck COMA funcx
Rule 15    funcx -> empty
Rule 16    paramCheck -> <empty>
Rule 17    block -> LCBRACKET blockx RCBRACKET
Rule 18    blockx -> vars
Rule 19    blockx -> vars blockx
Rule 20    blockx -> statement
Rule 21    blockx -> statement blockx
Rule 22    statement -> asign
Rule 23    statement -> condition
Rule 24    statement -> cycle
Rule 25    statement -> print
Rule 26    statement -> list
Rule 27    statement -> call
Rule 28    statement -> move
Rule 29    statement -> eat
Rule 30    statement -> clean
Rule 31    statement -> play
Rule 32    statement -> add
Rule 33    statement -> remove
Rule 34    statement -> get
Rule 35    statement -> sort
Rule 36    statement -> turnleft
Rule 37    statement -> turnright
Rule 38    statement -> return
Rule 39    return -> RETURN LPAR par_call expression RPAR par_call2
Rule 40    varsGlobal -> type ID
Rule 41    vars -> type ID
Rule 42    type -> INT
Rule 43    type -> FLOAT
Rule 44    type -> BOOLEAN
Rule 45    asign -> ID id_val EQUAL equal_val expression
Rule 46    asign -> ID id_val EQUAL equal_val call
Rule 47    id_val -> <empty>
Rule 48    equal_val -> <empty>
Rule 49    expression -> exp
Rule 50    expression -> exp COMPARISON op_val expression
Rule 51    exp -> termino
Rule 52    exp -> termino PLUS op_val exp
Rule 53    exp -> termino MINUS op_val exp
Rule 54    termino -> factor
Rule 55    termino -> factor MULTIPLY op_val termino
Rule 56    termino -> factor DIVIDE op_val termino
Rule 57    termino_val -> <empty>
Rule 58    op_val -> <empty>
Rule 59    factor -> LPAR expression RPAR
Rule 60    factor -> MINUS varcte
Rule 61    factor -> varcte termino_val
Rule 62    varcte -> ID
Rule 63    varcte -> NUMINT
Rule 64    varcte -> NUMFLOAT
Rule 65    varcte -> BOOLEANTYPE
Rule 66    print -> PRINT LPAR par_call printx RPAR par_call2
Rule 67    printx -> expression
Rule 68    printx -> ID id_val
Rule 69    printx -> call
Rule 70    printx -> expression PLUS op_val printx
Rule 71    printx -> ID id_val PLUS op_val printx
Rule 72    printx -> call PLUS op_val printx
Rule 73    cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3
Rule 74    cycle_1 -> <empty>
Rule 75    cycle_2 -> <empty>
Rule 76    cycle_3 -> <empty>
Rule 77    condition -> IF LPAR expression RPAR cond_1 block else cond_2
Rule 78    else -> ELSE cond_else block
Rule 79    else -> empty
Rule 80    cond_1 -> <empty>
Rule 81    cond_2 -> <empty>
Rule 82    cond_else -> <empty>
Rule 83    list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET
Rule 84    listx -> ID id_param
Rule 85    listx -> ID id_param COMA listx
Rule 86    listx -> NUMINT id_param
Rule 87    listx -> NUMINT id_param COMA listx
Rule 88    listx -> NUMFLOAT id_param
Rule 89    listx -> NUMFLOAT id_param COMA listx
Rule 90    idCheck_List -> ID
Rule 91    id_param -> <empty>
Rule 92    id_param2 -> <empty>
Rule 93    listx_add -> ID id_param2
Rule 94    listx_add -> NUMINT id_param2
Rule 95    listx_add -> NUMFLOAT id_param2
Rule 96    add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR
Rule 97    idCheck_Add -> <empty>
Rule 98    remove -> ID idCheck_Add POINT REMOVE LPAR RPAR
Rule 99    get -> ID idCheck_Add POINT FIND LPAR NUMINT RPAR
Rule 100   sort -> ID idCheck_Add POINT SORT LPAR RPAR
Rule 101   call -> ID id_call LPAR par_call RPAR par_call2
Rule 102   call -> ID id_call LPAR par_call params RPAR par_call2
Rule 103   id_call -> <empty>
Rule 104   par_call -> <empty>
Rule 105   par_call2 -> <empty>
Rule 106   params -> expression COMA params
Rule 107   params -> ID COMA params
Rule 108   params -> expression
Rule 109   params -> ID
Rule 110   move -> MOVE LPAR ID RPAR
Rule 111   eat -> EAT LPAR ID RPAR
Rule 112   clean -> CLEAN LPAR ID RPAR
Rule 113   play -> PLAY LPAR ID RPAR
Rule 114   turnleft -> TURNLEFT LPAR RPAR
Rule 115   turnright -> TURNRIGHT LPAR RPAR
Rule 116   empty -> <empty>

Terminals, with rules where they appear

ADD                  : 96
BALL                 : 
BOOLEAN              : 44
BOOLEANTYPE          : 65
CANDY                : 
CLEAN                : 112
COLON                : 
COMA                 : 14 85 87 89 106 107
COMPARISON           : 50
DIVIDE               : 56
EAT                  : 111
ELSE                 : 78
EQUAL                : 45 46 83
FALSE                : 
FIND                 : 99
FLOAT                : 43
FUNC                 : 10
ID                   : 12 40 41 45 46 62 68 71 84 85 90 93 96 98 99 100 101 102 107 109 110 111 112 113
IF                   : 77
INT                  : 42
LBRACKET             : 83
LCBRACKET            : 17
LIST                 : 83
LPAR                 : 10 39 59 66 73 77 96 98 99 100 101 102 110 111 112 113 114 115
MAIN                 : 1
MINUS                : 53 60
MOVE                 : 110
MULTIPLY             : 55
NUMFLOAT             : 64 88 89 95
NUMINT               : 63 86 87 94 99
PLAY                 : 113
PLUS                 : 52 70 71 72
POINT                : 96 98 99 100
POOP                 : 
PRINT                : 66
RBRACKET             : 83
RCBRACKET            : 17
REMOVE               : 98
RETURN               : 39
RPAR                 : 10 39 59 66 73 77 96 98 99 100 101 102 110 111 112 113 114 115
SEMICOLON            : 
SORT                 : 100
STRING               : 
TRUE                 : 
TURNLEFT             : 114
TURNRIGHT            : 115
WHILE                : 73
error                : 

Nonterminals, with rules where they appear

add                  : 32
asign                : 6 22
block                : 1 10 73 77 78
blockx               : 17 19 21
call                 : 27 46 69 72
class                : 0
clean                : 30
cond_1               : 77
cond_2               : 77
cond_else            : 78
condition            : 23
cycle                : 24
cycle_1              : 73
cycle_2              : 73
cycle_3              : 73
eat                  : 29
else                 : 77
empty                : 5 7 9 15 79
equal_val            : 45 46
exp                  : 49 50 52 53
expression           : 39 45 50 59 67 70 73 77 106 108
factor               : 54 55 56
func                 : 8
func_end             : 10
func_list            : 1 8
funcx                : 10 14
get                  : 34
idCheck              : 10
idCheck_Add          : 96 98 99 100
idCheck_List         : 83
id_call              : 101 102
id_param             : 84 85 86 87 88 89
id_param2            : 93 94 95
id_val               : 45 46 68 71
init_vars            : 1 6
list                 : 26
listx                : 83 85 87 89
listx_add            : 96
main_add             : 1
main_retorno         : 1
move                 : 28
op_val               : 50 52 53 55 56 70 71 72
par_call             : 39 66 101 102
par_call2            : 39 66 101 102
paramCheck           : 13 14
params               : 102 106 107
play                 : 31
print                : 25
printx               : 66 70 71 72
remove               : 33
return               : 38
sort                 : 35
statement            : 20 21
termino              : 51 52 53 55 56
termino_val          : 61
turnleft             : 36
turnright            : 37
type                 : 40 41
varcte               : 60 61
vars                 : 13 14 18 19
varsGlobal           : 4
vars_global          : 1 4

Parsing method: LALR

state 0

    (0) S' -> . class
    (1) class -> . main_add vars_global init_vars func_list MAIN main_retorno block
    (2) main_add -> .

    INT             reduce using rule 2 (main_add -> .)
    FLOAT           reduce using rule 2 (main_add -> .)
    BOOLEAN         reduce using rule 2 (main_add -> .)
    ID              reduce using rule 2 (main_add -> .)
    FUNC            reduce using rule 2 (main_add -> .)
    MAIN            reduce using rule 2 (main_add -> .)

    class                          shift and go to state 1
    main_add                       shift and go to state 2

state 1

    (0) S' -> class .



state 2

    (1) class -> main_add . vars_global init_vars func_list MAIN main_retorno block
    (4) vars_global -> . varsGlobal vars_global
    (5) vars_global -> . empty
    (40) varsGlobal -> . type ID
    (116) empty -> .
    (42) type -> . INT
    (43) type -> . FLOAT
    (44) type -> . BOOLEAN

    ID              reduce using rule 116 (empty -> .)
    FUNC            reduce using rule 116 (empty -> .)
    MAIN            reduce using rule 116 (empty -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    BOOLEAN         shift and go to state 6

    varsGlobal                     shift and go to state 3
    empty                          shift and go to state 7
    vars_global                    shift and go to state 8
    type                           shift and go to state 9

state 3

    (4) vars_global -> varsGlobal . vars_global
    (4) vars_global -> . varsGlobal vars_global
    (5) vars_global -> . empty
    (40) varsGlobal -> . type ID
    (116) empty -> .
    (42) type -> . INT
    (43) type -> . FLOAT
    (44) type -> . BOOLEAN

    ID              reduce using rule 116 (empty -> .)
    FUNC            reduce using rule 116 (empty -> .)
    MAIN            reduce using rule 116 (empty -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    BOOLEAN         shift and go to state 6

    varsGlobal                     shift and go to state 3
    vars_global                    shift and go to state 10
    type                           shift and go to state 9
    empty                          shift and go to state 7

state 4

    (42) type -> INT .

    ID              reduce using rule 42 (type -> INT .)


state 5

    (43) type -> FLOAT .

    ID              reduce using rule 43 (type -> FLOAT .)


state 6

    (44) type -> BOOLEAN .

    ID              reduce using rule 44 (type -> BOOLEAN .)


state 7

    (5) vars_global -> empty .

    ID              reduce using rule 5 (vars_global -> empty .)
    FUNC            reduce using rule 5 (vars_global -> empty .)
    MAIN            reduce using rule 5 (vars_global -> empty .)


state 8

    (1) class -> main_add vars_global . init_vars func_list MAIN main_retorno block
    (6) init_vars -> . asign init_vars
    (7) init_vars -> . empty
    (45) asign -> . ID id_val EQUAL equal_val expression
    (46) asign -> . ID id_val EQUAL equal_val call
    (116) empty -> .

    ID              shift and go to state 14
    FUNC            reduce using rule 116 (empty -> .)
    MAIN            reduce using rule 116 (empty -> .)

    init_vars                      shift and go to state 11
    asign                          shift and go to state 12
    empty                          shift and go to state 13

state 9

    (40) varsGlobal -> type . ID

    ID              shift and go to state 15


state 10

    (4) vars_global -> varsGlobal vars_global .

    ID              reduce using rule 4 (vars_global -> varsGlobal vars_global .)
    FUNC            reduce using rule 4 (vars_global -> varsGlobal vars_global .)
    MAIN            reduce using rule 4 (vars_global -> varsGlobal vars_global .)


state 11

    (1) class -> main_add vars_global init_vars . func_list MAIN main_retorno block
    (8) func_list -> . func func_list
    (9) func_list -> . empty
    (10) func -> . FUNC idCheck LPAR funcx RPAR block func_end
    (116) empty -> .

    FUNC            shift and go to state 16
    MAIN            reduce using rule 116 (empty -> .)

    empty                          shift and go to state 17
    func                           shift and go to state 18
    func_list                      shift and go to state 19

state 12

    (6) init_vars -> asign . init_vars
    (6) init_vars -> . asign init_vars
    (7) init_vars -> . empty
    (45) asign -> . ID id_val EQUAL equal_val expression
    (46) asign -> . ID id_val EQUAL equal_val call
    (116) empty -> .

    ID              shift and go to state 14
    FUNC            reduce using rule 116 (empty -> .)
    MAIN            reduce using rule 116 (empty -> .)

    init_vars                      shift and go to state 20
    asign                          shift and go to state 12
    empty                          shift and go to state 13

state 13

    (7) init_vars -> empty .

    FUNC            reduce using rule 7 (init_vars -> empty .)
    MAIN            reduce using rule 7 (init_vars -> empty .)


state 14

    (45) asign -> ID . id_val EQUAL equal_val expression
    (46) asign -> ID . id_val EQUAL equal_val call
    (47) id_val -> .

    EQUAL           reduce using rule 47 (id_val -> .)

    id_val                         shift and go to state 21

state 15

    (40) varsGlobal -> type ID .

    INT             reduce using rule 40 (varsGlobal -> type ID .)
    FLOAT           reduce using rule 40 (varsGlobal -> type ID .)
    BOOLEAN         reduce using rule 40 (varsGlobal -> type ID .)
    ID              reduce using rule 40 (varsGlobal -> type ID .)
    FUNC            reduce using rule 40 (varsGlobal -> type ID .)
    MAIN            reduce using rule 40 (varsGlobal -> type ID .)


state 16

    (10) func -> FUNC . idCheck LPAR funcx RPAR block func_end
    (12) idCheck -> . ID

    ID              shift and go to state 23

    idCheck                        shift and go to state 22

state 17

    (9) func_list -> empty .

    MAIN            reduce using rule 9 (func_list -> empty .)


state 18

    (8) func_list -> func . func_list
    (8) func_list -> . func func_list
    (9) func_list -> . empty
    (10) func -> . FUNC idCheck LPAR funcx RPAR block func_end
    (116) empty -> .

    FUNC            shift and go to state 16
    MAIN            reduce using rule 116 (empty -> .)

    empty                          shift and go to state 17
    func                           shift and go to state 18
    func_list                      shift and go to state 24

state 19

    (1) class -> main_add vars_global init_vars func_list . MAIN main_retorno block

    MAIN            shift and go to state 25


state 20

    (6) init_vars -> asign init_vars .

    FUNC            reduce using rule 6 (init_vars -> asign init_vars .)
    MAIN            reduce using rule 6 (init_vars -> asign init_vars .)


state 21

    (45) asign -> ID id_val . EQUAL equal_val expression
    (46) asign -> ID id_val . EQUAL equal_val call

    EQUAL           shift and go to state 26


state 22

    (10) func -> FUNC idCheck . LPAR funcx RPAR block func_end

    LPAR            shift and go to state 27


state 23

    (12) idCheck -> ID .

    LPAR            reduce using rule 12 (idCheck -> ID .)


state 24

    (8) func_list -> func func_list .

    MAIN            reduce using rule 8 (func_list -> func func_list .)


state 25

    (1) class -> main_add vars_global init_vars func_list MAIN . main_retorno block
    (3) main_retorno -> .

    LCBRACKET       reduce using rule 3 (main_retorno -> .)

    main_retorno                   shift and go to state 28

state 26

    (45) asign -> ID id_val EQUAL . equal_val expression
    (46) asign -> ID id_val EQUAL . equal_val call
    (48) equal_val -> .

    ID              reduce using rule 48 (equal_val -> .)
    LPAR            reduce using rule 48 (equal_val -> .)
    MINUS           reduce using rule 48 (equal_val -> .)
    NUMINT          reduce using rule 48 (equal_val -> .)
    NUMFLOAT        reduce using rule 48 (equal_val -> .)
    BOOLEANTYPE     reduce using rule 48 (equal_val -> .)

    equal_val                      shift and go to state 29

state 27

    (10) func -> FUNC idCheck LPAR . funcx RPAR block func_end
    (13) funcx -> . vars paramCheck
    (14) funcx -> . vars paramCheck COMA funcx
    (15) funcx -> . empty
    (41) vars -> . type ID
    (116) empty -> .
    (42) type -> . INT
    (43) type -> . FLOAT
    (44) type -> . BOOLEAN

    RPAR            reduce using rule 116 (empty -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    BOOLEAN         shift and go to state 6

    funcx                          shift and go to state 31
    vars                           shift and go to state 30
    empty                          shift and go to state 32
    type                           shift and go to state 33

state 28

    (1) class -> main_add vars_global init_vars func_list MAIN main_retorno . block
    (17) block -> . LCBRACKET blockx RCBRACKET

    LCBRACKET       shift and go to state 34

    block                          shift and go to state 35

state 29

    (45) asign -> ID id_val EQUAL equal_val . expression
    (46) asign -> ID id_val EQUAL equal_val . call
    (49) expression -> . exp
    (50) expression -> . exp COMPARISON op_val expression
    (101) call -> . ID id_call LPAR par_call RPAR par_call2
    (102) call -> . ID id_call LPAR par_call params RPAR par_call2
    (51) exp -> . termino
    (52) exp -> . termino PLUS op_val exp
    (53) exp -> . termino MINUS op_val exp
    (54) termino -> . factor
    (55) termino -> . factor MULTIPLY op_val termino
    (56) termino -> . factor DIVIDE op_val termino
    (59) factor -> . LPAR expression RPAR
    (60) factor -> . MINUS varcte
    (61) factor -> . varcte termino_val
    (62) varcte -> . ID
    (63) varcte -> . NUMINT
    (64) varcte -> . NUMFLOAT
    (65) varcte -> . BOOLEANTYPE

    ID              shift and go to state 43
    LPAR            shift and go to state 36
    MINUS           shift and go to state 39
    NUMINT          shift and go to state 44
    NUMFLOAT        shift and go to state 38
    BOOLEANTYPE     shift and go to state 46

    factor                         shift and go to state 42
    varcte                         shift and go to state 40
    call                           shift and go to state 41
    termino                        shift and go to state 37
    exp                            shift and go to state 45
    expression                     shift and go to state 47

state 30

    (13) funcx -> vars . paramCheck
    (14) funcx -> vars . paramCheck COMA funcx
    (16) paramCheck -> .

    COMA            reduce using rule 16 (paramCheck -> .)
    RPAR            reduce using rule 16 (paramCheck -> .)

    paramCheck                     shift and go to state 48

state 31

    (10) func -> FUNC idCheck LPAR funcx . RPAR block func_end

    RPAR            shift and go to state 49


state 32

    (15) funcx -> empty .

    RPAR            reduce using rule 15 (funcx -> empty .)


state 33

    (41) vars -> type . ID

    ID              shift and go to state 50


state 34

    (17) block -> LCBRACKET . blockx RCBRACKET
    (18) blockx -> . vars
    (19) blockx -> . vars blockx
    (20) blockx -> . statement
    (21) blockx -> . statement blockx
    (41) vars -> . type ID
    (22) statement -> . asign
    (23) statement -> . condition
    (24) statement -> . cycle
    (25) statement -> . print
    (26) statement -> . list
    (27) statement -> . call
    (28) statement -> . move
    (29) statement -> . eat
    (30) statement -> . clean
    (31) statement -> . play
    (32) statement -> . add
    (33) statement -> . remove
    (34) statement -> . get
    (35) statement -> . sort
    (36) statement -> . turnleft
    (37) statement -> . turnright
    (38) statement -> . return
    (42) type -> . INT
    (43) type -> . FLOAT
    (44) type -> . BOOLEAN
    (45) asign -> . ID id_val EQUAL equal_val expression
    (46) asign -> . ID id_val EQUAL equal_val call
    (77) condition -> . IF LPAR expression RPAR cond_1 block else cond_2
    (73) cycle -> . WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3
    (66) print -> . PRINT LPAR par_call printx RPAR par_call2
    (83) list -> . LIST idCheck_List EQUAL LBRACKET listx RBRACKET
    (101) call -> . ID id_call LPAR par_call RPAR par_call2
    (102) call -> . ID id_call LPAR par_call params RPAR par_call2
    (110) move -> . MOVE LPAR ID RPAR
    (111) eat -> . EAT LPAR ID RPAR
    (112) clean -> . CLEAN LPAR ID RPAR
    (113) play -> . PLAY LPAR ID RPAR
    (96) add -> . ID idCheck_Add POINT ADD LPAR listx_add RPAR
    (98) remove -> . ID idCheck_Add POINT REMOVE LPAR RPAR
    (99) get -> . ID idCheck_Add POINT FIND LPAR NUMINT RPAR
    (100) sort -> . ID idCheck_Add POINT SORT LPAR RPAR
    (114) turnleft -> . TURNLEFT LPAR RPAR
    (115) turnright -> . TURNRIGHT LPAR RPAR
    (39) return -> . RETURN LPAR par_call expression RPAR par_call2

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    BOOLEAN         shift and go to state 6
    ID              shift and go to state 57
    IF              shift and go to state 63
    WHILE           shift and go to state 54
    PRINT           shift and go to state 55
    LIST            shift and go to state 56
    MOVE            shift and go to state 67
    EAT             shift and go to state 64
    CLEAN           shift and go to state 73
    PLAY            shift and go to state 77
    TURNLEFT        shift and go to state 78
    TURNRIGHT       shift and go to state 72
    RETURN          shift and go to state 51

    vars                           shift and go to state 52
    move                           shift and go to state 53
    turnright                      shift and go to state 58
    add                            shift and go to state 59
    call                           shift and go to state 60
    statement                      shift and go to state 61
    print                          shift and go to state 62
    type                           shift and go to state 33
    sort                           shift and go to state 65
    play                           shift and go to state 66
    return                         shift and go to state 68
    get                            shift and go to state 69
    turnleft                       shift and go to state 70
    blockx                         shift and go to state 71
    eat                            shift and go to state 74
    condition                      shift and go to state 75
    cycle                          shift and go to state 76
    list                           shift and go to state 79
    remove                         shift and go to state 80
    asign                          shift and go to state 81
    clean                          shift and go to state 82

state 35

    (1) class -> main_add vars_global init_vars func_list MAIN main_retorno block .

    $end            reduce using rule 1 (class -> main_add vars_global init_vars func_list MAIN main_retorno block .)


state 36

    (59) factor -> LPAR . expression RPAR
    (49) expression -> . exp
    (50) expression -> . exp COMPARISON op_val expression
    (51) exp -> . termino
    (52) exp -> . termino PLUS op_val exp
    (53) exp -> . termino MINUS op_val exp
    (54) termino -> . factor
    (55) termino -> . factor MULTIPLY op_val termino
    (56) termino -> . factor DIVIDE op_val termino
    (59) factor -> . LPAR expression RPAR
    (60) factor -> . MINUS varcte
    (61) factor -> . varcte termino_val
    (62) varcte -> . ID
    (63) varcte -> . NUMINT
    (64) varcte -> . NUMFLOAT
    (65) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 36
    MINUS           shift and go to state 39
    ID              shift and go to state 83
    NUMINT          shift and go to state 44
    NUMFLOAT        shift and go to state 38
    BOOLEANTYPE     shift and go to state 46

    varcte                         shift and go to state 40
    termino                        shift and go to state 37
    exp                            shift and go to state 45
    factor                         shift and go to state 42
    expression                     shift and go to state 84

state 37

    (51) exp -> termino .
    (52) exp -> termino . PLUS op_val exp
    (53) exp -> termino . MINUS op_val exp

  ! shift/reduce conflict for PLUS resolved as shift
    COMPARISON      reduce using rule 51 (exp -> termino .)
    ID              reduce using rule 51 (exp -> termino .)
    FUNC            reduce using rule 51 (exp -> termino .)
    MAIN            reduce using rule 51 (exp -> termino .)
    INT             reduce using rule 51 (exp -> termino .)
    FLOAT           reduce using rule 51 (exp -> termino .)
    BOOLEAN         reduce using rule 51 (exp -> termino .)
    IF              reduce using rule 51 (exp -> termino .)
    WHILE           reduce using rule 51 (exp -> termino .)
    PRINT           reduce using rule 51 (exp -> termino .)
    LIST            reduce using rule 51 (exp -> termino .)
    MOVE            reduce using rule 51 (exp -> termino .)
    EAT             reduce using rule 51 (exp -> termino .)
    CLEAN           reduce using rule 51 (exp -> termino .)
    PLAY            reduce using rule 51 (exp -> termino .)
    TURNLEFT        reduce using rule 51 (exp -> termino .)
    TURNRIGHT       reduce using rule 51 (exp -> termino .)
    RETURN          reduce using rule 51 (exp -> termino .)
    RCBRACKET       reduce using rule 51 (exp -> termino .)
    RPAR            reduce using rule 51 (exp -> termino .)
    COMA            reduce using rule 51 (exp -> termino .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

  ! PLUS            [ reduce using rule 51 (exp -> termino .) ]


state 38

    (64) varcte -> NUMFLOAT .

    MULTIPLY        reduce using rule 64 (varcte -> NUMFLOAT .)
    DIVIDE          reduce using rule 64 (varcte -> NUMFLOAT .)
    PLUS            reduce using rule 64 (varcte -> NUMFLOAT .)
    MINUS           reduce using rule 64 (varcte -> NUMFLOAT .)
    COMPARISON      reduce using rule 64 (varcte -> NUMFLOAT .)
    RPAR            reduce using rule 64 (varcte -> NUMFLOAT .)
    COMA            reduce using rule 64 (varcte -> NUMFLOAT .)
    ID              reduce using rule 64 (varcte -> NUMFLOAT .)
    FUNC            reduce using rule 64 (varcte -> NUMFLOAT .)
    MAIN            reduce using rule 64 (varcte -> NUMFLOAT .)
    INT             reduce using rule 64 (varcte -> NUMFLOAT .)
    FLOAT           reduce using rule 64 (varcte -> NUMFLOAT .)
    BOOLEAN         reduce using rule 64 (varcte -> NUMFLOAT .)
    IF              reduce using rule 64 (varcte -> NUMFLOAT .)
    WHILE           reduce using rule 64 (varcte -> NUMFLOAT .)
    PRINT           reduce using rule 64 (varcte -> NUMFLOAT .)
    LIST            reduce using rule 64 (varcte -> NUMFLOAT .)
    MOVE            reduce using rule 64 (varcte -> NUMFLOAT .)
    EAT             reduce using rule 64 (varcte -> NUMFLOAT .)
    CLEAN           reduce using rule 64 (varcte -> NUMFLOAT .)
    PLAY            reduce using rule 64 (varcte -> NUMFLOAT .)
    TURNLEFT        reduce using rule 64 (varcte -> NUMFLOAT .)
    TURNRIGHT       reduce using rule 64 (varcte -> NUMFLOAT .)
    RETURN          reduce using rule 64 (varcte -> NUMFLOAT .)
    RCBRACKET       reduce using rule 64 (varcte -> NUMFLOAT .)


state 39

    (60) factor -> MINUS . varcte
    (62) varcte -> . ID
    (63) varcte -> . NUMINT
    (64) varcte -> . NUMFLOAT
    (65) varcte -> . BOOLEANTYPE

    ID              shift and go to state 83
    NUMINT          shift and go to state 44
    NUMFLOAT        shift and go to state 38
    BOOLEANTYPE     shift and go to state 46

    varcte                         shift and go to state 87

state 40

    (61) factor -> varcte . termino_val
    (57) termino_val -> .

    MULTIPLY        reduce using rule 57 (termino_val -> .)
    DIVIDE          reduce using rule 57 (termino_val -> .)
    PLUS            reduce using rule 57 (termino_val -> .)
    MINUS           reduce using rule 57 (termino_val -> .)
    COMPARISON      reduce using rule 57 (termino_val -> .)
    ID              reduce using rule 57 (termino_val -> .)
    FUNC            reduce using rule 57 (termino_val -> .)
    MAIN            reduce using rule 57 (termino_val -> .)
    INT             reduce using rule 57 (termino_val -> .)
    FLOAT           reduce using rule 57 (termino_val -> .)
    BOOLEAN         reduce using rule 57 (termino_val -> .)
    IF              reduce using rule 57 (termino_val -> .)
    WHILE           reduce using rule 57 (termino_val -> .)
    PRINT           reduce using rule 57 (termino_val -> .)
    LIST            reduce using rule 57 (termino_val -> .)
    MOVE            reduce using rule 57 (termino_val -> .)
    EAT             reduce using rule 57 (termino_val -> .)
    CLEAN           reduce using rule 57 (termino_val -> .)
    PLAY            reduce using rule 57 (termino_val -> .)
    TURNLEFT        reduce using rule 57 (termino_val -> .)
    TURNRIGHT       reduce using rule 57 (termino_val -> .)
    RETURN          reduce using rule 57 (termino_val -> .)
    RCBRACKET       reduce using rule 57 (termino_val -> .)
    RPAR            reduce using rule 57 (termino_val -> .)
    COMA            reduce using rule 57 (termino_val -> .)

    termino_val                    shift and go to state 88

state 41

    (46) asign -> ID id_val EQUAL equal_val call .

    INT             reduce using rule 46 (asign -> ID id_val EQUAL equal_val call .)
    FLOAT           reduce using rule 46 (asign -> ID id_val EQUAL equal_val call .)
    BOOLEAN         reduce using rule 46 (asign -> ID id_val EQUAL equal_val call .)
    ID              reduce using rule 46 (asign -> ID id_val EQUAL equal_val call .)
    IF              reduce using rule 46 (asign -> ID id_val EQUAL equal_val call .)
    WHILE           reduce using rule 46 (asign -> ID id_val EQUAL equal_val call .)
    PRINT           reduce using rule 46 (asign -> ID id_val EQUAL equal_val call .)
    LIST            reduce using rule 46 (asign -> ID id_val EQUAL equal_val call .)
    MOVE            reduce using rule 46 (asign -> ID id_val EQUAL equal_val call .)
    EAT             reduce using rule 46 (asign -> ID id_val EQUAL equal_val call .)
    CLEAN           reduce using rule 46 (asign -> ID id_val EQUAL equal_val call .)
    PLAY            reduce using rule 46 (asign -> ID id_val EQUAL equal_val call .)
    TURNLEFT        reduce using rule 46 (asign -> ID id_val EQUAL equal_val call .)
    TURNRIGHT       reduce using rule 46 (asign -> ID id_val EQUAL equal_val call .)
    RETURN          reduce using rule 46 (asign -> ID id_val EQUAL equal_val call .)
    RCBRACKET       reduce using rule 46 (asign -> ID id_val EQUAL equal_val call .)
    FUNC            reduce using rule 46 (asign -> ID id_val EQUAL equal_val call .)
    MAIN            reduce using rule 46 (asign -> ID id_val EQUAL equal_val call .)


state 42

    (54) termino -> factor .
    (55) termino -> factor . MULTIPLY op_val termino
    (56) termino -> factor . DIVIDE op_val termino

    PLUS            reduce using rule 54 (termino -> factor .)
    MINUS           reduce using rule 54 (termino -> factor .)
    COMPARISON      reduce using rule 54 (termino -> factor .)
    RPAR            reduce using rule 54 (termino -> factor .)
    COMA            reduce using rule 54 (termino -> factor .)
    ID              reduce using rule 54 (termino -> factor .)
    FUNC            reduce using rule 54 (termino -> factor .)
    MAIN            reduce using rule 54 (termino -> factor .)
    INT             reduce using rule 54 (termino -> factor .)
    FLOAT           reduce using rule 54 (termino -> factor .)
    BOOLEAN         reduce using rule 54 (termino -> factor .)
    IF              reduce using rule 54 (termino -> factor .)
    WHILE           reduce using rule 54 (termino -> factor .)
    PRINT           reduce using rule 54 (termino -> factor .)
    LIST            reduce using rule 54 (termino -> factor .)
    MOVE            reduce using rule 54 (termino -> factor .)
    EAT             reduce using rule 54 (termino -> factor .)
    CLEAN           reduce using rule 54 (termino -> factor .)
    PLAY            reduce using rule 54 (termino -> factor .)
    TURNLEFT        reduce using rule 54 (termino -> factor .)
    TURNRIGHT       reduce using rule 54 (termino -> factor .)
    RETURN          reduce using rule 54 (termino -> factor .)
    RCBRACKET       reduce using rule 54 (termino -> factor .)
    MULTIPLY        shift and go to state 89
    DIVIDE          shift and go to state 90


state 43

    (101) call -> ID . id_call LPAR par_call RPAR par_call2
    (102) call -> ID . id_call LPAR par_call params RPAR par_call2
    (62) varcte -> ID .
    (103) id_call -> .

    MULTIPLY        reduce using rule 62 (varcte -> ID .)
    DIVIDE          reduce using rule 62 (varcte -> ID .)
    PLUS            reduce using rule 62 (varcte -> ID .)
    MINUS           reduce using rule 62 (varcte -> ID .)
    COMPARISON      reduce using rule 62 (varcte -> ID .)
    ID              reduce using rule 62 (varcte -> ID .)
    FUNC            reduce using rule 62 (varcte -> ID .)
    MAIN            reduce using rule 62 (varcte -> ID .)
    INT             reduce using rule 62 (varcte -> ID .)
    FLOAT           reduce using rule 62 (varcte -> ID .)
    BOOLEAN         reduce using rule 62 (varcte -> ID .)
    IF              reduce using rule 62 (varcte -> ID .)
    WHILE           reduce using rule 62 (varcte -> ID .)
    PRINT           reduce using rule 62 (varcte -> ID .)
    LIST            reduce using rule 62 (varcte -> ID .)
    MOVE            reduce using rule 62 (varcte -> ID .)
    EAT             reduce using rule 62 (varcte -> ID .)
    CLEAN           reduce using rule 62 (varcte -> ID .)
    PLAY            reduce using rule 62 (varcte -> ID .)
    TURNLEFT        reduce using rule 62 (varcte -> ID .)
    TURNRIGHT       reduce using rule 62 (varcte -> ID .)
    RETURN          reduce using rule 62 (varcte -> ID .)
    RCBRACKET       reduce using rule 62 (varcte -> ID .)
    LPAR            reduce using rule 103 (id_call -> .)

    id_call                        shift and go to state 91

state 44

    (63) varcte -> NUMINT .

    MULTIPLY        reduce using rule 63 (varcte -> NUMINT .)
    DIVIDE          reduce using rule 63 (varcte -> NUMINT .)
    PLUS            reduce using rule 63 (varcte -> NUMINT .)
    MINUS           reduce using rule 63 (varcte -> NUMINT .)
    COMPARISON      reduce using rule 63 (varcte -> NUMINT .)
    RPAR            reduce using rule 63 (varcte -> NUMINT .)
    COMA            reduce using rule 63 (varcte -> NUMINT .)
    ID              reduce using rule 63 (varcte -> NUMINT .)
    FUNC            reduce using rule 63 (varcte -> NUMINT .)
    MAIN            reduce using rule 63 (varcte -> NUMINT .)
    INT             reduce using rule 63 (varcte -> NUMINT .)
    FLOAT           reduce using rule 63 (varcte -> NUMINT .)
    BOOLEAN         reduce using rule 63 (varcte -> NUMINT .)
    IF              reduce using rule 63 (varcte -> NUMINT .)
    WHILE           reduce using rule 63 (varcte -> NUMINT .)
    PRINT           reduce using rule 63 (varcte -> NUMINT .)
    LIST            reduce using rule 63 (varcte -> NUMINT .)
    MOVE            reduce using rule 63 (varcte -> NUMINT .)
    EAT             reduce using rule 63 (varcte -> NUMINT .)
    CLEAN           reduce using rule 63 (varcte -> NUMINT .)
    PLAY            reduce using rule 63 (varcte -> NUMINT .)
    TURNLEFT        reduce using rule 63 (varcte -> NUMINT .)
    TURNRIGHT       reduce using rule 63 (varcte -> NUMINT .)
    RETURN          reduce using rule 63 (varcte -> NUMINT .)
    RCBRACKET       reduce using rule 63 (varcte -> NUMINT .)


state 45

    (49) expression -> exp .
    (50) expression -> exp . COMPARISON op_val expression

    RPAR            reduce using rule 49 (expression -> exp .)
    COMA            reduce using rule 49 (expression -> exp .)
    ID              reduce using rule 49 (expression -> exp .)
    FUNC            reduce using rule 49 (expression -> exp .)
    MAIN            reduce using rule 49 (expression -> exp .)
    INT             reduce using rule 49 (expression -> exp .)
    FLOAT           reduce using rule 49 (expression -> exp .)
    BOOLEAN         reduce using rule 49 (expression -> exp .)
    IF              reduce using rule 49 (expression -> exp .)
    WHILE           reduce using rule 49 (expression -> exp .)
    PRINT           reduce using rule 49 (expression -> exp .)
    LIST            reduce using rule 49 (expression -> exp .)
    MOVE            reduce using rule 49 (expression -> exp .)
    EAT             reduce using rule 49 (expression -> exp .)
    CLEAN           reduce using rule 49 (expression -> exp .)
    PLAY            reduce using rule 49 (expression -> exp .)
    TURNLEFT        reduce using rule 49 (expression -> exp .)
    TURNRIGHT       reduce using rule 49 (expression -> exp .)
    RETURN          reduce using rule 49 (expression -> exp .)
    RCBRACKET       reduce using rule 49 (expression -> exp .)
    PLUS            reduce using rule 49 (expression -> exp .)
    COMPARISON      shift and go to state 92


state 46

    (65) varcte -> BOOLEANTYPE .

    MULTIPLY        reduce using rule 65 (varcte -> BOOLEANTYPE .)
    DIVIDE          reduce using rule 65 (varcte -> BOOLEANTYPE .)
    PLUS            reduce using rule 65 (varcte -> BOOLEANTYPE .)
    MINUS           reduce using rule 65 (varcte -> BOOLEANTYPE .)
    COMPARISON      reduce using rule 65 (varcte -> BOOLEANTYPE .)
    RPAR            reduce using rule 65 (varcte -> BOOLEANTYPE .)
    COMA            reduce using rule 65 (varcte -> BOOLEANTYPE .)
    ID              reduce using rule 65 (varcte -> BOOLEANTYPE .)
    FUNC            reduce using rule 65 (varcte -> BOOLEANTYPE .)
    MAIN            reduce using rule 65 (varcte -> BOOLEANTYPE .)
    INT             reduce using rule 65 (varcte -> BOOLEANTYPE .)
    FLOAT           reduce using rule 65 (varcte -> BOOLEANTYPE .)
    BOOLEAN         reduce using rule 65 (varcte -> BOOLEANTYPE .)
    IF              reduce using rule 65 (varcte -> BOOLEANTYPE .)
    WHILE           reduce using rule 65 (varcte -> BOOLEANTYPE .)
    PRINT           reduce using rule 65 (varcte -> BOOLEANTYPE .)
    LIST            reduce using rule 65 (varcte -> BOOLEANTYPE .)
    MOVE            reduce using rule 65 (varcte -> BOOLEANTYPE .)
    EAT             reduce using rule 65 (varcte -> BOOLEANTYPE .)
    CLEAN           reduce using rule 65 (varcte -> BOOLEANTYPE .)
    PLAY            reduce using rule 65 (varcte -> BOOLEANTYPE .)
    TURNLEFT        reduce using rule 65 (varcte -> BOOLEANTYPE .)
    TURNRIGHT       reduce using rule 65 (varcte -> BOOLEANTYPE .)
    RETURN          reduce using rule 65 (varcte -> BOOLEANTYPE .)
    RCBRACKET       reduce using rule 65 (varcte -> BOOLEANTYPE .)


state 47

    (45) asign -> ID id_val EQUAL equal_val expression .

    INT             reduce using rule 45 (asign -> ID id_val EQUAL equal_val expression .)
    FLOAT           reduce using rule 45 (asign -> ID id_val EQUAL equal_val expression .)
    BOOLEAN         reduce using rule 45 (asign -> ID id_val EQUAL equal_val expression .)
    ID              reduce using rule 45 (asign -> ID id_val EQUAL equal_val expression .)
    IF              reduce using rule 45 (asign -> ID id_val EQUAL equal_val expression .)
    WHILE           reduce using rule 45 (asign -> ID id_val EQUAL equal_val expression .)
    PRINT           reduce using rule 45 (asign -> ID id_val EQUAL equal_val expression .)
    LIST            reduce using rule 45 (asign -> ID id_val EQUAL equal_val expression .)
    MOVE            reduce using rule 45 (asign -> ID id_val EQUAL equal_val expression .)
    EAT             reduce using rule 45 (asign -> ID id_val EQUAL equal_val expression .)
    CLEAN           reduce using rule 45 (asign -> ID id_val EQUAL equal_val expression .)
    PLAY            reduce using rule 45 (asign -> ID id_val EQUAL equal_val expression .)
    TURNLEFT        reduce using rule 45 (asign -> ID id_val EQUAL equal_val expression .)
    TURNRIGHT       reduce using rule 45 (asign -> ID id_val EQUAL equal_val expression .)
    RETURN          reduce using rule 45 (asign -> ID id_val EQUAL equal_val expression .)
    RCBRACKET       reduce using rule 45 (asign -> ID id_val EQUAL equal_val expression .)
    FUNC            reduce using rule 45 (asign -> ID id_val EQUAL equal_val expression .)
    MAIN            reduce using rule 45 (asign -> ID id_val EQUAL equal_val expression .)


state 48

    (13) funcx -> vars paramCheck .
    (14) funcx -> vars paramCheck . COMA funcx

    RPAR            reduce using rule 13 (funcx -> vars paramCheck .)
    COMA            shift and go to state 93


state 49

    (10) func -> FUNC idCheck LPAR funcx RPAR . block func_end
    (17) block -> . LCBRACKET blockx RCBRACKET

    LCBRACKET       shift and go to state 34

    block                          shift and go to state 94

state 50

    (41) vars -> type ID .

    INT             reduce using rule 41 (vars -> type ID .)
    FLOAT           reduce using rule 41 (vars -> type ID .)
    BOOLEAN         reduce using rule 41 (vars -> type ID .)
    ID              reduce using rule 41 (vars -> type ID .)
    IF              reduce using rule 41 (vars -> type ID .)
    WHILE           reduce using rule 41 (vars -> type ID .)
    PRINT           reduce using rule 41 (vars -> type ID .)
    LIST            reduce using rule 41 (vars -> type ID .)
    MOVE            reduce using rule 41 (vars -> type ID .)
    EAT             reduce using rule 41 (vars -> type ID .)
    CLEAN           reduce using rule 41 (vars -> type ID .)
    PLAY            reduce using rule 41 (vars -> type ID .)
    TURNLEFT        reduce using rule 41 (vars -> type ID .)
    TURNRIGHT       reduce using rule 41 (vars -> type ID .)
    RETURN          reduce using rule 41 (vars -> type ID .)
    RCBRACKET       reduce using rule 41 (vars -> type ID .)
    COMA            reduce using rule 41 (vars -> type ID .)
    RPAR            reduce using rule 41 (vars -> type ID .)


state 51

    (39) return -> RETURN . LPAR par_call expression RPAR par_call2

    LPAR            shift and go to state 95


state 52

    (18) blockx -> vars .
    (19) blockx -> vars . blockx
    (18) blockx -> . vars
    (19) blockx -> . vars blockx
    (20) blockx -> . statement
    (21) blockx -> . statement blockx
    (41) vars -> . type ID
    (22) statement -> . asign
    (23) statement -> . condition
    (24) statement -> . cycle
    (25) statement -> . print
    (26) statement -> . list
    (27) statement -> . call
    (28) statement -> . move
    (29) statement -> . eat
    (30) statement -> . clean
    (31) statement -> . play
    (32) statement -> . add
    (33) statement -> . remove
    (34) statement -> . get
    (35) statement -> . sort
    (36) statement -> . turnleft
    (37) statement -> . turnright
    (38) statement -> . return
    (42) type -> . INT
    (43) type -> . FLOAT
    (44) type -> . BOOLEAN
    (45) asign -> . ID id_val EQUAL equal_val expression
    (46) asign -> . ID id_val EQUAL equal_val call
    (77) condition -> . IF LPAR expression RPAR cond_1 block else cond_2
    (73) cycle -> . WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3
    (66) print -> . PRINT LPAR par_call printx RPAR par_call2
    (83) list -> . LIST idCheck_List EQUAL LBRACKET listx RBRACKET
    (101) call -> . ID id_call LPAR par_call RPAR par_call2
    (102) call -> . ID id_call LPAR par_call params RPAR par_call2
    (110) move -> . MOVE LPAR ID RPAR
    (111) eat -> . EAT LPAR ID RPAR
    (112) clean -> . CLEAN LPAR ID RPAR
    (113) play -> . PLAY LPAR ID RPAR
    (96) add -> . ID idCheck_Add POINT ADD LPAR listx_add RPAR
    (98) remove -> . ID idCheck_Add POINT REMOVE LPAR RPAR
    (99) get -> . ID idCheck_Add POINT FIND LPAR NUMINT RPAR
    (100) sort -> . ID idCheck_Add POINT SORT LPAR RPAR
    (114) turnleft -> . TURNLEFT LPAR RPAR
    (115) turnright -> . TURNRIGHT LPAR RPAR
    (39) return -> . RETURN LPAR par_call expression RPAR par_call2

    RCBRACKET       reduce using rule 18 (blockx -> vars .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    BOOLEAN         shift and go to state 6
    ID              shift and go to state 57
    IF              shift and go to state 63
    WHILE           shift and go to state 54
    PRINT           shift and go to state 55
    LIST            shift and go to state 56
    MOVE            shift and go to state 67
    EAT             shift and go to state 64
    CLEAN           shift and go to state 73
    PLAY            shift and go to state 77
    TURNLEFT        shift and go to state 78
    TURNRIGHT       shift and go to state 72
    RETURN          shift and go to state 51

    vars                           shift and go to state 52
    move                           shift and go to state 53
    turnright                      shift and go to state 58
    add                            shift and go to state 59
    call                           shift and go to state 60
    statement                      shift and go to state 61
    print                          shift and go to state 62
    type                           shift and go to state 33
    sort                           shift and go to state 65
    play                           shift and go to state 66
    return                         shift and go to state 68
    get                            shift and go to state 69
    turnleft                       shift and go to state 70
    blockx                         shift and go to state 96
    eat                            shift and go to state 74
    condition                      shift and go to state 75
    cycle                          shift and go to state 76
    list                           shift and go to state 79
    remove                         shift and go to state 80
    asign                          shift and go to state 81
    clean                          shift and go to state 82

state 53

    (28) statement -> move .

    INT             reduce using rule 28 (statement -> move .)
    FLOAT           reduce using rule 28 (statement -> move .)
    BOOLEAN         reduce using rule 28 (statement -> move .)
    ID              reduce using rule 28 (statement -> move .)
    IF              reduce using rule 28 (statement -> move .)
    WHILE           reduce using rule 28 (statement -> move .)
    PRINT           reduce using rule 28 (statement -> move .)
    LIST            reduce using rule 28 (statement -> move .)
    MOVE            reduce using rule 28 (statement -> move .)
    EAT             reduce using rule 28 (statement -> move .)
    CLEAN           reduce using rule 28 (statement -> move .)
    PLAY            reduce using rule 28 (statement -> move .)
    TURNLEFT        reduce using rule 28 (statement -> move .)
    TURNRIGHT       reduce using rule 28 (statement -> move .)
    RETURN          reduce using rule 28 (statement -> move .)
    RCBRACKET       reduce using rule 28 (statement -> move .)


state 54

    (73) cycle -> WHILE . cycle_1 LPAR expression RPAR cycle_2 block cycle_3
    (74) cycle_1 -> .

    LPAR            reduce using rule 74 (cycle_1 -> .)

    cycle_1                        shift and go to state 97

state 55

    (66) print -> PRINT . LPAR par_call printx RPAR par_call2

    LPAR            shift and go to state 98


state 56

    (83) list -> LIST . idCheck_List EQUAL LBRACKET listx RBRACKET
    (90) idCheck_List -> . ID

    ID              shift and go to state 100

    idCheck_List                   shift and go to state 99

state 57

    (45) asign -> ID . id_val EQUAL equal_val expression
    (46) asign -> ID . id_val EQUAL equal_val call
    (101) call -> ID . id_call LPAR par_call RPAR par_call2
    (102) call -> ID . id_call LPAR par_call params RPAR par_call2
    (96) add -> ID . idCheck_Add POINT ADD LPAR listx_add RPAR
    (98) remove -> ID . idCheck_Add POINT REMOVE LPAR RPAR
    (99) get -> ID . idCheck_Add POINT FIND LPAR NUMINT RPAR
    (100) sort -> ID . idCheck_Add POINT SORT LPAR RPAR
    (47) id_val -> .
    (103) id_call -> .
    (97) idCheck_Add -> .

    EQUAL           reduce using rule 47 (id_val -> .)
    LPAR            reduce using rule 103 (id_call -> .)
    POINT           reduce using rule 97 (idCheck_Add -> .)

    idCheck_Add                    shift and go to state 101
    id_call                        shift and go to state 91
    id_val                         shift and go to state 21

state 58

    (37) statement -> turnright .

    INT             reduce using rule 37 (statement -> turnright .)
    FLOAT           reduce using rule 37 (statement -> turnright .)
    BOOLEAN         reduce using rule 37 (statement -> turnright .)
    ID              reduce using rule 37 (statement -> turnright .)
    IF              reduce using rule 37 (statement -> turnright .)
    WHILE           reduce using rule 37 (statement -> turnright .)
    PRINT           reduce using rule 37 (statement -> turnright .)
    LIST            reduce using rule 37 (statement -> turnright .)
    MOVE            reduce using rule 37 (statement -> turnright .)
    EAT             reduce using rule 37 (statement -> turnright .)
    CLEAN           reduce using rule 37 (statement -> turnright .)
    PLAY            reduce using rule 37 (statement -> turnright .)
    TURNLEFT        reduce using rule 37 (statement -> turnright .)
    TURNRIGHT       reduce using rule 37 (statement -> turnright .)
    RETURN          reduce using rule 37 (statement -> turnright .)
    RCBRACKET       reduce using rule 37 (statement -> turnright .)


state 59

    (32) statement -> add .

    INT             reduce using rule 32 (statement -> add .)
    FLOAT           reduce using rule 32 (statement -> add .)
    BOOLEAN         reduce using rule 32 (statement -> add .)
    ID              reduce using rule 32 (statement -> add .)
    IF              reduce using rule 32 (statement -> add .)
    WHILE           reduce using rule 32 (statement -> add .)
    PRINT           reduce using rule 32 (statement -> add .)
    LIST            reduce using rule 32 (statement -> add .)
    MOVE            reduce using rule 32 (statement -> add .)
    EAT             reduce using rule 32 (statement -> add .)
    CLEAN           reduce using rule 32 (statement -> add .)
    PLAY            reduce using rule 32 (statement -> add .)
    TURNLEFT        reduce using rule 32 (statement -> add .)
    TURNRIGHT       reduce using rule 32 (statement -> add .)
    RETURN          reduce using rule 32 (statement -> add .)
    RCBRACKET       reduce using rule 32 (statement -> add .)


state 60

    (27) statement -> call .

    INT             reduce using rule 27 (statement -> call .)
    FLOAT           reduce using rule 27 (statement -> call .)
    BOOLEAN         reduce using rule 27 (statement -> call .)
    ID              reduce using rule 27 (statement -> call .)
    IF              reduce using rule 27 (statement -> call .)
    WHILE           reduce using rule 27 (statement -> call .)
    PRINT           reduce using rule 27 (statement -> call .)
    LIST            reduce using rule 27 (statement -> call .)
    MOVE            reduce using rule 27 (statement -> call .)
    EAT             reduce using rule 27 (statement -> call .)
    CLEAN           reduce using rule 27 (statement -> call .)
    PLAY            reduce using rule 27 (statement -> call .)
    TURNLEFT        reduce using rule 27 (statement -> call .)
    TURNRIGHT       reduce using rule 27 (statement -> call .)
    RETURN          reduce using rule 27 (statement -> call .)
    RCBRACKET       reduce using rule 27 (statement -> call .)


state 61

    (20) blockx -> statement .
    (21) blockx -> statement . blockx
    (18) blockx -> . vars
    (19) blockx -> . vars blockx
    (20) blockx -> . statement
    (21) blockx -> . statement blockx
    (41) vars -> . type ID
    (22) statement -> . asign
    (23) statement -> . condition
    (24) statement -> . cycle
    (25) statement -> . print
    (26) statement -> . list
    (27) statement -> . call
    (28) statement -> . move
    (29) statement -> . eat
    (30) statement -> . clean
    (31) statement -> . play
    (32) statement -> . add
    (33) statement -> . remove
    (34) statement -> . get
    (35) statement -> . sort
    (36) statement -> . turnleft
    (37) statement -> . turnright
    (38) statement -> . return
    (42) type -> . INT
    (43) type -> . FLOAT
    (44) type -> . BOOLEAN
    (45) asign -> . ID id_val EQUAL equal_val expression
    (46) asign -> . ID id_val EQUAL equal_val call
    (77) condition -> . IF LPAR expression RPAR cond_1 block else cond_2
    (73) cycle -> . WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3
    (66) print -> . PRINT LPAR par_call printx RPAR par_call2
    (83) list -> . LIST idCheck_List EQUAL LBRACKET listx RBRACKET
    (101) call -> . ID id_call LPAR par_call RPAR par_call2
    (102) call -> . ID id_call LPAR par_call params RPAR par_call2
    (110) move -> . MOVE LPAR ID RPAR
    (111) eat -> . EAT LPAR ID RPAR
    (112) clean -> . CLEAN LPAR ID RPAR
    (113) play -> . PLAY LPAR ID RPAR
    (96) add -> . ID idCheck_Add POINT ADD LPAR listx_add RPAR
    (98) remove -> . ID idCheck_Add POINT REMOVE LPAR RPAR
    (99) get -> . ID idCheck_Add POINT FIND LPAR NUMINT RPAR
    (100) sort -> . ID idCheck_Add POINT SORT LPAR RPAR
    (114) turnleft -> . TURNLEFT LPAR RPAR
    (115) turnright -> . TURNRIGHT LPAR RPAR
    (39) return -> . RETURN LPAR par_call expression RPAR par_call2

    RCBRACKET       reduce using rule 20 (blockx -> statement .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    BOOLEAN         shift and go to state 6
    ID              shift and go to state 57
    IF              shift and go to state 63
    WHILE           shift and go to state 54
    PRINT           shift and go to state 55
    LIST            shift and go to state 56
    MOVE            shift and go to state 67
    EAT             shift and go to state 64
    CLEAN           shift and go to state 73
    PLAY            shift and go to state 77
    TURNLEFT        shift and go to state 78
    TURNRIGHT       shift and go to state 72
    RETURN          shift and go to state 51

    vars                           shift and go to state 52
    move                           shift and go to state 53
    turnright                      shift and go to state 58
    add                            shift and go to state 59
    call                           shift and go to state 60
    statement                      shift and go to state 61
    print                          shift and go to state 62
    type                           shift and go to state 33
    sort                           shift and go to state 65
    play                           shift and go to state 66
    return                         shift and go to state 68
    get                            shift and go to state 69
    turnleft                       shift and go to state 70
    blockx                         shift and go to state 102
    eat                            shift and go to state 74
    condition                      shift and go to state 75
    cycle                          shift and go to state 76
    list                           shift and go to state 79
    remove                         shift and go to state 80
    asign                          shift and go to state 81
    clean                          shift and go to state 82

state 62

    (25) statement -> print .

    INT             reduce using rule 25 (statement -> print .)
    FLOAT           reduce using rule 25 (statement -> print .)
    BOOLEAN         reduce using rule 25 (statement -> print .)
    ID              reduce using rule 25 (statement -> print .)
    IF              reduce using rule 25 (statement -> print .)
    WHILE           reduce using rule 25 (statement -> print .)
    PRINT           reduce using rule 25 (statement -> print .)
    LIST            reduce using rule 25 (statement -> print .)
    MOVE            reduce using rule 25 (statement -> print .)
    EAT             reduce using rule 25 (statement -> print .)
    CLEAN           reduce using rule 25 (statement -> print .)
    PLAY            reduce using rule 25 (statement -> print .)
    TURNLEFT        reduce using rule 25 (statement -> print .)
    TURNRIGHT       reduce using rule 25 (statement -> print .)
    RETURN          reduce using rule 25 (statement -> print .)
    RCBRACKET       reduce using rule 25 (statement -> print .)


state 63

    (77) condition -> IF . LPAR expression RPAR cond_1 block else cond_2

    LPAR            shift and go to state 103


state 64

    (111) eat -> EAT . LPAR ID RPAR

    LPAR            shift and go to state 104


state 65

    (35) statement -> sort .

    INT             reduce using rule 35 (statement -> sort .)
    FLOAT           reduce using rule 35 (statement -> sort .)
    BOOLEAN         reduce using rule 35 (statement -> sort .)
    ID              reduce using rule 35 (statement -> sort .)
    IF              reduce using rule 35 (statement -> sort .)
    WHILE           reduce using rule 35 (statement -> sort .)
    PRINT           reduce using rule 35 (statement -> sort .)
    LIST            reduce using rule 35 (statement -> sort .)
    MOVE            reduce using rule 35 (statement -> sort .)
    EAT             reduce using rule 35 (statement -> sort .)
    CLEAN           reduce using rule 35 (statement -> sort .)
    PLAY            reduce using rule 35 (statement -> sort .)
    TURNLEFT        reduce using rule 35 (statement -> sort .)
    TURNRIGHT       reduce using rule 35 (statement -> sort .)
    RETURN          reduce using rule 35 (statement -> sort .)
    RCBRACKET       reduce using rule 35 (statement -> sort .)


state 66

    (31) statement -> play .

    INT             reduce using rule 31 (statement -> play .)
    FLOAT           reduce using rule 31 (statement -> play .)
    BOOLEAN         reduce using rule 31 (statement -> play .)
    ID              reduce using rule 31 (statement -> play .)
    IF              reduce using rule 31 (statement -> play .)
    WHILE           reduce using rule 31 (statement -> play .)
    PRINT           reduce using rule 31 (statement -> play .)
    LIST            reduce using rule 31 (statement -> play .)
    MOVE            reduce using rule 31 (statement -> play .)
    EAT             reduce using rule 31 (statement -> play .)
    CLEAN           reduce using rule 31 (statement -> play .)
    PLAY            reduce using rule 31 (statement -> play .)
    TURNLEFT        reduce using rule 31 (statement -> play .)
    TURNRIGHT       reduce using rule 31 (statement -> play .)
    RETURN          reduce using rule 31 (statement -> play .)
    RCBRACKET       reduce using rule 31 (statement -> play .)


state 67

    (110) move -> MOVE . LPAR ID RPAR

    LPAR            shift and go to state 105


state 68

    (38) statement -> return .

    INT             reduce using rule 38 (statement -> return .)
    FLOAT           reduce using rule 38 (statement -> return .)
    BOOLEAN         reduce using rule 38 (statement -> return .)
    ID              reduce using rule 38 (statement -> return .)
    IF              reduce using rule 38 (statement -> return .)
    WHILE           reduce using rule 38 (statement -> return .)
    PRINT           reduce using rule 38 (statement -> return .)
    LIST            reduce using rule 38 (statement -> return .)
    MOVE            reduce using rule 38 (statement -> return .)
    EAT             reduce using rule 38 (statement -> return .)
    CLEAN           reduce using rule 38 (statement -> return .)
    PLAY            reduce using rule 38 (statement -> return .)
    TURNLEFT        reduce using rule 38 (statement -> return .)
    TURNRIGHT       reduce using rule 38 (statement -> return .)
    RETURN          reduce using rule 38 (statement -> return .)
    RCBRACKET       reduce using rule 38 (statement -> return .)


state 69

    (34) statement -> get .

    INT             reduce using rule 34 (statement -> get .)
    FLOAT           reduce using rule 34 (statement -> get .)
    BOOLEAN         reduce using rule 34 (statement -> get .)
    ID              reduce using rule 34 (statement -> get .)
    IF              reduce using rule 34 (statement -> get .)
    WHILE           reduce using rule 34 (statement -> get .)
    PRINT           reduce using rule 34 (statement -> get .)
    LIST            reduce using rule 34 (statement -> get .)
    MOVE            reduce using rule 34 (statement -> get .)
    EAT             reduce using rule 34 (statement -> get .)
    CLEAN           reduce using rule 34 (statement -> get .)
    PLAY            reduce using rule 34 (statement -> get .)
    TURNLEFT        reduce using rule 34 (statement -> get .)
    TURNRIGHT       reduce using rule 34 (statement -> get .)
    RETURN          reduce using rule 34 (statement -> get .)
    RCBRACKET       reduce using rule 34 (statement -> get .)


state 70

    (36) statement -> turnleft .

    INT             reduce using rule 36 (statement -> turnleft .)
    FLOAT           reduce using rule 36 (statement -> turnleft .)
    BOOLEAN         reduce using rule 36 (statement -> turnleft .)
    ID              reduce using rule 36 (statement -> turnleft .)
    IF              reduce using rule 36 (statement -> turnleft .)
    WHILE           reduce using rule 36 (statement -> turnleft .)
    PRINT           reduce using rule 36 (statement -> turnleft .)
    LIST            reduce using rule 36 (statement -> turnleft .)
    MOVE            reduce using rule 36 (statement -> turnleft .)
    EAT             reduce using rule 36 (statement -> turnleft .)
    CLEAN           reduce using rule 36 (statement -> turnleft .)
    PLAY            reduce using rule 36 (statement -> turnleft .)
    TURNLEFT        reduce using rule 36 (statement -> turnleft .)
    TURNRIGHT       reduce using rule 36 (statement -> turnleft .)
    RETURN          reduce using rule 36 (statement -> turnleft .)
    RCBRACKET       reduce using rule 36 (statement -> turnleft .)


state 71

    (17) block -> LCBRACKET blockx . RCBRACKET

    RCBRACKET       shift and go to state 106


state 72

    (115) turnright -> TURNRIGHT . LPAR RPAR

    LPAR            shift and go to state 107


state 73

    (112) clean -> CLEAN . LPAR ID RPAR

    LPAR            shift and go to state 108


state 74

    (29) statement -> eat .

    INT             reduce using rule 29 (statement -> eat .)
    FLOAT           reduce using rule 29 (statement -> eat .)
    BOOLEAN         reduce using rule 29 (statement -> eat .)
    ID              reduce using rule 29 (statement -> eat .)
    IF              reduce using rule 29 (statement -> eat .)
    WHILE           reduce using rule 29 (statement -> eat .)
    PRINT           reduce using rule 29 (statement -> eat .)
    LIST            reduce using rule 29 (statement -> eat .)
    MOVE            reduce using rule 29 (statement -> eat .)
    EAT             reduce using rule 29 (statement -> eat .)
    CLEAN           reduce using rule 29 (statement -> eat .)
    PLAY            reduce using rule 29 (statement -> eat .)
    TURNLEFT        reduce using rule 29 (statement -> eat .)
    TURNRIGHT       reduce using rule 29 (statement -> eat .)
    RETURN          reduce using rule 29 (statement -> eat .)
    RCBRACKET       reduce using rule 29 (statement -> eat .)


state 75

    (23) statement -> condition .

    INT             reduce using rule 23 (statement -> condition .)
    FLOAT           reduce using rule 23 (statement -> condition .)
    BOOLEAN         reduce using rule 23 (statement -> condition .)
    ID              reduce using rule 23 (statement -> condition .)
    IF              reduce using rule 23 (statement -> condition .)
    WHILE           reduce using rule 23 (statement -> condition .)
    PRINT           reduce using rule 23 (statement -> condition .)
    LIST            reduce using rule 23 (statement -> condition .)
    MOVE            reduce using rule 23 (statement -> condition .)
    EAT             reduce using rule 23 (statement -> condition .)
    CLEAN           reduce using rule 23 (statement -> condition .)
    PLAY            reduce using rule 23 (statement -> condition .)
    TURNLEFT        reduce using rule 23 (statement -> condition .)
    TURNRIGHT       reduce using rule 23 (statement -> condition .)
    RETURN          reduce using rule 23 (statement -> condition .)
    RCBRACKET       reduce using rule 23 (statement -> condition .)


state 76

    (24) statement -> cycle .

    INT             reduce using rule 24 (statement -> cycle .)
    FLOAT           reduce using rule 24 (statement -> cycle .)
    BOOLEAN         reduce using rule 24 (statement -> cycle .)
    ID              reduce using rule 24 (statement -> cycle .)
    IF              reduce using rule 24 (statement -> cycle .)
    WHILE           reduce using rule 24 (statement -> cycle .)
    PRINT           reduce using rule 24 (statement -> cycle .)
    LIST            reduce using rule 24 (statement -> cycle .)
    MOVE            reduce using rule 24 (statement -> cycle .)
    EAT             reduce using rule 24 (statement -> cycle .)
    CLEAN           reduce using rule 24 (statement -> cycle .)
    PLAY            reduce using rule 24 (statement -> cycle .)
    TURNLEFT        reduce using rule 24 (statement -> cycle .)
    TURNRIGHT       reduce using rule 24 (statement -> cycle .)
    RETURN          reduce using rule 24 (statement -> cycle .)
    RCBRACKET       reduce using rule 24 (statement -> cycle .)


state 77

    (113) play -> PLAY . LPAR ID RPAR

    LPAR            shift and go to state 109


state 78

    (114) turnleft -> TURNLEFT . LPAR RPAR

    LPAR            shift and go to state 110


state 79

    (26) statement -> list .

    INT             reduce using rule 26 (statement -> list .)
    FLOAT           reduce using rule 26 (statement -> list .)
    BOOLEAN         reduce using rule 26 (statement -> list .)
    ID              reduce using rule 26 (statement -> list .)
    IF              reduce using rule 26 (statement -> list .)
    WHILE           reduce using rule 26 (statement -> list .)
    PRINT           reduce using rule 26 (statement -> list .)
    LIST            reduce using rule 26 (statement -> list .)
    MOVE            reduce using rule 26 (statement -> list .)
    EAT             reduce using rule 26 (statement -> list .)
    CLEAN           reduce using rule 26 (statement -> list .)
    PLAY            reduce using rule 26 (statement -> list .)
    TURNLEFT        reduce using rule 26 (statement -> list .)
    TURNRIGHT       reduce using rule 26 (statement -> list .)
    RETURN          reduce using rule 26 (statement -> list .)
    RCBRACKET       reduce using rule 26 (statement -> list .)


state 80

    (33) statement -> remove .

    INT             reduce using rule 33 (statement -> remove .)
    FLOAT           reduce using rule 33 (statement -> remove .)
    BOOLEAN         reduce using rule 33 (statement -> remove .)
    ID              reduce using rule 33 (statement -> remove .)
    IF              reduce using rule 33 (statement -> remove .)
    WHILE           reduce using rule 33 (statement -> remove .)
    PRINT           reduce using rule 33 (statement -> remove .)
    LIST            reduce using rule 33 (statement -> remove .)
    MOVE            reduce using rule 33 (statement -> remove .)
    EAT             reduce using rule 33 (statement -> remove .)
    CLEAN           reduce using rule 33 (statement -> remove .)
    PLAY            reduce using rule 33 (statement -> remove .)
    TURNLEFT        reduce using rule 33 (statement -> remove .)
    TURNRIGHT       reduce using rule 33 (statement -> remove .)
    RETURN          reduce using rule 33 (statement -> remove .)
    RCBRACKET       reduce using rule 33 (statement -> remove .)


state 81

    (22) statement -> asign .

    INT             reduce using rule 22 (statement -> asign .)
    FLOAT           reduce using rule 22 (statement -> asign .)
    BOOLEAN         reduce using rule 22 (statement -> asign .)
    ID              reduce using rule 22 (statement -> asign .)
    IF              reduce using rule 22 (statement -> asign .)
    WHILE           reduce using rule 22 (statement -> asign .)
    PRINT           reduce using rule 22 (statement -> asign .)
    LIST            reduce using rule 22 (statement -> asign .)
    MOVE            reduce using rule 22 (statement -> asign .)
    EAT             reduce using rule 22 (statement -> asign .)
    CLEAN           reduce using rule 22 (statement -> asign .)
    PLAY            reduce using rule 22 (statement -> asign .)
    TURNLEFT        reduce using rule 22 (statement -> asign .)
    TURNRIGHT       reduce using rule 22 (statement -> asign .)
    RETURN          reduce using rule 22 (statement -> asign .)
    RCBRACKET       reduce using rule 22 (statement -> asign .)


state 82

    (30) statement -> clean .

    INT             reduce using rule 30 (statement -> clean .)
    FLOAT           reduce using rule 30 (statement -> clean .)
    BOOLEAN         reduce using rule 30 (statement -> clean .)
    ID              reduce using rule 30 (statement -> clean .)
    IF              reduce using rule 30 (statement -> clean .)
    WHILE           reduce using rule 30 (statement -> clean .)
    PRINT           reduce using rule 30 (statement -> clean .)
    LIST            reduce using rule 30 (statement -> clean .)
    MOVE            reduce using rule 30 (statement -> clean .)
    EAT             reduce using rule 30 (statement -> clean .)
    CLEAN           reduce using rule 30 (statement -> clean .)
    PLAY            reduce using rule 30 (statement -> clean .)
    TURNLEFT        reduce using rule 30 (statement -> clean .)
    TURNRIGHT       reduce using rule 30 (statement -> clean .)
    RETURN          reduce using rule 30 (statement -> clean .)
    RCBRACKET       reduce using rule 30 (statement -> clean .)


state 83

    (62) varcte -> ID .

    MULTIPLY        reduce using rule 62 (varcte -> ID .)
    DIVIDE          reduce using rule 62 (varcte -> ID .)
    PLUS            reduce using rule 62 (varcte -> ID .)
    MINUS           reduce using rule 62 (varcte -> ID .)
    COMPARISON      reduce using rule 62 (varcte -> ID .)
    RPAR            reduce using rule 62 (varcte -> ID .)
    ID              reduce using rule 62 (varcte -> ID .)
    FUNC            reduce using rule 62 (varcte -> ID .)
    MAIN            reduce using rule 62 (varcte -> ID .)
    INT             reduce using rule 62 (varcte -> ID .)
    FLOAT           reduce using rule 62 (varcte -> ID .)
    BOOLEAN         reduce using rule 62 (varcte -> ID .)
    IF              reduce using rule 62 (varcte -> ID .)
    WHILE           reduce using rule 62 (varcte -> ID .)
    PRINT           reduce using rule 62 (varcte -> ID .)
    LIST            reduce using rule 62 (varcte -> ID .)
    MOVE            reduce using rule 62 (varcte -> ID .)
    EAT             reduce using rule 62 (varcte -> ID .)
    CLEAN           reduce using rule 62 (varcte -> ID .)
    PLAY            reduce using rule 62 (varcte -> ID .)
    TURNLEFT        reduce using rule 62 (varcte -> ID .)
    TURNRIGHT       reduce using rule 62 (varcte -> ID .)
    RETURN          reduce using rule 62 (varcte -> ID .)
    RCBRACKET       reduce using rule 62 (varcte -> ID .)
    COMA            reduce using rule 62 (varcte -> ID .)


state 84

    (59) factor -> LPAR expression . RPAR

    RPAR            shift and go to state 111


state 85

    (52) exp -> termino PLUS . op_val exp
    (58) op_val -> .

    LPAR            reduce using rule 58 (op_val -> .)
    MINUS           reduce using rule 58 (op_val -> .)
    ID              reduce using rule 58 (op_val -> .)
    NUMINT          reduce using rule 58 (op_val -> .)
    NUMFLOAT        reduce using rule 58 (op_val -> .)
    BOOLEANTYPE     reduce using rule 58 (op_val -> .)

    op_val                         shift and go to state 112

state 86

    (53) exp -> termino MINUS . op_val exp
    (58) op_val -> .

    LPAR            reduce using rule 58 (op_val -> .)
    MINUS           reduce using rule 58 (op_val -> .)
    ID              reduce using rule 58 (op_val -> .)
    NUMINT          reduce using rule 58 (op_val -> .)
    NUMFLOAT        reduce using rule 58 (op_val -> .)
    BOOLEANTYPE     reduce using rule 58 (op_val -> .)

    op_val                         shift and go to state 113

state 87

    (60) factor -> MINUS varcte .

    MULTIPLY        reduce using rule 60 (factor -> MINUS varcte .)
    DIVIDE          reduce using rule 60 (factor -> MINUS varcte .)
    PLUS            reduce using rule 60 (factor -> MINUS varcte .)
    MINUS           reduce using rule 60 (factor -> MINUS varcte .)
    COMPARISON      reduce using rule 60 (factor -> MINUS varcte .)
    RPAR            reduce using rule 60 (factor -> MINUS varcte .)
    ID              reduce using rule 60 (factor -> MINUS varcte .)
    FUNC            reduce using rule 60 (factor -> MINUS varcte .)
    MAIN            reduce using rule 60 (factor -> MINUS varcte .)
    INT             reduce using rule 60 (factor -> MINUS varcte .)
    FLOAT           reduce using rule 60 (factor -> MINUS varcte .)
    BOOLEAN         reduce using rule 60 (factor -> MINUS varcte .)
    IF              reduce using rule 60 (factor -> MINUS varcte .)
    WHILE           reduce using rule 60 (factor -> MINUS varcte .)
    PRINT           reduce using rule 60 (factor -> MINUS varcte .)
    LIST            reduce using rule 60 (factor -> MINUS varcte .)
    MOVE            reduce using rule 60 (factor -> MINUS varcte .)
    EAT             reduce using rule 60 (factor -> MINUS varcte .)
    CLEAN           reduce using rule 60 (factor -> MINUS varcte .)
    PLAY            reduce using rule 60 (factor -> MINUS varcte .)
    TURNLEFT        reduce using rule 60 (factor -> MINUS varcte .)
    TURNRIGHT       reduce using rule 60 (factor -> MINUS varcte .)
    RETURN          reduce using rule 60 (factor -> MINUS varcte .)
    RCBRACKET       reduce using rule 60 (factor -> MINUS varcte .)
    COMA            reduce using rule 60 (factor -> MINUS varcte .)


state 88

    (61) factor -> varcte termino_val .

    MULTIPLY        reduce using rule 61 (factor -> varcte termino_val .)
    DIVIDE          reduce using rule 61 (factor -> varcte termino_val .)
    PLUS            reduce using rule 61 (factor -> varcte termino_val .)
    MINUS           reduce using rule 61 (factor -> varcte termino_val .)
    COMPARISON      reduce using rule 61 (factor -> varcte termino_val .)
    RPAR            reduce using rule 61 (factor -> varcte termino_val .)
    ID              reduce using rule 61 (factor -> varcte termino_val .)
    FUNC            reduce using rule 61 (factor -> varcte termino_val .)
    MAIN            reduce using rule 61 (factor -> varcte termino_val .)
    INT             reduce using rule 61 (factor -> varcte termino_val .)
    FLOAT           reduce using rule 61 (factor -> varcte termino_val .)
    BOOLEAN         reduce using rule 61 (factor -> varcte termino_val .)
    IF              reduce using rule 61 (factor -> varcte termino_val .)
    WHILE           reduce using rule 61 (factor -> varcte termino_val .)
    PRINT           reduce using rule 61 (factor -> varcte termino_val .)
    LIST            reduce using rule 61 (factor -> varcte termino_val .)
    MOVE            reduce using rule 61 (factor -> varcte termino_val .)
    EAT             reduce using rule 61 (factor -> varcte termino_val .)
    CLEAN           reduce using rule 61 (factor -> varcte termino_val .)
    PLAY            reduce using rule 61 (factor -> varcte termino_val .)
    TURNLEFT        reduce using rule 61 (factor -> varcte termino_val .)
    TURNRIGHT       reduce using rule 61 (factor -> varcte termino_val .)
    RETURN          reduce using rule 61 (factor -> varcte termino_val .)
    RCBRACKET       reduce using rule 61 (factor -> varcte termino_val .)
    COMA            reduce using rule 61 (factor -> varcte termino_val .)


state 89

    (55) termino -> factor MULTIPLY . op_val termino
    (58) op_val -> .

    LPAR            reduce using rule 58 (op_val -> .)
    MINUS           reduce using rule 58 (op_val -> .)
    ID              reduce using rule 58 (op_val -> .)
    NUMINT          reduce using rule 58 (op_val -> .)
    NUMFLOAT        reduce using rule 58 (op_val -> .)
    BOOLEANTYPE     reduce using rule 58 (op_val -> .)

    op_val                         shift and go to state 114

state 90

    (56) termino -> factor DIVIDE . op_val termino
    (58) op_val -> .

    LPAR            reduce using rule 58 (op_val -> .)
    MINUS           reduce using rule 58 (op_val -> .)
    ID              reduce using rule 58 (op_val -> .)
    NUMINT          reduce using rule 58 (op_val -> .)
    NUMFLOAT        reduce using rule 58 (op_val -> .)
    BOOLEANTYPE     reduce using rule 58 (op_val -> .)

    op_val                         shift and go to state 115

state 91

    (101) call -> ID id_call . LPAR par_call RPAR par_call2
    (102) call -> ID id_call . LPAR par_call params RPAR par_call2

    LPAR            shift and go to state 116


state 92

    (50) expression -> exp COMPARISON . op_val expression
    (58) op_val -> .

    LPAR            reduce using rule 58 (op_val -> .)
    MINUS           reduce using rule 58 (op_val -> .)
    ID              reduce using rule 58 (op_val -> .)
    NUMINT          reduce using rule 58 (op_val -> .)
    NUMFLOAT        reduce using rule 58 (op_val -> .)
    BOOLEANTYPE     reduce using rule 58 (op_val -> .)

    op_val                         shift and go to state 117

state 93

    (14) funcx -> vars paramCheck COMA . funcx
    (13) funcx -> . vars paramCheck
    (14) funcx -> . vars paramCheck COMA funcx
    (15) funcx -> . empty
    (41) vars -> . type ID
    (116) empty -> .
    (42) type -> . INT
    (43) type -> . FLOAT
    (44) type -> . BOOLEAN

    RPAR            reduce using rule 116 (empty -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    BOOLEAN         shift and go to state 6

    funcx                          shift and go to state 118
    type                           shift and go to state 33
    empty                          shift and go to state 32
    vars                           shift and go to state 30

state 94

    (10) func -> FUNC idCheck LPAR funcx RPAR block . func_end
    (11) func_end -> .

    FUNC            reduce using rule 11 (func_end -> .)
    MAIN            reduce using rule 11 (func_end -> .)

    func_end                       shift and go to state 119

state 95

    (39) return -> RETURN LPAR . par_call expression RPAR par_call2
    (104) par_call -> .

    LPAR            reduce using rule 104 (par_call -> .)
    MINUS           reduce using rule 104 (par_call -> .)
    ID              reduce using rule 104 (par_call -> .)
    NUMINT          reduce using rule 104 (par_call -> .)
    NUMFLOAT        reduce using rule 104 (par_call -> .)
    BOOLEANTYPE     reduce using rule 104 (par_call -> .)

    par_call                       shift and go to state 120

state 96

    (19) blockx -> vars blockx .

    RCBRACKET       reduce using rule 19 (blockx -> vars blockx .)


state 97

    (73) cycle -> WHILE cycle_1 . LPAR expression RPAR cycle_2 block cycle_3

    LPAR            shift and go to state 121


state 98

    (66) print -> PRINT LPAR . par_call printx RPAR par_call2
    (104) par_call -> .

    ID              reduce using rule 104 (par_call -> .)
    LPAR            reduce using rule 104 (par_call -> .)
    MINUS           reduce using rule 104 (par_call -> .)
    NUMINT          reduce using rule 104 (par_call -> .)
    NUMFLOAT        reduce using rule 104 (par_call -> .)
    BOOLEANTYPE     reduce using rule 104 (par_call -> .)

    par_call                       shift and go to state 122

state 99

    (83) list -> LIST idCheck_List . EQUAL LBRACKET listx RBRACKET

    EQUAL           shift and go to state 123


state 100

    (90) idCheck_List -> ID .

    EQUAL           reduce using rule 90 (idCheck_List -> ID .)


state 101

    (96) add -> ID idCheck_Add . POINT ADD LPAR listx_add RPAR
    (98) remove -> ID idCheck_Add . POINT REMOVE LPAR RPAR
    (99) get -> ID idCheck_Add . POINT FIND LPAR NUMINT RPAR
    (100) sort -> ID idCheck_Add . POINT SORT LPAR RPAR

    POINT           shift and go to state 124


state 102

    (21) blockx -> statement blockx .

    RCBRACKET       reduce using rule 21 (blockx -> statement blockx .)


state 103

    (77) condition -> IF LPAR . expression RPAR cond_1 block else cond_2
    (49) expression -> . exp
    (50) expression -> . exp COMPARISON op_val expression
    (51) exp -> . termino
    (52) exp -> . termino PLUS op_val exp
    (53) exp -> . termino MINUS op_val exp
    (54) termino -> . factor
    (55) termino -> . factor MULTIPLY op_val termino
    (56) termino -> . factor DIVIDE op_val termino
    (59) factor -> . LPAR expression RPAR
    (60) factor -> . MINUS varcte
    (61) factor -> . varcte termino_val
    (62) varcte -> . ID
    (63) varcte -> . NUMINT
    (64) varcte -> . NUMFLOAT
    (65) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 36
    MINUS           shift and go to state 39
    ID              shift and go to state 83
    NUMINT          shift and go to state 44
    NUMFLOAT        shift and go to state 38
    BOOLEANTYPE     shift and go to state 46

    varcte                         shift and go to state 40
    termino                        shift and go to state 37
    exp                            shift and go to state 45
    factor                         shift and go to state 42
    expression                     shift and go to state 125

state 104

    (111) eat -> EAT LPAR . ID RPAR

    ID              shift and go to state 126


state 105

    (110) move -> MOVE LPAR . ID RPAR

    ID              shift and go to state 127


state 106

    (17) block -> LCBRACKET blockx RCBRACKET .

    INT             reduce using rule 17 (block -> LCBRACKET blockx RCBRACKET .)
    FLOAT           reduce using rule 17 (block -> LCBRACKET blockx RCBRACKET .)
    BOOLEAN         reduce using rule 17 (block -> LCBRACKET blockx RCBRACKET .)
    ID              reduce using rule 17 (block -> LCBRACKET blockx RCBRACKET .)
    IF              reduce using rule 17 (block -> LCBRACKET blockx RCBRACKET .)
    WHILE           reduce using rule 17 (block -> LCBRACKET blockx RCBRACKET .)
    PRINT           reduce using rule 17 (block -> LCBRACKET blockx RCBRACKET .)
    LIST            reduce using rule 17 (block -> LCBRACKET blockx RCBRACKET .)
    MOVE            reduce using rule 17 (block -> LCBRACKET blockx RCBRACKET .)
    EAT             reduce using rule 17 (block -> LCBRACKET blockx RCBRACKET .)
    CLEAN           reduce using rule 17 (block -> LCBRACKET blockx RCBRACKET .)
    PLAY            reduce using rule 17 (block -> LCBRACKET blockx RCBRACKET .)
    TURNLEFT        reduce using rule 17 (block -> LCBRACKET blockx RCBRACKET .)
    TURNRIGHT       reduce using rule 17 (block -> LCBRACKET blockx RCBRACKET .)
    RETURN          reduce using rule 17 (block -> LCBRACKET blockx RCBRACKET .)
    RCBRACKET       reduce using rule 17 (block -> LCBRACKET blockx RCBRACKET .)
    FUNC            reduce using rule 17 (block -> LCBRACKET blockx RCBRACKET .)
    MAIN            reduce using rule 17 (block -> LCBRACKET blockx RCBRACKET .)
    ELSE            reduce using rule 17 (block -> LCBRACKET blockx RCBRACKET .)
    $end            reduce using rule 17 (block -> LCBRACKET blockx RCBRACKET .)


state 107

    (115) turnright -> TURNRIGHT LPAR . RPAR

    RPAR            shift and go to state 128


state 108

    (112) clean -> CLEAN LPAR . ID RPAR

    ID              shift and go to state 129


state 109

    (113) play -> PLAY LPAR . ID RPAR

    ID              shift and go to state 130


state 110

    (114) turnleft -> TURNLEFT LPAR . RPAR

    RPAR            shift and go to state 131


state 111

    (59) factor -> LPAR expression RPAR .

    MULTIPLY        reduce using rule 59 (factor -> LPAR expression RPAR .)
    DIVIDE          reduce using rule 59 (factor -> LPAR expression RPAR .)
    PLUS            reduce using rule 59 (factor -> LPAR expression RPAR .)
    MINUS           reduce using rule 59 (factor -> LPAR expression RPAR .)
    COMPARISON      reduce using rule 59 (factor -> LPAR expression RPAR .)
    RPAR            reduce using rule 59 (factor -> LPAR expression RPAR .)
    ID              reduce using rule 59 (factor -> LPAR expression RPAR .)
    FUNC            reduce using rule 59 (factor -> LPAR expression RPAR .)
    MAIN            reduce using rule 59 (factor -> LPAR expression RPAR .)
    INT             reduce using rule 59 (factor -> LPAR expression RPAR .)
    FLOAT           reduce using rule 59 (factor -> LPAR expression RPAR .)
    BOOLEAN         reduce using rule 59 (factor -> LPAR expression RPAR .)
    IF              reduce using rule 59 (factor -> LPAR expression RPAR .)
    WHILE           reduce using rule 59 (factor -> LPAR expression RPAR .)
    PRINT           reduce using rule 59 (factor -> LPAR expression RPAR .)
    LIST            reduce using rule 59 (factor -> LPAR expression RPAR .)
    MOVE            reduce using rule 59 (factor -> LPAR expression RPAR .)
    EAT             reduce using rule 59 (factor -> LPAR expression RPAR .)
    CLEAN           reduce using rule 59 (factor -> LPAR expression RPAR .)
    PLAY            reduce using rule 59 (factor -> LPAR expression RPAR .)
    TURNLEFT        reduce using rule 59 (factor -> LPAR expression RPAR .)
    TURNRIGHT       reduce using rule 59 (factor -> LPAR expression RPAR .)
    RETURN          reduce using rule 59 (factor -> LPAR expression RPAR .)
    RCBRACKET       reduce using rule 59 (factor -> LPAR expression RPAR .)
    COMA            reduce using rule 59 (factor -> LPAR expression RPAR .)


state 112

    (52) exp -> termino PLUS op_val . exp
    (51) exp -> . termino
    (52) exp -> . termino PLUS op_val exp
    (53) exp -> . termino MINUS op_val exp
    (54) termino -> . factor
    (55) termino -> . factor MULTIPLY op_val termino
    (56) termino -> . factor DIVIDE op_val termino
    (59) factor -> . LPAR expression RPAR
    (60) factor -> . MINUS varcte
    (61) factor -> . varcte termino_val
    (62) varcte -> . ID
    (63) varcte -> . NUMINT
    (64) varcte -> . NUMFLOAT
    (65) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 36
    MINUS           shift and go to state 39
    ID              shift and go to state 83
    NUMINT          shift and go to state 44
    NUMFLOAT        shift and go to state 38
    BOOLEANTYPE     shift and go to state 46

    varcte                         shift and go to state 40
    termino                        shift and go to state 37
    exp                            shift and go to state 132
    factor                         shift and go to state 42

state 113

    (53) exp -> termino MINUS op_val . exp
    (51) exp -> . termino
    (52) exp -> . termino PLUS op_val exp
    (53) exp -> . termino MINUS op_val exp
    (54) termino -> . factor
    (55) termino -> . factor MULTIPLY op_val termino
    (56) termino -> . factor DIVIDE op_val termino
    (59) factor -> . LPAR expression RPAR
    (60) factor -> . MINUS varcte
    (61) factor -> . varcte termino_val
    (62) varcte -> . ID
    (63) varcte -> . NUMINT
    (64) varcte -> . NUMFLOAT
    (65) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 36
    MINUS           shift and go to state 39
    ID              shift and go to state 83
    NUMINT          shift and go to state 44
    NUMFLOAT        shift and go to state 38
    BOOLEANTYPE     shift and go to state 46

    varcte                         shift and go to state 40
    termino                        shift and go to state 37
    exp                            shift and go to state 133
    factor                         shift and go to state 42

state 114

    (55) termino -> factor MULTIPLY op_val . termino
    (54) termino -> . factor
    (55) termino -> . factor MULTIPLY op_val termino
    (56) termino -> . factor DIVIDE op_val termino
    (59) factor -> . LPAR expression RPAR
    (60) factor -> . MINUS varcte
    (61) factor -> . varcte termino_val
    (62) varcte -> . ID
    (63) varcte -> . NUMINT
    (64) varcte -> . NUMFLOAT
    (65) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 36
    MINUS           shift and go to state 39
    ID              shift and go to state 83
    NUMINT          shift and go to state 44
    NUMFLOAT        shift and go to state 38
    BOOLEANTYPE     shift and go to state 46

    varcte                         shift and go to state 40
    factor                         shift and go to state 42
    termino                        shift and go to state 134

state 115

    (56) termino -> factor DIVIDE op_val . termino
    (54) termino -> . factor
    (55) termino -> . factor MULTIPLY op_val termino
    (56) termino -> . factor DIVIDE op_val termino
    (59) factor -> . LPAR expression RPAR
    (60) factor -> . MINUS varcte
    (61) factor -> . varcte termino_val
    (62) varcte -> . ID
    (63) varcte -> . NUMINT
    (64) varcte -> . NUMFLOAT
    (65) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 36
    MINUS           shift and go to state 39
    ID              shift and go to state 83
    NUMINT          shift and go to state 44
    NUMFLOAT        shift and go to state 38
    BOOLEANTYPE     shift and go to state 46

    varcte                         shift and go to state 40
    factor                         shift and go to state 42
    termino                        shift and go to state 135

state 116

    (101) call -> ID id_call LPAR . par_call RPAR par_call2
    (102) call -> ID id_call LPAR . par_call params RPAR par_call2
    (104) par_call -> .

    RPAR            reduce using rule 104 (par_call -> .)
    ID              reduce using rule 104 (par_call -> .)
    LPAR            reduce using rule 104 (par_call -> .)
    MINUS           reduce using rule 104 (par_call -> .)
    NUMINT          reduce using rule 104 (par_call -> .)
    NUMFLOAT        reduce using rule 104 (par_call -> .)
    BOOLEANTYPE     reduce using rule 104 (par_call -> .)

    par_call                       shift and go to state 136

state 117

    (50) expression -> exp COMPARISON op_val . expression
    (49) expression -> . exp
    (50) expression -> . exp COMPARISON op_val expression
    (51) exp -> . termino
    (52) exp -> . termino PLUS op_val exp
    (53) exp -> . termino MINUS op_val exp
    (54) termino -> . factor
    (55) termino -> . factor MULTIPLY op_val termino
    (56) termino -> . factor DIVIDE op_val termino
    (59) factor -> . LPAR expression RPAR
    (60) factor -> . MINUS varcte
    (61) factor -> . varcte termino_val
    (62) varcte -> . ID
    (63) varcte -> . NUMINT
    (64) varcte -> . NUMFLOAT
    (65) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 36
    MINUS           shift and go to state 39
    ID              shift and go to state 83
    NUMINT          shift and go to state 44
    NUMFLOAT        shift and go to state 38
    BOOLEANTYPE     shift and go to state 46

    varcte                         shift and go to state 40
    termino                        shift and go to state 37
    exp                            shift and go to state 45
    factor                         shift and go to state 42
    expression                     shift and go to state 137

state 118

    (14) funcx -> vars paramCheck COMA funcx .

    RPAR            reduce using rule 14 (funcx -> vars paramCheck COMA funcx .)


state 119

    (10) func -> FUNC idCheck LPAR funcx RPAR block func_end .

    FUNC            reduce using rule 10 (func -> FUNC idCheck LPAR funcx RPAR block func_end .)
    MAIN            reduce using rule 10 (func -> FUNC idCheck LPAR funcx RPAR block func_end .)


state 120

    (39) return -> RETURN LPAR par_call . expression RPAR par_call2
    (49) expression -> . exp
    (50) expression -> . exp COMPARISON op_val expression
    (51) exp -> . termino
    (52) exp -> . termino PLUS op_val exp
    (53) exp -> . termino MINUS op_val exp
    (54) termino -> . factor
    (55) termino -> . factor MULTIPLY op_val termino
    (56) termino -> . factor DIVIDE op_val termino
    (59) factor -> . LPAR expression RPAR
    (60) factor -> . MINUS varcte
    (61) factor -> . varcte termino_val
    (62) varcte -> . ID
    (63) varcte -> . NUMINT
    (64) varcte -> . NUMFLOAT
    (65) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 36
    MINUS           shift and go to state 39
    ID              shift and go to state 83
    NUMINT          shift and go to state 44
    NUMFLOAT        shift and go to state 38
    BOOLEANTYPE     shift and go to state 46

    varcte                         shift and go to state 40
    termino                        shift and go to state 37
    exp                            shift and go to state 45
    factor                         shift and go to state 42
    expression                     shift and go to state 138

state 121

    (73) cycle -> WHILE cycle_1 LPAR . expression RPAR cycle_2 block cycle_3
    (49) expression -> . exp
    (50) expression -> . exp COMPARISON op_val expression
    (51) exp -> . termino
    (52) exp -> . termino PLUS op_val exp
    (53) exp -> . termino MINUS op_val exp
    (54) termino -> . factor
    (55) termino -> . factor MULTIPLY op_val termino
    (56) termino -> . factor DIVIDE op_val termino
    (59) factor -> . LPAR expression RPAR
    (60) factor -> . MINUS varcte
    (61) factor -> . varcte termino_val
    (62) varcte -> . ID
    (63) varcte -> . NUMINT
    (64) varcte -> . NUMFLOAT
    (65) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 36
    MINUS           shift and go to state 39
    ID              shift and go to state 83
    NUMINT          shift and go to state 44
    NUMFLOAT        shift and go to state 38
    BOOLEANTYPE     shift and go to state 46

    termino                        shift and go to state 37
    exp                            shift and go to state 45
    factor                         shift and go to state 42
    expression                     shift and go to state 139
    varcte                         shift and go to state 40

state 122

    (66) print -> PRINT LPAR par_call . printx RPAR par_call2
    (67) printx -> . expression
    (68) printx -> . ID id_val
    (69) printx -> . call
    (70) printx -> . expression PLUS op_val printx
    (71) printx -> . ID id_val PLUS op_val printx
    (72) printx -> . call PLUS op_val printx
    (49) expression -> . exp
    (50) expression -> . exp COMPARISON op_val expression
    (101) call -> . ID id_call LPAR par_call RPAR par_call2
    (102) call -> . ID id_call LPAR par_call params RPAR par_call2
    (51) exp -> . termino
    (52) exp -> . termino PLUS op_val exp
    (53) exp -> . termino MINUS op_val exp
    (54) termino -> . factor
    (55) termino -> . factor MULTIPLY op_val termino
    (56) termino -> . factor DIVIDE op_val termino
    (59) factor -> . LPAR expression RPAR
    (60) factor -> . MINUS varcte
    (61) factor -> . varcte termino_val
    (62) varcte -> . ID
    (63) varcte -> . NUMINT
    (64) varcte -> . NUMFLOAT
    (65) varcte -> . BOOLEANTYPE

    ID              shift and go to state 142
    LPAR            shift and go to state 36
    MINUS           shift and go to state 39
    NUMINT          shift and go to state 44
    NUMFLOAT        shift and go to state 38
    BOOLEANTYPE     shift and go to state 46

    factor                         shift and go to state 42
    varcte                         shift and go to state 40
    printx                         shift and go to state 140
    call                           shift and go to state 141
    termino                        shift and go to state 37
    exp                            shift and go to state 45
    expression                     shift and go to state 143

state 123

    (83) list -> LIST idCheck_List EQUAL . LBRACKET listx RBRACKET

    LBRACKET        shift and go to state 144


state 124

    (96) add -> ID idCheck_Add POINT . ADD LPAR listx_add RPAR
    (98) remove -> ID idCheck_Add POINT . REMOVE LPAR RPAR
    (99) get -> ID idCheck_Add POINT . FIND LPAR NUMINT RPAR
    (100) sort -> ID idCheck_Add POINT . SORT LPAR RPAR

    ADD             shift and go to state 148
    REMOVE          shift and go to state 146
    FIND            shift and go to state 145
    SORT            shift and go to state 147


state 125

    (77) condition -> IF LPAR expression . RPAR cond_1 block else cond_2

    RPAR            shift and go to state 149


state 126

    (111) eat -> EAT LPAR ID . RPAR

    RPAR            shift and go to state 150


state 127

    (110) move -> MOVE LPAR ID . RPAR

    RPAR            shift and go to state 151


state 128

    (115) turnright -> TURNRIGHT LPAR RPAR .

    INT             reduce using rule 115 (turnright -> TURNRIGHT LPAR RPAR .)
    FLOAT           reduce using rule 115 (turnright -> TURNRIGHT LPAR RPAR .)
    BOOLEAN         reduce using rule 115 (turnright -> TURNRIGHT LPAR RPAR .)
    ID              reduce using rule 115 (turnright -> TURNRIGHT LPAR RPAR .)
    IF              reduce using rule 115 (turnright -> TURNRIGHT LPAR RPAR .)
    WHILE           reduce using rule 115 (turnright -> TURNRIGHT LPAR RPAR .)
    PRINT           reduce using rule 115 (turnright -> TURNRIGHT LPAR RPAR .)
    LIST            reduce using rule 115 (turnright -> TURNRIGHT LPAR RPAR .)
    MOVE            reduce using rule 115 (turnright -> TURNRIGHT LPAR RPAR .)
    EAT             reduce using rule 115 (turnright -> TURNRIGHT LPAR RPAR .)
    CLEAN           reduce using rule 115 (turnright -> TURNRIGHT LPAR RPAR .)
    PLAY            reduce using rule 115 (turnright -> TURNRIGHT LPAR RPAR .)
    TURNLEFT        reduce using rule 115 (turnright -> TURNRIGHT LPAR RPAR .)
    TURNRIGHT       reduce using rule 115 (turnright -> TURNRIGHT LPAR RPAR .)
    RETURN          reduce using rule 115 (turnright -> TURNRIGHT LPAR RPAR .)
    RCBRACKET       reduce using rule 115 (turnright -> TURNRIGHT LPAR RPAR .)


state 129

    (112) clean -> CLEAN LPAR ID . RPAR

    RPAR            shift and go to state 152


state 130

    (113) play -> PLAY LPAR ID . RPAR

    RPAR            shift and go to state 153


state 131

    (114) turnleft -> TURNLEFT LPAR RPAR .

    INT             reduce using rule 114 (turnleft -> TURNLEFT LPAR RPAR .)
    FLOAT           reduce using rule 114 (turnleft -> TURNLEFT LPAR RPAR .)
    BOOLEAN         reduce using rule 114 (turnleft -> TURNLEFT LPAR RPAR .)
    ID              reduce using rule 114 (turnleft -> TURNLEFT LPAR RPAR .)
    IF              reduce using rule 114 (turnleft -> TURNLEFT LPAR RPAR .)
    WHILE           reduce using rule 114 (turnleft -> TURNLEFT LPAR RPAR .)
    PRINT           reduce using rule 114 (turnleft -> TURNLEFT LPAR RPAR .)
    LIST            reduce using rule 114 (turnleft -> TURNLEFT LPAR RPAR .)
    MOVE            reduce using rule 114 (turnleft -> TURNLEFT LPAR RPAR .)
    EAT             reduce using rule 114 (turnleft -> TURNLEFT LPAR RPAR .)
    CLEAN           reduce using rule 114 (turnleft -> TURNLEFT LPAR RPAR .)
    PLAY            reduce using rule 114 (turnleft -> TURNLEFT LPAR RPAR .)
    TURNLEFT        reduce using rule 114 (turnleft -> TURNLEFT LPAR RPAR .)
    TURNRIGHT       reduce using rule 114 (turnleft -> TURNLEFT LPAR RPAR .)
    RETURN          reduce using rule 114 (turnleft -> TURNLEFT LPAR RPAR .)
    RCBRACKET       reduce using rule 114 (turnleft -> TURNLEFT LPAR RPAR .)


state 132

    (52) exp -> termino PLUS op_val exp .

    COMPARISON      reduce using rule 52 (exp -> termino PLUS op_val exp .)
    ID              reduce using rule 52 (exp -> termino PLUS op_val exp .)
    FUNC            reduce using rule 52 (exp -> termino PLUS op_val exp .)
    MAIN            reduce using rule 52 (exp -> termino PLUS op_val exp .)
    INT             reduce using rule 52 (exp -> termino PLUS op_val exp .)
    FLOAT           reduce using rule 52 (exp -> termino PLUS op_val exp .)
    BOOLEAN         reduce using rule 52 (exp -> termino PLUS op_val exp .)
    IF              reduce using rule 52 (exp -> termino PLUS op_val exp .)
    WHILE           reduce using rule 52 (exp -> termino PLUS op_val exp .)
    PRINT           reduce using rule 52 (exp -> termino PLUS op_val exp .)
    LIST            reduce using rule 52 (exp -> termino PLUS op_val exp .)
    MOVE            reduce using rule 52 (exp -> termino PLUS op_val exp .)
    EAT             reduce using rule 52 (exp -> termino PLUS op_val exp .)
    CLEAN           reduce using rule 52 (exp -> termino PLUS op_val exp .)
    PLAY            reduce using rule 52 (exp -> termino PLUS op_val exp .)
    TURNLEFT        reduce using rule 52 (exp -> termino PLUS op_val exp .)
    TURNRIGHT       reduce using rule 52 (exp -> termino PLUS op_val exp .)
    RETURN          reduce using rule 52 (exp -> termino PLUS op_val exp .)
    RCBRACKET       reduce using rule 52 (exp -> termino PLUS op_val exp .)
    RPAR            reduce using rule 52 (exp -> termino PLUS op_val exp .)
    PLUS            reduce using rule 52 (exp -> termino PLUS op_val exp .)
    COMA            reduce using rule 52 (exp -> termino PLUS op_val exp .)


state 133

    (53) exp -> termino MINUS op_val exp .

    COMPARISON      reduce using rule 53 (exp -> termino MINUS op_val exp .)
    ID              reduce using rule 53 (exp -> termino MINUS op_val exp .)
    FUNC            reduce using rule 53 (exp -> termino MINUS op_val exp .)
    MAIN            reduce using rule 53 (exp -> termino MINUS op_val exp .)
    INT             reduce using rule 53 (exp -> termino MINUS op_val exp .)
    FLOAT           reduce using rule 53 (exp -> termino MINUS op_val exp .)
    BOOLEAN         reduce using rule 53 (exp -> termino MINUS op_val exp .)
    IF              reduce using rule 53 (exp -> termino MINUS op_val exp .)
    WHILE           reduce using rule 53 (exp -> termino MINUS op_val exp .)
    PRINT           reduce using rule 53 (exp -> termino MINUS op_val exp .)
    LIST            reduce using rule 53 (exp -> termino MINUS op_val exp .)
    MOVE            reduce using rule 53 (exp -> termino MINUS op_val exp .)
    EAT             reduce using rule 53 (exp -> termino MINUS op_val exp .)
    CLEAN           reduce using rule 53 (exp -> termino MINUS op_val exp .)
    PLAY            reduce using rule 53 (exp -> termino MINUS op_val exp .)
    TURNLEFT        reduce using rule 53 (exp -> termino MINUS op_val exp .)
    TURNRIGHT       reduce using rule 53 (exp -> termino MINUS op_val exp .)
    RETURN          reduce using rule 53 (exp -> termino MINUS op_val exp .)
    RCBRACKET       reduce using rule 53 (exp -> termino MINUS op_val exp .)
    RPAR            reduce using rule 53 (exp -> termino MINUS op_val exp .)
    PLUS            reduce using rule 53 (exp -> termino MINUS op_val exp .)
    COMA            reduce using rule 53 (exp -> termino MINUS op_val exp .)


state 134

    (55) termino -> factor MULTIPLY op_val termino .

    PLUS            reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    MINUS           reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    COMPARISON      reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    RPAR            reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    COMA            reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    ID              reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    FUNC            reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    MAIN            reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    INT             reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    FLOAT           reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    BOOLEAN         reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    IF              reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    WHILE           reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    PRINT           reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    LIST            reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    MOVE            reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    EAT             reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    CLEAN           reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    PLAY            reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    TURNLEFT        reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    TURNRIGHT       reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    RETURN          reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)
    RCBRACKET       reduce using rule 55 (termino -> factor MULTIPLY op_val termino .)


state 135

    (56) termino -> factor DIVIDE op_val termino .

    PLUS            reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    MINUS           reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    COMPARISON      reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    RPAR            reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    COMA            reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    ID              reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    FUNC            reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    MAIN            reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    INT             reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    FLOAT           reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    BOOLEAN         reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    IF              reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    WHILE           reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    PRINT           reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    LIST            reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    MOVE            reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    EAT             reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    CLEAN           reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    PLAY            reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    TURNLEFT        reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    TURNRIGHT       reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    RETURN          reduce using rule 56 (termino -> factor DIVIDE op_val termino .)
    RCBRACKET       reduce using rule 56 (termino -> factor DIVIDE op_val termino .)


state 136

    (101) call -> ID id_call LPAR par_call . RPAR par_call2
    (102) call -> ID id_call LPAR par_call . params RPAR par_call2
    (106) params -> . expression COMA params
    (107) params -> . ID COMA params
    (108) params -> . expression
    (109) params -> . ID
    (49) expression -> . exp
    (50) expression -> . exp COMPARISON op_val expression
    (51) exp -> . termino
    (52) exp -> . termino PLUS op_val exp
    (53) exp -> . termino MINUS op_val exp
    (54) termino -> . factor
    (55) termino -> . factor MULTIPLY op_val termino
    (56) termino -> . factor DIVIDE op_val termino
    (59) factor -> . LPAR expression RPAR
    (60) factor -> . MINUS varcte
    (61) factor -> . varcte termino_val
    (62) varcte -> . ID
    (63) varcte -> . NUMINT
    (64) varcte -> . NUMFLOAT
    (65) varcte -> . BOOLEANTYPE

    RPAR            shift and go to state 154
    ID              shift and go to state 156
    LPAR            shift and go to state 36
    MINUS           shift and go to state 39
    NUMINT          shift and go to state 44
    NUMFLOAT        shift and go to state 38
    BOOLEANTYPE     shift and go to state 46

    varcte                         shift and go to state 40
    params                         shift and go to state 155
    termino                        shift and go to state 37
    exp                            shift and go to state 45
    factor                         shift and go to state 42
    expression                     shift and go to state 157

state 137

    (50) expression -> exp COMPARISON op_val expression .

    RPAR            reduce using rule 50 (expression -> exp COMPARISON op_val expression .)
    COMA            reduce using rule 50 (expression -> exp COMPARISON op_val expression .)
    ID              reduce using rule 50 (expression -> exp COMPARISON op_val expression .)
    FUNC            reduce using rule 50 (expression -> exp COMPARISON op_val expression .)
    MAIN            reduce using rule 50 (expression -> exp COMPARISON op_val expression .)
    INT             reduce using rule 50 (expression -> exp COMPARISON op_val expression .)
    FLOAT           reduce using rule 50 (expression -> exp COMPARISON op_val expression .)
    BOOLEAN         reduce using rule 50 (expression -> exp COMPARISON op_val expression .)
    IF              reduce using rule 50 (expression -> exp COMPARISON op_val expression .)
    WHILE           reduce using rule 50 (expression -> exp COMPARISON op_val expression .)
    PRINT           reduce using rule 50 (expression -> exp COMPARISON op_val expression .)
    LIST            reduce using rule 50 (expression -> exp COMPARISON op_val expression .)
    MOVE            reduce using rule 50 (expression -> exp COMPARISON op_val expression .)
    EAT             reduce using rule 50 (expression -> exp COMPARISON op_val expression .)
    CLEAN           reduce using rule 50 (expression -> exp COMPARISON op_val expression .)
    PLAY            reduce using rule 50 (expression -> exp COMPARISON op_val expression .)
    TURNLEFT        reduce using rule 50 (expression -> exp COMPARISON op_val expression .)
    TURNRIGHT       reduce using rule 50 (expression -> exp COMPARISON op_val expression .)
    RETURN          reduce using rule 50 (expression -> exp COMPARISON op_val expression .)
    RCBRACKET       reduce using rule 50 (expression -> exp COMPARISON op_val expression .)
    PLUS            reduce using rule 50 (expression -> exp COMPARISON op_val expression .)


state 138

    (39) return -> RETURN LPAR par_call expression . RPAR par_call2

    RPAR            shift and go to state 158


state 139

    (73) cycle -> WHILE cycle_1 LPAR expression . RPAR cycle_2 block cycle_3

    RPAR            shift and go to state 159


state 140

    (66) print -> PRINT LPAR par_call printx . RPAR par_call2

    RPAR            shift and go to state 160


state 141

    (69) printx -> call .
    (72) printx -> call . PLUS op_val printx

    RPAR            reduce using rule 69 (printx -> call .)
    PLUS            shift and go to state 161


state 142

    (68) printx -> ID . id_val
    (71) printx -> ID . id_val PLUS op_val printx
    (101) call -> ID . id_call LPAR par_call RPAR par_call2
    (102) call -> ID . id_call LPAR par_call params RPAR par_call2
    (62) varcte -> ID .
    (47) id_val -> .
    (103) id_call -> .

  ! reduce/reduce conflict for PLUS resolved using rule 47 (id_val -> .)
  ! reduce/reduce conflict for RPAR resolved using rule 47 (id_val -> .)
    MULTIPLY        reduce using rule 62 (varcte -> ID .)
    DIVIDE          reduce using rule 62 (varcte -> ID .)
    MINUS           reduce using rule 62 (varcte -> ID .)
    COMPARISON      reduce using rule 62 (varcte -> ID .)
    PLUS            reduce using rule 47 (id_val -> .)
    RPAR            reduce using rule 47 (id_val -> .)
    LPAR            reduce using rule 103 (id_call -> .)

  ! PLUS            [ reduce using rule 62 (varcte -> ID .) ]
  ! RPAR            [ reduce using rule 62 (varcte -> ID .) ]

    id_val                         shift and go to state 162
    id_call                        shift and go to state 91

state 143

    (67) printx -> expression .
    (70) printx -> expression . PLUS op_val printx

    RPAR            reduce using rule 67 (printx -> expression .)
    PLUS            shift and go to state 163


state 144

    (83) list -> LIST idCheck_List EQUAL LBRACKET . listx RBRACKET
    (84) listx -> . ID id_param
    (85) listx -> . ID id_param COMA listx
    (86) listx -> . NUMINT id_param
    (87) listx -> . NUMINT id_param COMA listx
    (88) listx -> . NUMFLOAT id_param
    (89) listx -> . NUMFLOAT id_param COMA listx

    ID              shift and go to state 167
    NUMINT          shift and go to state 165
    NUMFLOAT        shift and go to state 166

    listx                          shift and go to state 164

state 145

    (99) get -> ID idCheck_Add POINT FIND . LPAR NUMINT RPAR

    LPAR            shift and go to state 168


state 146

    (98) remove -> ID idCheck_Add POINT REMOVE . LPAR RPAR

    LPAR            shift and go to state 169


state 147

    (100) sort -> ID idCheck_Add POINT SORT . LPAR RPAR

    LPAR            shift and go to state 170


state 148

    (96) add -> ID idCheck_Add POINT ADD . LPAR listx_add RPAR

    LPAR            shift and go to state 171


state 149

    (77) condition -> IF LPAR expression RPAR . cond_1 block else cond_2
    (80) cond_1 -> .

    LCBRACKET       reduce using rule 80 (cond_1 -> .)

    cond_1                         shift and go to state 172

state 150

    (111) eat -> EAT LPAR ID RPAR .

    INT             reduce using rule 111 (eat -> EAT LPAR ID RPAR .)
    FLOAT           reduce using rule 111 (eat -> EAT LPAR ID RPAR .)
    BOOLEAN         reduce using rule 111 (eat -> EAT LPAR ID RPAR .)
    ID              reduce using rule 111 (eat -> EAT LPAR ID RPAR .)
    IF              reduce using rule 111 (eat -> EAT LPAR ID RPAR .)
    WHILE           reduce using rule 111 (eat -> EAT LPAR ID RPAR .)
    PRINT           reduce using rule 111 (eat -> EAT LPAR ID RPAR .)
    LIST            reduce using rule 111 (eat -> EAT LPAR ID RPAR .)
    MOVE            reduce using rule 111 (eat -> EAT LPAR ID RPAR .)
    EAT             reduce using rule 111 (eat -> EAT LPAR ID RPAR .)
    CLEAN           reduce using rule 111 (eat -> EAT LPAR ID RPAR .)
    PLAY            reduce using rule 111 (eat -> EAT LPAR ID RPAR .)
    TURNLEFT        reduce using rule 111 (eat -> EAT LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 111 (eat -> EAT LPAR ID RPAR .)
    RETURN          reduce using rule 111 (eat -> EAT LPAR ID RPAR .)
    RCBRACKET       reduce using rule 111 (eat -> EAT LPAR ID RPAR .)


state 151

    (110) move -> MOVE LPAR ID RPAR .

    INT             reduce using rule 110 (move -> MOVE LPAR ID RPAR .)
    FLOAT           reduce using rule 110 (move -> MOVE LPAR ID RPAR .)
    BOOLEAN         reduce using rule 110 (move -> MOVE LPAR ID RPAR .)
    ID              reduce using rule 110 (move -> MOVE LPAR ID RPAR .)
    IF              reduce using rule 110 (move -> MOVE LPAR ID RPAR .)
    WHILE           reduce using rule 110 (move -> MOVE LPAR ID RPAR .)
    PRINT           reduce using rule 110 (move -> MOVE LPAR ID RPAR .)
    LIST            reduce using rule 110 (move -> MOVE LPAR ID RPAR .)
    MOVE            reduce using rule 110 (move -> MOVE LPAR ID RPAR .)
    EAT             reduce using rule 110 (move -> MOVE LPAR ID RPAR .)
    CLEAN           reduce using rule 110 (move -> MOVE LPAR ID RPAR .)
    PLAY            reduce using rule 110 (move -> MOVE LPAR ID RPAR .)
    TURNLEFT        reduce using rule 110 (move -> MOVE LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 110 (move -> MOVE LPAR ID RPAR .)
    RETURN          reduce using rule 110 (move -> MOVE LPAR ID RPAR .)
    RCBRACKET       reduce using rule 110 (move -> MOVE LPAR ID RPAR .)


state 152

    (112) clean -> CLEAN LPAR ID RPAR .

    INT             reduce using rule 112 (clean -> CLEAN LPAR ID RPAR .)
    FLOAT           reduce using rule 112 (clean -> CLEAN LPAR ID RPAR .)
    BOOLEAN         reduce using rule 112 (clean -> CLEAN LPAR ID RPAR .)
    ID              reduce using rule 112 (clean -> CLEAN LPAR ID RPAR .)
    IF              reduce using rule 112 (clean -> CLEAN LPAR ID RPAR .)
    WHILE           reduce using rule 112 (clean -> CLEAN LPAR ID RPAR .)
    PRINT           reduce using rule 112 (clean -> CLEAN LPAR ID RPAR .)
    LIST            reduce using rule 112 (clean -> CLEAN LPAR ID RPAR .)
    MOVE            reduce using rule 112 (clean -> CLEAN LPAR ID RPAR .)
    EAT             reduce using rule 112 (clean -> CLEAN LPAR ID RPAR .)
    CLEAN           reduce using rule 112 (clean -> CLEAN LPAR ID RPAR .)
    PLAY            reduce using rule 112 (clean -> CLEAN LPAR ID RPAR .)
    TURNLEFT        reduce using rule 112 (clean -> CLEAN LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 112 (clean -> CLEAN LPAR ID RPAR .)
    RETURN          reduce using rule 112 (clean -> CLEAN LPAR ID RPAR .)
    RCBRACKET       reduce using rule 112 (clean -> CLEAN LPAR ID RPAR .)


state 153

    (113) play -> PLAY LPAR ID RPAR .

    INT             reduce using rule 113 (play -> PLAY LPAR ID RPAR .)
    FLOAT           reduce using rule 113 (play -> PLAY LPAR ID RPAR .)
    BOOLEAN         reduce using rule 113 (play -> PLAY LPAR ID RPAR .)
    ID              reduce using rule 113 (play -> PLAY LPAR ID RPAR .)
    IF              reduce using rule 113 (play -> PLAY LPAR ID RPAR .)
    WHILE           reduce using rule 113 (play -> PLAY LPAR ID RPAR .)
    PRINT           reduce using rule 113 (play -> PLAY LPAR ID RPAR .)
    LIST            reduce using rule 113 (play -> PLAY LPAR ID RPAR .)
    MOVE            reduce using rule 113 (play -> PLAY LPAR ID RPAR .)
    EAT             reduce using rule 113 (play -> PLAY LPAR ID RPAR .)
    CLEAN           reduce using rule 113 (play -> PLAY LPAR ID RPAR .)
    PLAY            reduce using rule 113 (play -> PLAY LPAR ID RPAR .)
    TURNLEFT        reduce using rule 113 (play -> PLAY LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 113 (play -> PLAY LPAR ID RPAR .)
    RETURN          reduce using rule 113 (play -> PLAY LPAR ID RPAR .)
    RCBRACKET       reduce using rule 113 (play -> PLAY LPAR ID RPAR .)


state 154

    (101) call -> ID id_call LPAR par_call RPAR . par_call2
    (105) par_call2 -> .

    ID              reduce using rule 105 (par_call2 -> .)
    FUNC            reduce using rule 105 (par_call2 -> .)
    MAIN            reduce using rule 105 (par_call2 -> .)
    INT             reduce using rule 105 (par_call2 -> .)
    FLOAT           reduce using rule 105 (par_call2 -> .)
    BOOLEAN         reduce using rule 105 (par_call2 -> .)
    IF              reduce using rule 105 (par_call2 -> .)
    WHILE           reduce using rule 105 (par_call2 -> .)
    PRINT           reduce using rule 105 (par_call2 -> .)
    LIST            reduce using rule 105 (par_call2 -> .)
    MOVE            reduce using rule 105 (par_call2 -> .)
    EAT             reduce using rule 105 (par_call2 -> .)
    CLEAN           reduce using rule 105 (par_call2 -> .)
    PLAY            reduce using rule 105 (par_call2 -> .)
    TURNLEFT        reduce using rule 105 (par_call2 -> .)
    TURNRIGHT       reduce using rule 105 (par_call2 -> .)
    RETURN          reduce using rule 105 (par_call2 -> .)
    RCBRACKET       reduce using rule 105 (par_call2 -> .)
    PLUS            reduce using rule 105 (par_call2 -> .)
    RPAR            reduce using rule 105 (par_call2 -> .)

    par_call2                      shift and go to state 173

state 155

    (102) call -> ID id_call LPAR par_call params . RPAR par_call2

    RPAR            shift and go to state 174


state 156

    (107) params -> ID . COMA params
    (109) params -> ID .
    (62) varcte -> ID .

  ! shift/reduce conflict for COMA resolved as shift
  ! reduce/reduce conflict for RPAR resolved using rule 62 (varcte -> ID .)
    COMA            shift and go to state 175
    MULTIPLY        reduce using rule 62 (varcte -> ID .)
    DIVIDE          reduce using rule 62 (varcte -> ID .)
    PLUS            reduce using rule 62 (varcte -> ID .)
    MINUS           reduce using rule 62 (varcte -> ID .)
    COMPARISON      reduce using rule 62 (varcte -> ID .)
    RPAR            reduce using rule 62 (varcte -> ID .)

  ! RPAR            [ reduce using rule 109 (params -> ID .) ]
  ! COMA            [ reduce using rule 62 (varcte -> ID .) ]


state 157

    (106) params -> expression . COMA params
    (108) params -> expression .

    COMA            shift and go to state 176
    RPAR            reduce using rule 108 (params -> expression .)


state 158

    (39) return -> RETURN LPAR par_call expression RPAR . par_call2
    (105) par_call2 -> .

    INT             reduce using rule 105 (par_call2 -> .)
    FLOAT           reduce using rule 105 (par_call2 -> .)
    BOOLEAN         reduce using rule 105 (par_call2 -> .)
    ID              reduce using rule 105 (par_call2 -> .)
    IF              reduce using rule 105 (par_call2 -> .)
    WHILE           reduce using rule 105 (par_call2 -> .)
    PRINT           reduce using rule 105 (par_call2 -> .)
    LIST            reduce using rule 105 (par_call2 -> .)
    MOVE            reduce using rule 105 (par_call2 -> .)
    EAT             reduce using rule 105 (par_call2 -> .)
    CLEAN           reduce using rule 105 (par_call2 -> .)
    PLAY            reduce using rule 105 (par_call2 -> .)
    TURNLEFT        reduce using rule 105 (par_call2 -> .)
    TURNRIGHT       reduce using rule 105 (par_call2 -> .)
    RETURN          reduce using rule 105 (par_call2 -> .)
    RCBRACKET       reduce using rule 105 (par_call2 -> .)

    par_call2                      shift and go to state 177

state 159

    (73) cycle -> WHILE cycle_1 LPAR expression RPAR . cycle_2 block cycle_3
    (75) cycle_2 -> .

    LCBRACKET       reduce using rule 75 (cycle_2 -> .)

    cycle_2                        shift and go to state 178

state 160

    (66) print -> PRINT LPAR par_call printx RPAR . par_call2
    (105) par_call2 -> .

    INT             reduce using rule 105 (par_call2 -> .)
    FLOAT           reduce using rule 105 (par_call2 -> .)
    BOOLEAN         reduce using rule 105 (par_call2 -> .)
    ID              reduce using rule 105 (par_call2 -> .)
    IF              reduce using rule 105 (par_call2 -> .)
    WHILE           reduce using rule 105 (par_call2 -> .)
    PRINT           reduce using rule 105 (par_call2 -> .)
    LIST            reduce using rule 105 (par_call2 -> .)
    MOVE            reduce using rule 105 (par_call2 -> .)
    EAT             reduce using rule 105 (par_call2 -> .)
    CLEAN           reduce using rule 105 (par_call2 -> .)
    PLAY            reduce using rule 105 (par_call2 -> .)
    TURNLEFT        reduce using rule 105 (par_call2 -> .)
    TURNRIGHT       reduce using rule 105 (par_call2 -> .)
    RETURN          reduce using rule 105 (par_call2 -> .)
    RCBRACKET       reduce using rule 105 (par_call2 -> .)

    par_call2                      shift and go to state 179

state 161

    (72) printx -> call PLUS . op_val printx
    (58) op_val -> .

    ID              reduce using rule 58 (op_val -> .)
    LPAR            reduce using rule 58 (op_val -> .)
    MINUS           reduce using rule 58 (op_val -> .)
    NUMINT          reduce using rule 58 (op_val -> .)
    NUMFLOAT        reduce using rule 58 (op_val -> .)
    BOOLEANTYPE     reduce using rule 58 (op_val -> .)

    op_val                         shift and go to state 180

state 162

    (68) printx -> ID id_val .
    (71) printx -> ID id_val . PLUS op_val printx

    RPAR            reduce using rule 68 (printx -> ID id_val .)
    PLUS            shift and go to state 181


state 163

    (70) printx -> expression PLUS . op_val printx
    (58) op_val -> .

    ID              reduce using rule 58 (op_val -> .)
    LPAR            reduce using rule 58 (op_val -> .)
    MINUS           reduce using rule 58 (op_val -> .)
    NUMINT          reduce using rule 58 (op_val -> .)
    NUMFLOAT        reduce using rule 58 (op_val -> .)
    BOOLEANTYPE     reduce using rule 58 (op_val -> .)

    op_val                         shift and go to state 182

state 164

    (83) list -> LIST idCheck_List EQUAL LBRACKET listx . RBRACKET

    RBRACKET        shift and go to state 183


state 165

    (86) listx -> NUMINT . id_param
    (87) listx -> NUMINT . id_param COMA listx
    (91) id_param -> .

    COMA            reduce using rule 91 (id_param -> .)
    RBRACKET        reduce using rule 91 (id_param -> .)

    id_param                       shift and go to state 184

state 166

    (88) listx -> NUMFLOAT . id_param
    (89) listx -> NUMFLOAT . id_param COMA listx
    (91) id_param -> .

    COMA            reduce using rule 91 (id_param -> .)
    RBRACKET        reduce using rule 91 (id_param -> .)

    id_param                       shift and go to state 185

state 167

    (84) listx -> ID . id_param
    (85) listx -> ID . id_param COMA listx
    (91) id_param -> .

    COMA            reduce using rule 91 (id_param -> .)
    RBRACKET        reduce using rule 91 (id_param -> .)

    id_param                       shift and go to state 186

state 168

    (99) get -> ID idCheck_Add POINT FIND LPAR . NUMINT RPAR

    NUMINT          shift and go to state 187


state 169

    (98) remove -> ID idCheck_Add POINT REMOVE LPAR . RPAR

    RPAR            shift and go to state 188


state 170

    (100) sort -> ID idCheck_Add POINT SORT LPAR . RPAR

    RPAR            shift and go to state 189


state 171

    (96) add -> ID idCheck_Add POINT ADD LPAR . listx_add RPAR
    (93) listx_add -> . ID id_param2
    (94) listx_add -> . NUMINT id_param2
    (95) listx_add -> . NUMFLOAT id_param2

    ID              shift and go to state 191
    NUMINT          shift and go to state 190
    NUMFLOAT        shift and go to state 192

    listx_add                      shift and go to state 193

state 172

    (77) condition -> IF LPAR expression RPAR cond_1 . block else cond_2
    (17) block -> . LCBRACKET blockx RCBRACKET

    LCBRACKET       shift and go to state 34

    block                          shift and go to state 194

state 173

    (101) call -> ID id_call LPAR par_call RPAR par_call2 .

    INT             reduce using rule 101 (call -> ID id_call LPAR par_call RPAR par_call2 .)
    FLOAT           reduce using rule 101 (call -> ID id_call LPAR par_call RPAR par_call2 .)
    BOOLEAN         reduce using rule 101 (call -> ID id_call LPAR par_call RPAR par_call2 .)
    ID              reduce using rule 101 (call -> ID id_call LPAR par_call RPAR par_call2 .)
    IF              reduce using rule 101 (call -> ID id_call LPAR par_call RPAR par_call2 .)
    WHILE           reduce using rule 101 (call -> ID id_call LPAR par_call RPAR par_call2 .)
    PRINT           reduce using rule 101 (call -> ID id_call LPAR par_call RPAR par_call2 .)
    LIST            reduce using rule 101 (call -> ID id_call LPAR par_call RPAR par_call2 .)
    MOVE            reduce using rule 101 (call -> ID id_call LPAR par_call RPAR par_call2 .)
    EAT             reduce using rule 101 (call -> ID id_call LPAR par_call RPAR par_call2 .)
    CLEAN           reduce using rule 101 (call -> ID id_call LPAR par_call RPAR par_call2 .)
    PLAY            reduce using rule 101 (call -> ID id_call LPAR par_call RPAR par_call2 .)
    TURNLEFT        reduce using rule 101 (call -> ID id_call LPAR par_call RPAR par_call2 .)
    TURNRIGHT       reduce using rule 101 (call -> ID id_call LPAR par_call RPAR par_call2 .)
    RETURN          reduce using rule 101 (call -> ID id_call LPAR par_call RPAR par_call2 .)
    RCBRACKET       reduce using rule 101 (call -> ID id_call LPAR par_call RPAR par_call2 .)
    PLUS            reduce using rule 101 (call -> ID id_call LPAR par_call RPAR par_call2 .)
    RPAR            reduce using rule 101 (call -> ID id_call LPAR par_call RPAR par_call2 .)
    FUNC            reduce using rule 101 (call -> ID id_call LPAR par_call RPAR par_call2 .)
    MAIN            reduce using rule 101 (call -> ID id_call LPAR par_call RPAR par_call2 .)


state 174

    (102) call -> ID id_call LPAR par_call params RPAR . par_call2
    (105) par_call2 -> .

    ID              reduce using rule 105 (par_call2 -> .)
    FUNC            reduce using rule 105 (par_call2 -> .)
    MAIN            reduce using rule 105 (par_call2 -> .)
    INT             reduce using rule 105 (par_call2 -> .)
    FLOAT           reduce using rule 105 (par_call2 -> .)
    BOOLEAN         reduce using rule 105 (par_call2 -> .)
    IF              reduce using rule 105 (par_call2 -> .)
    WHILE           reduce using rule 105 (par_call2 -> .)
    PRINT           reduce using rule 105 (par_call2 -> .)
    LIST            reduce using rule 105 (par_call2 -> .)
    MOVE            reduce using rule 105 (par_call2 -> .)
    EAT             reduce using rule 105 (par_call2 -> .)
    CLEAN           reduce using rule 105 (par_call2 -> .)
    PLAY            reduce using rule 105 (par_call2 -> .)
    TURNLEFT        reduce using rule 105 (par_call2 -> .)
    TURNRIGHT       reduce using rule 105 (par_call2 -> .)
    RETURN          reduce using rule 105 (par_call2 -> .)
    RCBRACKET       reduce using rule 105 (par_call2 -> .)
    PLUS            reduce using rule 105 (par_call2 -> .)
    RPAR            reduce using rule 105 (par_call2 -> .)

    par_call2                      shift and go to state 195

state 175

    (107) params -> ID COMA . params
    (106) params -> . expression COMA params
    (107) params -> . ID COMA params
    (108) params -> . expression
    (109) params -> . ID
    (49) expression -> . exp
    (50) expression -> . exp COMPARISON op_val expression
    (51) exp -> . termino
    (52) exp -> . termino PLUS op_val exp
    (53) exp -> . termino MINUS op_val exp
    (54) termino -> . factor
    (55) termino -> . factor MULTIPLY op_val termino
    (56) termino -> . factor DIVIDE op_val termino
    (59) factor -> . LPAR expression RPAR
    (60) factor -> . MINUS varcte
    (61) factor -> . varcte termino_val
    (62) varcte -> . ID
    (63) varcte -> . NUMINT
    (64) varcte -> . NUMFLOAT
    (65) varcte -> . BOOLEANTYPE

    ID              shift and go to state 156
    LPAR            shift and go to state 36
    MINUS           shift and go to state 39
    NUMINT          shift and go to state 44
    NUMFLOAT        shift and go to state 38
    BOOLEANTYPE     shift and go to state 46

    varcte                         shift and go to state 40
    params                         shift and go to state 196
    termino                        shift and go to state 37
    exp                            shift and go to state 45
    factor                         shift and go to state 42
    expression                     shift and go to state 157

state 176

    (106) params -> expression COMA . params
    (106) params -> . expression COMA params
    (107) params -> . ID COMA params
    (108) params -> . expression
    (109) params -> . ID
    (49) expression -> . exp
    (50) expression -> . exp COMPARISON op_val expression
    (51) exp -> . termino
    (52) exp -> . termino PLUS op_val exp
    (53) exp -> . termino MINUS op_val exp
    (54) termino -> . factor
    (55) termino -> . factor MULTIPLY op_val termino
    (56) termino -> . factor DIVIDE op_val termino
    (59) factor -> . LPAR expression RPAR
    (60) factor -> . MINUS varcte
    (61) factor -> . varcte termino_val
    (62) varcte -> . ID
    (63) varcte -> . NUMINT
    (64) varcte -> . NUMFLOAT
    (65) varcte -> . BOOLEANTYPE

    ID              shift and go to state 156
    LPAR            shift and go to state 36
    MINUS           shift and go to state 39
    NUMINT          shift and go to state 44
    NUMFLOAT        shift and go to state 38
    BOOLEANTYPE     shift and go to state 46

    varcte                         shift and go to state 40
    params                         shift and go to state 197
    termino                        shift and go to state 37
    exp                            shift and go to state 45
    factor                         shift and go to state 42
    expression                     shift and go to state 157

state 177

    (39) return -> RETURN LPAR par_call expression RPAR par_call2 .

    INT             reduce using rule 39 (return -> RETURN LPAR par_call expression RPAR par_call2 .)
    FLOAT           reduce using rule 39 (return -> RETURN LPAR par_call expression RPAR par_call2 .)
    BOOLEAN         reduce using rule 39 (return -> RETURN LPAR par_call expression RPAR par_call2 .)
    ID              reduce using rule 39 (return -> RETURN LPAR par_call expression RPAR par_call2 .)
    IF              reduce using rule 39 (return -> RETURN LPAR par_call expression RPAR par_call2 .)
    WHILE           reduce using rule 39 (return -> RETURN LPAR par_call expression RPAR par_call2 .)
    PRINT           reduce using rule 39 (return -> RETURN LPAR par_call expression RPAR par_call2 .)
    LIST            reduce using rule 39 (return -> RETURN LPAR par_call expression RPAR par_call2 .)
    MOVE            reduce using rule 39 (return -> RETURN LPAR par_call expression RPAR par_call2 .)
    EAT             reduce using rule 39 (return -> RETURN LPAR par_call expression RPAR par_call2 .)
    CLEAN           reduce using rule 39 (return -> RETURN LPAR par_call expression RPAR par_call2 .)
    PLAY            reduce using rule 39 (return -> RETURN LPAR par_call expression RPAR par_call2 .)
    TURNLEFT        reduce using rule 39 (return -> RETURN LPAR par_call expression RPAR par_call2 .)
    TURNRIGHT       reduce using rule 39 (return -> RETURN LPAR par_call expression RPAR par_call2 .)
    RETURN          reduce using rule 39 (return -> RETURN LPAR par_call expression RPAR par_call2 .)
    RCBRACKET       reduce using rule 39 (return -> RETURN LPAR par_call expression RPAR par_call2 .)


state 178

    (73) cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 . block cycle_3
    (17) block -> . LCBRACKET blockx RCBRACKET

    LCBRACKET       shift and go to state 34

    block                          shift and go to state 198

state 179

    (66) print -> PRINT LPAR par_call printx RPAR par_call2 .

    INT             reduce using rule 66 (print -> PRINT LPAR par_call printx RPAR par_call2 .)
    FLOAT           reduce using rule 66 (print -> PRINT LPAR par_call printx RPAR par_call2 .)
    BOOLEAN         reduce using rule 66 (print -> PRINT LPAR par_call printx RPAR par_call2 .)
    ID              reduce using rule 66 (print -> PRINT LPAR par_call printx RPAR par_call2 .)
    IF              reduce using rule 66 (print -> PRINT LPAR par_call printx RPAR par_call2 .)
    WHILE           reduce using rule 66 (print -> PRINT LPAR par_call printx RPAR par_call2 .)
    PRINT           reduce using rule 66 (print -> PRINT LPAR par_call printx RPAR par_call2 .)
    LIST            reduce using rule 66 (print -> PRINT LPAR par_call printx RPAR par_call2 .)
    MOVE            reduce using rule 66 (print -> PRINT LPAR par_call printx RPAR par_call2 .)
    EAT             reduce using rule 66 (print -> PRINT LPAR par_call printx RPAR par_call2 .)
    CLEAN           reduce using rule 66 (print -> PRINT LPAR par_call printx RPAR par_call2 .)
    PLAY            reduce using rule 66 (print -> PRINT LPAR par_call printx RPAR par_call2 .)
    TURNLEFT        reduce using rule 66 (print -> PRINT LPAR par_call printx RPAR par_call2 .)
    TURNRIGHT       reduce using rule 66 (print -> PRINT LPAR par_call printx RPAR par_call2 .)
    RETURN          reduce using rule 66 (print -> PRINT LPAR par_call printx RPAR par_call2 .)
    RCBRACKET       reduce using rule 66 (print -> PRINT LPAR par_call printx RPAR par_call2 .)


state 180

    (72) printx -> call PLUS op_val . printx
    (67) printx -> . expression
    (68) printx -> . ID id_val
    (69) printx -> . call
    (70) printx -> . expression PLUS op_val printx
    (71) printx -> . ID id_val PLUS op_val printx
    (72) printx -> . call PLUS op_val printx
    (49) expression -> . exp
    (50) expression -> . exp COMPARISON op_val expression
    (101) call -> . ID id_call LPAR par_call RPAR par_call2
    (102) call -> . ID id_call LPAR par_call params RPAR par_call2
    (51) exp -> . termino
    (52) exp -> . termino PLUS op_val exp
    (53) exp -> . termino MINUS op_val exp
    (54) termino -> . factor
    (55) termino -> . factor MULTIPLY op_val termino
    (56) termino -> . factor DIVIDE op_val termino
    (59) factor -> . LPAR expression RPAR
    (60) factor -> . MINUS varcte
    (61) factor -> . varcte termino_val
    (62) varcte -> . ID
    (63) varcte -> . NUMINT
    (64) varcte -> . NUMFLOAT
    (65) varcte -> . BOOLEANTYPE

    ID              shift and go to state 142
    LPAR            shift and go to state 36
    MINUS           shift and go to state 39
    NUMINT          shift and go to state 44
    NUMFLOAT        shift and go to state 38
    BOOLEANTYPE     shift and go to state 46

    factor                         shift and go to state 42
    varcte                         shift and go to state 40
    printx                         shift and go to state 199
    call                           shift and go to state 141
    termino                        shift and go to state 37
    exp                            shift and go to state 45
    expression                     shift and go to state 143

state 181

    (71) printx -> ID id_val PLUS . op_val printx
    (58) op_val -> .

    ID              reduce using rule 58 (op_val -> .)
    LPAR            reduce using rule 58 (op_val -> .)
    MINUS           reduce using rule 58 (op_val -> .)
    NUMINT          reduce using rule 58 (op_val -> .)
    NUMFLOAT        reduce using rule 58 (op_val -> .)
    BOOLEANTYPE     reduce using rule 58 (op_val -> .)

    op_val                         shift and go to state 200

state 182

    (70) printx -> expression PLUS op_val . printx
    (67) printx -> . expression
    (68) printx -> . ID id_val
    (69) printx -> . call
    (70) printx -> . expression PLUS op_val printx
    (71) printx -> . ID id_val PLUS op_val printx
    (72) printx -> . call PLUS op_val printx
    (49) expression -> . exp
    (50) expression -> . exp COMPARISON op_val expression
    (101) call -> . ID id_call LPAR par_call RPAR par_call2
    (102) call -> . ID id_call LPAR par_call params RPAR par_call2
    (51) exp -> . termino
    (52) exp -> . termino PLUS op_val exp
    (53) exp -> . termino MINUS op_val exp
    (54) termino -> . factor
    (55) termino -> . factor MULTIPLY op_val termino
    (56) termino -> . factor DIVIDE op_val termino
    (59) factor -> . LPAR expression RPAR
    (60) factor -> . MINUS varcte
    (61) factor -> . varcte termino_val
    (62) varcte -> . ID
    (63) varcte -> . NUMINT
    (64) varcte -> . NUMFLOAT
    (65) varcte -> . BOOLEANTYPE

    ID              shift and go to state 142
    LPAR            shift and go to state 36
    MINUS           shift and go to state 39
    NUMINT          shift and go to state 44
    NUMFLOAT        shift and go to state 38
    BOOLEANTYPE     shift and go to state 46

    factor                         shift and go to state 42
    varcte                         shift and go to state 40
    printx                         shift and go to state 201
    call                           shift and go to state 141
    termino                        shift and go to state 37
    exp                            shift and go to state 45
    expression                     shift and go to state 143

state 183

    (83) list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .

    INT             reduce using rule 83 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    FLOAT           reduce using rule 83 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    BOOLEAN         reduce using rule 83 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    ID              reduce using rule 83 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    IF              reduce using rule 83 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    WHILE           reduce using rule 83 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    PRINT           reduce using rule 83 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    LIST            reduce using rule 83 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    MOVE            reduce using rule 83 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    EAT             reduce using rule 83 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    CLEAN           reduce using rule 83 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    PLAY            reduce using rule 83 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    TURNLEFT        reduce using rule 83 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    TURNRIGHT       reduce using rule 83 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    RETURN          reduce using rule 83 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    RCBRACKET       reduce using rule 83 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)


state 184

    (86) listx -> NUMINT id_param .
    (87) listx -> NUMINT id_param . COMA listx

    RBRACKET        reduce using rule 86 (listx -> NUMINT id_param .)
    COMA            shift and go to state 202


state 185

    (88) listx -> NUMFLOAT id_param .
    (89) listx -> NUMFLOAT id_param . COMA listx

    RBRACKET        reduce using rule 88 (listx -> NUMFLOAT id_param .)
    COMA            shift and go to state 203


state 186

    (84) listx -> ID id_param .
    (85) listx -> ID id_param . COMA listx

    RBRACKET        reduce using rule 84 (listx -> ID id_param .)
    COMA            shift and go to state 204


state 187

    (99) get -> ID idCheck_Add POINT FIND LPAR NUMINT . RPAR

    RPAR            shift and go to state 205


state 188

    (98) remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .

    INT             reduce using rule 98 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    FLOAT           reduce using rule 98 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    BOOLEAN         reduce using rule 98 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    ID              reduce using rule 98 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    IF              reduce using rule 98 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    WHILE           reduce using rule 98 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    PRINT           reduce using rule 98 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    LIST            reduce using rule 98 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    MOVE            reduce using rule 98 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    EAT             reduce using rule 98 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    CLEAN           reduce using rule 98 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    PLAY            reduce using rule 98 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    TURNLEFT        reduce using rule 98 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    TURNRIGHT       reduce using rule 98 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    RETURN          reduce using rule 98 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    RCBRACKET       reduce using rule 98 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)


state 189

    (100) sort -> ID idCheck_Add POINT SORT LPAR RPAR .

    INT             reduce using rule 100 (sort -> ID idCheck_Add POINT SORT LPAR RPAR .)
    FLOAT           reduce using rule 100 (sort -> ID idCheck_Add POINT SORT LPAR RPAR .)
    BOOLEAN         reduce using rule 100 (sort -> ID idCheck_Add POINT SORT LPAR RPAR .)
    ID              reduce using rule 100 (sort -> ID idCheck_Add POINT SORT LPAR RPAR .)
    IF              reduce using rule 100 (sort -> ID idCheck_Add POINT SORT LPAR RPAR .)
    WHILE           reduce using rule 100 (sort -> ID idCheck_Add POINT SORT LPAR RPAR .)
    PRINT           reduce using rule 100 (sort -> ID idCheck_Add POINT SORT LPAR RPAR .)
    LIST            reduce using rule 100 (sort -> ID idCheck_Add POINT SORT LPAR RPAR .)
    MOVE            reduce using rule 100 (sort -> ID idCheck_Add POINT SORT LPAR RPAR .)
    EAT             reduce using rule 100 (sort -> ID idCheck_Add POINT SORT LPAR RPAR .)
    CLEAN           reduce using rule 100 (sort -> ID idCheck_Add POINT SORT LPAR RPAR .)
    PLAY            reduce using rule 100 (sort -> ID idCheck_Add POINT SORT LPAR RPAR .)
    TURNLEFT        reduce using rule 100 (sort -> ID idCheck_Add POINT SORT LPAR RPAR .)
    TURNRIGHT       reduce using rule 100 (sort -> ID idCheck_Add POINT SORT LPAR RPAR .)
    RETURN          reduce using rule 100 (sort -> ID idCheck_Add POINT SORT LPAR RPAR .)
    RCBRACKET       reduce using rule 100 (sort -> ID idCheck_Add POINT SORT LPAR RPAR .)


state 190

    (94) listx_add -> NUMINT . id_param2
    (92) id_param2 -> .

    RPAR            reduce using rule 92 (id_param2 -> .)

    id_param2                      shift and go to state 206

state 191

    (93) listx_add -> ID . id_param2
    (92) id_param2 -> .

    RPAR            reduce using rule 92 (id_param2 -> .)

    id_param2                      shift and go to state 207

state 192

    (95) listx_add -> NUMFLOAT . id_param2
    (92) id_param2 -> .

    RPAR            reduce using rule 92 (id_param2 -> .)

    id_param2                      shift and go to state 208

state 193

    (96) add -> ID idCheck_Add POINT ADD LPAR listx_add . RPAR

    RPAR            shift and go to state 209


state 194

    (77) condition -> IF LPAR expression RPAR cond_1 block . else cond_2
    (78) else -> . ELSE cond_else block
    (79) else -> . empty
    (116) empty -> .

    ELSE            shift and go to state 210
    INT             reduce using rule 116 (empty -> .)
    FLOAT           reduce using rule 116 (empty -> .)
    BOOLEAN         reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    LIST            reduce using rule 116 (empty -> .)
    MOVE            reduce using rule 116 (empty -> .)
    EAT             reduce using rule 116 (empty -> .)
    CLEAN           reduce using rule 116 (empty -> .)
    PLAY            reduce using rule 116 (empty -> .)
    TURNLEFT        reduce using rule 116 (empty -> .)
    TURNRIGHT       reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    RCBRACKET       reduce using rule 116 (empty -> .)

    else                           shift and go to state 212
    empty                          shift and go to state 211

state 195

    (102) call -> ID id_call LPAR par_call params RPAR par_call2 .

    INT             reduce using rule 102 (call -> ID id_call LPAR par_call params RPAR par_call2 .)
    FLOAT           reduce using rule 102 (call -> ID id_call LPAR par_call params RPAR par_call2 .)
    BOOLEAN         reduce using rule 102 (call -> ID id_call LPAR par_call params RPAR par_call2 .)
    ID              reduce using rule 102 (call -> ID id_call LPAR par_call params RPAR par_call2 .)
    IF              reduce using rule 102 (call -> ID id_call LPAR par_call params RPAR par_call2 .)
    WHILE           reduce using rule 102 (call -> ID id_call LPAR par_call params RPAR par_call2 .)
    PRINT           reduce using rule 102 (call -> ID id_call LPAR par_call params RPAR par_call2 .)
    LIST            reduce using rule 102 (call -> ID id_call LPAR par_call params RPAR par_call2 .)
    MOVE            reduce using rule 102 (call -> ID id_call LPAR par_call params RPAR par_call2 .)
    EAT             reduce using rule 102 (call -> ID id_call LPAR par_call params RPAR par_call2 .)
    CLEAN           reduce using rule 102 (call -> ID id_call LPAR par_call params RPAR par_call2 .)
    PLAY            reduce using rule 102 (call -> ID id_call LPAR par_call params RPAR par_call2 .)
    TURNLEFT        reduce using rule 102 (call -> ID id_call LPAR par_call params RPAR par_call2 .)
    TURNRIGHT       reduce using rule 102 (call -> ID id_call LPAR par_call params RPAR par_call2 .)
    RETURN          reduce using rule 102 (call -> ID id_call LPAR par_call params RPAR par_call2 .)
    RCBRACKET       reduce using rule 102 (call -> ID id_call LPAR par_call params RPAR par_call2 .)
    PLUS            reduce using rule 102 (call -> ID id_call LPAR par_call params RPAR par_call2 .)
    RPAR            reduce using rule 102 (call -> ID id_call LPAR par_call params RPAR par_call2 .)
    FUNC            reduce using rule 102 (call -> ID id_call LPAR par_call params RPAR par_call2 .)
    MAIN            reduce using rule 102 (call -> ID id_call LPAR par_call params RPAR par_call2 .)


state 196

    (107) params -> ID COMA params .

    RPAR            reduce using rule 107 (params -> ID COMA params .)


state 197

    (106) params -> expression COMA params .

    RPAR            reduce using rule 106 (params -> expression COMA params .)


state 198

    (73) cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block . cycle_3
    (76) cycle_3 -> .

    INT             reduce using rule 76 (cycle_3 -> .)
    FLOAT           reduce using rule 76 (cycle_3 -> .)
    BOOLEAN         reduce using rule 76 (cycle_3 -> .)
    ID              reduce using rule 76 (cycle_3 -> .)
    IF              reduce using rule 76 (cycle_3 -> .)
    WHILE           reduce using rule 76 (cycle_3 -> .)
    PRINT           reduce using rule 76 (cycle_3 -> .)
    LIST            reduce using rule 76 (cycle_3 -> .)
    MOVE            reduce using rule 76 (cycle_3 -> .)
    EAT             reduce using rule 76 (cycle_3 -> .)
    CLEAN           reduce using rule 76 (cycle_3 -> .)
    PLAY            reduce using rule 76 (cycle_3 -> .)
    TURNLEFT        reduce using rule 76 (cycle_3 -> .)
    TURNRIGHT       reduce using rule 76 (cycle_3 -> .)
    RETURN          reduce using rule 76 (cycle_3 -> .)
    RCBRACKET       reduce using rule 76 (cycle_3 -> .)

    cycle_3                        shift and go to state 213

state 199

    (72) printx -> call PLUS op_val printx .

    RPAR            reduce using rule 72 (printx -> call PLUS op_val printx .)


state 200

    (71) printx -> ID id_val PLUS op_val . printx
    (67) printx -> . expression
    (68) printx -> . ID id_val
    (69) printx -> . call
    (70) printx -> . expression PLUS op_val printx
    (71) printx -> . ID id_val PLUS op_val printx
    (72) printx -> . call PLUS op_val printx
    (49) expression -> . exp
    (50) expression -> . exp COMPARISON op_val expression
    (101) call -> . ID id_call LPAR par_call RPAR par_call2
    (102) call -> . ID id_call LPAR par_call params RPAR par_call2
    (51) exp -> . termino
    (52) exp -> . termino PLUS op_val exp
    (53) exp -> . termino MINUS op_val exp
    (54) termino -> . factor
    (55) termino -> . factor MULTIPLY op_val termino
    (56) termino -> . factor DIVIDE op_val termino
    (59) factor -> . LPAR expression RPAR
    (60) factor -> . MINUS varcte
    (61) factor -> . varcte termino_val
    (62) varcte -> . ID
    (63) varcte -> . NUMINT
    (64) varcte -> . NUMFLOAT
    (65) varcte -> . BOOLEANTYPE

    ID              shift and go to state 142
    LPAR            shift and go to state 36
    MINUS           shift and go to state 39
    NUMINT          shift and go to state 44
    NUMFLOAT        shift and go to state 38
    BOOLEANTYPE     shift and go to state 46

    factor                         shift and go to state 42
    varcte                         shift and go to state 40
    printx                         shift and go to state 214
    call                           shift and go to state 141
    termino                        shift and go to state 37
    exp                            shift and go to state 45
    expression                     shift and go to state 143

state 201

    (70) printx -> expression PLUS op_val printx .

    RPAR            reduce using rule 70 (printx -> expression PLUS op_val printx .)


state 202

    (87) listx -> NUMINT id_param COMA . listx
    (84) listx -> . ID id_param
    (85) listx -> . ID id_param COMA listx
    (86) listx -> . NUMINT id_param
    (87) listx -> . NUMINT id_param COMA listx
    (88) listx -> . NUMFLOAT id_param
    (89) listx -> . NUMFLOAT id_param COMA listx

    ID              shift and go to state 167
    NUMINT          shift and go to state 165
    NUMFLOAT        shift and go to state 166

    listx                          shift and go to state 215

state 203

    (89) listx -> NUMFLOAT id_param COMA . listx
    (84) listx -> . ID id_param
    (85) listx -> . ID id_param COMA listx
    (86) listx -> . NUMINT id_param
    (87) listx -> . NUMINT id_param COMA listx
    (88) listx -> . NUMFLOAT id_param
    (89) listx -> . NUMFLOAT id_param COMA listx

    ID              shift and go to state 167
    NUMINT          shift and go to state 165
    NUMFLOAT        shift and go to state 166

    listx                          shift and go to state 216

state 204

    (85) listx -> ID id_param COMA . listx
    (84) listx -> . ID id_param
    (85) listx -> . ID id_param COMA listx
    (86) listx -> . NUMINT id_param
    (87) listx -> . NUMINT id_param COMA listx
    (88) listx -> . NUMFLOAT id_param
    (89) listx -> . NUMFLOAT id_param COMA listx

    ID              shift and go to state 167
    NUMINT          shift and go to state 165
    NUMFLOAT        shift and go to state 166

    listx                          shift and go to state 217

state 205

    (99) get -> ID idCheck_Add POINT FIND LPAR NUMINT RPAR .

    INT             reduce using rule 99 (get -> ID idCheck_Add POINT FIND LPAR NUMINT RPAR .)
    FLOAT           reduce using rule 99 (get -> ID idCheck_Add POINT FIND LPAR NUMINT RPAR .)
    BOOLEAN         reduce using rule 99 (get -> ID idCheck_Add POINT FIND LPAR NUMINT RPAR .)
    ID              reduce using rule 99 (get -> ID idCheck_Add POINT FIND LPAR NUMINT RPAR .)
    IF              reduce using rule 99 (get -> ID idCheck_Add POINT FIND LPAR NUMINT RPAR .)
    WHILE           reduce using rule 99 (get -> ID idCheck_Add POINT FIND LPAR NUMINT RPAR .)
    PRINT           reduce using rule 99 (get -> ID idCheck_Add POINT FIND LPAR NUMINT RPAR .)
    LIST            reduce using rule 99 (get -> ID idCheck_Add POINT FIND LPAR NUMINT RPAR .)
    MOVE            reduce using rule 99 (get -> ID idCheck_Add POINT FIND LPAR NUMINT RPAR .)
    EAT             reduce using rule 99 (get -> ID idCheck_Add POINT FIND LPAR NUMINT RPAR .)
    CLEAN           reduce using rule 99 (get -> ID idCheck_Add POINT FIND LPAR NUMINT RPAR .)
    PLAY            reduce using rule 99 (get -> ID idCheck_Add POINT FIND LPAR NUMINT RPAR .)
    TURNLEFT        reduce using rule 99 (get -> ID idCheck_Add POINT FIND LPAR NUMINT RPAR .)
    TURNRIGHT       reduce using rule 99 (get -> ID idCheck_Add POINT FIND LPAR NUMINT RPAR .)
    RETURN          reduce using rule 99 (get -> ID idCheck_Add POINT FIND LPAR NUMINT RPAR .)
    RCBRACKET       reduce using rule 99 (get -> ID idCheck_Add POINT FIND LPAR NUMINT RPAR .)


state 206

    (94) listx_add -> NUMINT id_param2 .

    RPAR            reduce using rule 94 (listx_add -> NUMINT id_param2 .)


state 207

    (93) listx_add -> ID id_param2 .

    RPAR            reduce using rule 93 (listx_add -> ID id_param2 .)


state 208

    (95) listx_add -> NUMFLOAT id_param2 .

    RPAR            reduce using rule 95 (listx_add -> NUMFLOAT id_param2 .)


state 209

    (96) add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .

    INT             reduce using rule 96 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    FLOAT           reduce using rule 96 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    BOOLEAN         reduce using rule 96 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    ID              reduce using rule 96 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    IF              reduce using rule 96 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    WHILE           reduce using rule 96 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    PRINT           reduce using rule 96 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    LIST            reduce using rule 96 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    MOVE            reduce using rule 96 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    EAT             reduce using rule 96 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    CLEAN           reduce using rule 96 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    PLAY            reduce using rule 96 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    TURNLEFT        reduce using rule 96 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    TURNRIGHT       reduce using rule 96 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    RETURN          reduce using rule 96 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    RCBRACKET       reduce using rule 96 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)


state 210

    (78) else -> ELSE . cond_else block
    (82) cond_else -> .

    LCBRACKET       reduce using rule 82 (cond_else -> .)

    cond_else                      shift and go to state 218

state 211

    (79) else -> empty .

    INT             reduce using rule 79 (else -> empty .)
    FLOAT           reduce using rule 79 (else -> empty .)
    BOOLEAN         reduce using rule 79 (else -> empty .)
    ID              reduce using rule 79 (else -> empty .)
    IF              reduce using rule 79 (else -> empty .)
    WHILE           reduce using rule 79 (else -> empty .)
    PRINT           reduce using rule 79 (else -> empty .)
    LIST            reduce using rule 79 (else -> empty .)
    MOVE            reduce using rule 79 (else -> empty .)
    EAT             reduce using rule 79 (else -> empty .)
    CLEAN           reduce using rule 79 (else -> empty .)
    PLAY            reduce using rule 79 (else -> empty .)
    TURNLEFT        reduce using rule 79 (else -> empty .)
    TURNRIGHT       reduce using rule 79 (else -> empty .)
    RETURN          reduce using rule 79 (else -> empty .)
    RCBRACKET       reduce using rule 79 (else -> empty .)


state 212

    (77) condition -> IF LPAR expression RPAR cond_1 block else . cond_2
    (81) cond_2 -> .

    INT             reduce using rule 81 (cond_2 -> .)
    FLOAT           reduce using rule 81 (cond_2 -> .)
    BOOLEAN         reduce using rule 81 (cond_2 -> .)
    ID              reduce using rule 81 (cond_2 -> .)
    IF              reduce using rule 81 (cond_2 -> .)
    WHILE           reduce using rule 81 (cond_2 -> .)
    PRINT           reduce using rule 81 (cond_2 -> .)
    LIST            reduce using rule 81 (cond_2 -> .)
    MOVE            reduce using rule 81 (cond_2 -> .)
    EAT             reduce using rule 81 (cond_2 -> .)
    CLEAN           reduce using rule 81 (cond_2 -> .)
    PLAY            reduce using rule 81 (cond_2 -> .)
    TURNLEFT        reduce using rule 81 (cond_2 -> .)
    TURNRIGHT       reduce using rule 81 (cond_2 -> .)
    RETURN          reduce using rule 81 (cond_2 -> .)
    RCBRACKET       reduce using rule 81 (cond_2 -> .)

    cond_2                         shift and go to state 219

state 213

    (73) cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .

    INT             reduce using rule 73 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    FLOAT           reduce using rule 73 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    BOOLEAN         reduce using rule 73 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    ID              reduce using rule 73 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    IF              reduce using rule 73 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    WHILE           reduce using rule 73 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    PRINT           reduce using rule 73 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    LIST            reduce using rule 73 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    MOVE            reduce using rule 73 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    EAT             reduce using rule 73 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    CLEAN           reduce using rule 73 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    PLAY            reduce using rule 73 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    TURNLEFT        reduce using rule 73 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    TURNRIGHT       reduce using rule 73 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    RETURN          reduce using rule 73 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    RCBRACKET       reduce using rule 73 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)


state 214

    (71) printx -> ID id_val PLUS op_val printx .

    RPAR            reduce using rule 71 (printx -> ID id_val PLUS op_val printx .)


state 215

    (87) listx -> NUMINT id_param COMA listx .

    RBRACKET        reduce using rule 87 (listx -> NUMINT id_param COMA listx .)


state 216

    (89) listx -> NUMFLOAT id_param COMA listx .

    RBRACKET        reduce using rule 89 (listx -> NUMFLOAT id_param COMA listx .)


state 217

    (85) listx -> ID id_param COMA listx .

    RBRACKET        reduce using rule 85 (listx -> ID id_param COMA listx .)


state 218

    (78) else -> ELSE cond_else . block
    (17) block -> . LCBRACKET blockx RCBRACKET

    LCBRACKET       shift and go to state 34

    block                          shift and go to state 220

state 219

    (77) condition -> IF LPAR expression RPAR cond_1 block else cond_2 .

    INT             reduce using rule 77 (condition -> IF LPAR expression RPAR cond_1 block else cond_2 .)
    FLOAT           reduce using rule 77 (condition -> IF LPAR expression RPAR cond_1 block else cond_2 .)
    BOOLEAN         reduce using rule 77 (condition -> IF LPAR expression RPAR cond_1 block else cond_2 .)
    ID              reduce using rule 77 (condition -> IF LPAR expression RPAR cond_1 block else cond_2 .)
    IF              reduce using rule 77 (condition -> IF LPAR expression RPAR cond_1 block else cond_2 .)
    WHILE           reduce using rule 77 (condition -> IF LPAR expression RPAR cond_1 block else cond_2 .)
    PRINT           reduce using rule 77 (condition -> IF LPAR expression RPAR cond_1 block else cond_2 .)
    LIST            reduce using rule 77 (condition -> IF LPAR expression RPAR cond_1 block else cond_2 .)
    MOVE            reduce using rule 77 (condition -> IF LPAR expression RPAR cond_1 block else cond_2 .)
    EAT             reduce using rule 77 (condition -> IF LPAR expression RPAR cond_1 block else cond_2 .)
    CLEAN           reduce using rule 77 (condition -> IF LPAR expression RPAR cond_1 block else cond_2 .)
    PLAY            reduce using rule 77 (condition -> IF LPAR expression RPAR cond_1 block else cond_2 .)
    TURNLEFT        reduce using rule 77 (condition -> IF LPAR expression RPAR cond_1 block else cond_2 .)
    TURNRIGHT       reduce using rule 77 (condition -> IF LPAR expression RPAR cond_1 block else cond_2 .)
    RETURN          reduce using rule 77 (condition -> IF LPAR expression RPAR cond_1 block else cond_2 .)
    RCBRACKET       reduce using rule 77 (condition -> IF LPAR expression RPAR cond_1 block else cond_2 .)


state 220

    (78) else -> ELSE cond_else block .

    INT             reduce using rule 78 (else -> ELSE cond_else block .)
    FLOAT           reduce using rule 78 (else -> ELSE cond_else block .)
    BOOLEAN         reduce using rule 78 (else -> ELSE cond_else block .)
    ID              reduce using rule 78 (else -> ELSE cond_else block .)
    IF              reduce using rule 78 (else -> ELSE cond_else block .)
    WHILE           reduce using rule 78 (else -> ELSE cond_else block .)
    PRINT           reduce using rule 78 (else -> ELSE cond_else block .)
    LIST            reduce using rule 78 (else -> ELSE cond_else block .)
    MOVE            reduce using rule 78 (else -> ELSE cond_else block .)
    EAT             reduce using rule 78 (else -> ELSE cond_else block .)
    CLEAN           reduce using rule 78 (else -> ELSE cond_else block .)
    PLAY            reduce using rule 78 (else -> ELSE cond_else block .)
    TURNLEFT        reduce using rule 78 (else -> ELSE cond_else block .)
    TURNRIGHT       reduce using rule 78 (else -> ELSE cond_else block .)
    RETURN          reduce using rule 78 (else -> ELSE cond_else block .)
    RCBRACKET       reduce using rule 78 (else -> ELSE cond_else block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 37 resolved as shift
WARNING: shift/reduce conflict for COMA in state 156 resolved as shift
WARNING: reduce/reduce conflict in state 142 resolved using rule (id_val -> <empty>)
WARNING: rejected rule (varcte -> ID) in state 142
WARNING: reduce/reduce conflict in state 156 resolved using rule (varcte -> ID)
WARNING: rejected rule (params -> ID) in state 156
WARNING: Rule (params -> ID) is never reduced
