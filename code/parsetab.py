
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = "\xc1\x86\xc0BN'\xc0\x85p\xee\xf8P\xc8\xdf\x95\x02"
    
_lr_action_items = {'LPAR':([4,5,18,19,20,21,22,],[5,5,5,5,5,5,5,]),'DIVIDE':([6,9,11,13,14,16,17,23,],[-36,19,-37,-35,-34,-33,-32,-31,]),'COMPARISON':([6,9,11,13,14,16,17,23,],[-36,18,-37,-35,-34,-33,-32,-31,]),'NUMINT':([4,5,7,8,18,19,20,21,22,],[6,6,6,6,6,6,6,6,6,]),'EQUAL':([1,],[4,]),'ID':([0,4,5,7,8,18,19,20,21,22,],[1,13,13,13,13,13,13,13,13,13,]),'PLUS':([4,5,6,9,11,13,14,16,17,18,19,20,21,22,23,],[8,8,-36,20,-37,-35,-34,-33,-32,8,8,8,8,8,-31,]),'NUMFLOAT':([4,5,7,8,18,19,20,21,22,],[11,11,11,11,11,11,11,11,11,]),'MULTIPLY':([6,9,11,13,14,16,17,23,],[-36,21,-37,-35,-34,-33,-32,-31,]),'RPAR':([6,9,10,11,13,14,15,16,17,23,24,25,26,27,28,],[-36,-30,-24,-37,-35,-34,23,-33,-32,-31,-29,-28,-25,-27,-26,]),'MINUS':([4,5,6,9,11,13,14,16,17,18,19,20,21,22,23,],[7,7,-36,22,-37,-35,-34,-33,-32,7,7,7,7,7,-31,]),'$end':([2,3,6,9,10,11,12,13,14,16,17,23,24,25,26,27,28,],[0,-1,-36,-30,-24,-37,-23,-35,-34,-33,-32,-31,-29,-28,-25,-27,-26,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'func':([0,],[2,]),'varcte':([4,5,7,8,18,19,20,21,22,],[14,14,16,17,14,14,14,14,14,]),'asign':([0,],[3,]),'termino':([4,5,18,19,20,21,22,],[9,9,24,25,26,27,28,]),'exp':([4,5,],[10,10,]),'expression':([4,5,],[12,15,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> func","S'",1,None,None,None),
  ('func -> asign','func',1,'p_func','cat.py',113),
  ('funcx -> vars','funcx',1,'p_funcx','cat.py',120),
  ('funcx -> empty','funcx',1,'p_funcx','cat.py',121),
  ('block -> LBRACKET blockx RBRACKET','block',3,'p_block','cat.py',124),
  ('blockx -> statement blockx','blockx',2,'p_blockx','cat.py',127),
  ('blockx -> empty','blockx',1,'p_blockx','cat.py',128),
  ('vars -> type ID','vars',2,'p_vars','cat.py',132),
  ('type -> INT','type',1,'p_type','cat.py',141),
  ('type -> FLOAT','type',1,'p_type','cat.py',142),
  ('statement -> asign','statement',1,'p_statement','cat.py',147),
  ('statement -> condition','statement',1,'p_statement','cat.py',148),
  ('statement -> cycle','statement',1,'p_statement','cat.py',149),
  ('statement -> print','statement',1,'p_statement','cat.py',150),
  ('statement -> list','statement',1,'p_statement','cat.py',151),
  ('statement -> call','statement',1,'p_statement','cat.py',152),
  ('statement -> move','statement',1,'p_statement','cat.py',153),
  ('statement -> eat','statement',1,'p_statement','cat.py',154),
  ('statement -> clean','statement',1,'p_statement','cat.py',155),
  ('statement -> play','statement',1,'p_statement','cat.py',156),
  ('statement -> add','statement',1,'p_statement','cat.py',157),
  ('statement -> turnleft','statement',1,'p_statement','cat.py',158),
  ('statement -> turnright','statement',1,'p_statement','cat.py',159),
  ('asign -> ID EQUAL expression','asign',3,'p_asign','cat.py',163),
  ('expression -> exp','expression',1,'p_expression','cat.py',167),
  ('exp -> termino PLUS termino','exp',3,'p_exp','cat.py',170),
  ('exp -> termino MINUS termino','exp',3,'p_exp','cat.py',171),
  ('exp -> termino MULTIPLY termino','exp',3,'p_exp','cat.py',172),
  ('exp -> termino DIVIDE termino','exp',3,'p_exp','cat.py',173),
  ('exp -> termino COMPARISON termino','exp',3,'p_exp','cat.py',174),
  ('exp -> termino','exp',1,'p_exp_num','cat.py',211),
  ('termino -> LPAR expression RPAR','termino',3,'p_termino','cat.py',215),
  ('termino -> PLUS varcte','termino',2,'p_termino','cat.py',216),
  ('termino -> MINUS varcte','termino',2,'p_termino','cat.py',217),
  ('termino -> varcte','termino',1,'p_termino','cat.py',218),
  ('varcte -> ID','varcte',1,'p_varcte','cat.py',223),
  ('varcte -> NUMINT','varcte',1,'p_varcte','cat.py',224),
  ('varcte -> NUMFLOAT','varcte',1,'p_varcte','cat.py',225),
  ('print -> PRINT LPAR printx RPAR','print',4,'p_print','cat.py',232),
  ('printx -> expression','printx',1,'p_printx','cat.py',235),
  ('printx -> STRING','printx',1,'p_printx','cat.py',236),
  ('printx -> expression COMA printx','printx',3,'p_printx','cat.py',237),
  ('printx -> STRING COMA printx','printx',3,'p_printx','cat.py',238),
  ('cycle -> WHILE LPAR expression RPAR block','cycle',5,'p_cycle','cat.py',242),
  ('condition -> IF LPAR expression RPAR block','condition',5,'p_condition','cat.py',245),
  ('condition -> IF LPAR expression RPAR block ELSE block','condition',7,'p_condition','cat.py',246),
  ('list -> LIST ID EQUAL LBRACKET listx RBRACKET','list',6,'p_list','cat.py',249),
  ('listx -> ID','listx',1,'p_listx','cat.py',252),
  ('listx -> NUMINT','listx',1,'p_listx','cat.py',253),
  ('listx -> ID COMA listx','listx',3,'p_listx','cat.py',254),
  ('listx -> NUMINT COMA listx','listx',3,'p_listx','cat.py',255),
  ('call -> ID LPAR RPAR','call',3,'p_call','cat.py',260),
  ('call -> ID LPAR ID RPAR','call',4,'p_call','cat.py',261),
  ('move -> MOVE LPAR ID RPAR','move',4,'p_move','cat.py',265),
  ('eat -> EAT LPAR ID RPAR','eat',4,'p_eat','cat.py',268),
  ('clean -> CLEAN LPAR ID RPAR','clean',4,'p_clean','cat.py',271),
  ('play -> PLAY LPAR ID RPAR','play',4,'p_play','cat.py',274),
  ('add -> ID POINT ADD LPAR CANDY RPAR','add',6,'p_add','cat.py',277),
  ('add -> ID POINT ADD LPAR POOP RPAR','add',6,'p_add','cat.py',278),
  ('add -> ID POINT ADD LPAR BALL RPAR','add',6,'p_add','cat.py',279),
  ('turnleft -> TURNLEFT LPAR RPAR','turnleft',3,'p_turnleft','cat.py',283),
  ('turnright -> TURNRIGHT LPAR RPAR','turnright',3,'p_turnrigth','cat.py',286),
  ('empty -> <empty>','empty',0,'p_empty','cat.py',289),
]
