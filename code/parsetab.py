
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = 'E:\xfd\xc7\xc9~\xd5L\xefO\xd3\xa2\x93R\xa9\xbb'
    
_lr_action_items = {'INT':([0,],[1,]),'FLOAT':([0,],[2,]),'ID':([0,],[5,]),'$end':([1,2,3,4,5,],[-37,-38,-1,0,-36,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'varcte':([0,],[3,]),'func':([0,],[4,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> func","S'",1,None,None,None),
  ('func -> varcte','func',1,'p_func','cat.py',101),
  ('funcx -> vars','funcx',1,'p_funcx','cat.py',106),
  ('funcx -> empty','funcx',1,'p_funcx','cat.py',107),
  ('block -> LBRACKET blockx RBRACKET','block',3,'p_block','cat.py',110),
  ('blockx -> statement blockx','blockx',2,'p_blockx','cat.py',113),
  ('blockx -> empty','blockx',1,'p_blockx','cat.py',114),
  ('vars -> type ID','vars',2,'p_vars','cat.py',116),
  ('type -> INT','type',1,'p_type','cat.py',119),
  ('type -> FLOAT','type',1,'p_type','cat.py',120),
  ('statement -> asign','statement',1,'p_statement','cat.py',123),
  ('statement -> condition','statement',1,'p_statement','cat.py',124),
  ('statement -> cycle','statement',1,'p_statement','cat.py',125),
  ('statement -> print','statement',1,'p_statement','cat.py',126),
  ('statement -> list','statement',1,'p_statement','cat.py',127),
  ('statement -> call','statement',1,'p_statement','cat.py',128),
  ('statement -> move','statement',1,'p_statement','cat.py',129),
  ('statement -> eat','statement',1,'p_statement','cat.py',130),
  ('statement -> clean','statement',1,'p_statement','cat.py',131),
  ('statement -> play','statement',1,'p_statement','cat.py',132),
  ('statement -> add','statement',1,'p_statement','cat.py',133),
  ('statement -> turnleft','statement',1,'p_statement','cat.py',134),
  ('statement -> turnright','statement',1,'p_statement','cat.py',135),
  ('asign -> ID EQUAL expression','asign',3,'p_asign','cat.py',139),
  ('expression -> exp','expression',1,'p_expression','cat.py',143),
  ('expression -> COMPARISON exp','expression',2,'p_expression','cat.py',144),
  ('exp -> termino','exp',1,'p_exp','cat.py',148),
  ('exp -> termino PLUS termino','exp',3,'p_exp','cat.py',149),
  ('exp -> termino MINUS termino','exp',3,'p_exp','cat.py',150),
  ('termino -> factor','termino',1,'p_termino','cat.py',162),
  ('termino -> factor MULTIPLY factor','termino',3,'p_termino','cat.py',163),
  ('termino -> factor DIVIDE factor','termino',3,'p_termino','cat.py',164),
  ('factor -> LPAR expression RPAR','factor',3,'p_factor','cat.py',168),
  ('factor -> PLUS varcte','factor',2,'p_factor','cat.py',169),
  ('factor -> MINUS varcte','factor',2,'p_factor','cat.py',170),
  ('factor -> varcte','factor',1,'p_factor','cat.py',171),
  ('varcte -> ID','varcte',1,'p_varcte','cat.py',175),
  ('varcte -> INT','varcte',1,'p_varcte','cat.py',176),
  ('varcte -> FLOAT','varcte',1,'p_varcte','cat.py',177),
  ('print -> PRINT LPAR printx RPAR','print',4,'p_print','cat.py',184),
  ('printx -> expression','printx',1,'p_printx','cat.py',187),
  ('printx -> STRING','printx',1,'p_printx','cat.py',188),
  ('printx -> expression COMA printx','printx',3,'p_printx','cat.py',189),
  ('printx -> STRING COMA printx','printx',3,'p_printx','cat.py',190),
  ('cycle -> WHILE LPAR expression RPAR block','cycle',5,'p_cycle','cat.py',195),
  ('condition -> IF LPAR expression RPAR block','condition',5,'p_condition','cat.py',198),
  ('condition -> IF LPAR expression RPAR block ELSE block','condition',7,'p_condition','cat.py',199),
  ('list -> LIST ID EQUAL LBRACKET listx RBRACKET','list',6,'p_list','cat.py',202),
  ('listx -> ID','listx',1,'p_listx','cat.py',205),
  ('listx -> ID COMA listx','listx',3,'p_listx','cat.py',206),
  ('listx -> INT','listx',1,'p_listx','cat.py',207),
  ('listx -> INT COMA listx','listx',3,'p_listx','cat.py',208),
  ('call -> ID LPAR RPAR','call',3,'p_call','cat.py',212),
  ('call -> ID LPAR ID RPAR','call',4,'p_call','cat.py',213),
  ('move -> MOVE LPAR ID RPAR','move',4,'p_move','cat.py',217),
  ('eat -> EAT LPAR ID RPAR','eat',4,'p_eat','cat.py',220),
  ('clean -> CLEAN LPAR ID RPAR','clean',4,'p_clean','cat.py',223),
  ('play -> PLAY LPAR ID RPAR','play',4,'p_play','cat.py',226),
  ('add -> ID POINT ADD LPAR CANDY RPAR','add',6,'p_add','cat.py',229),
  ('add -> ID POINT ADD LPAR POOP RPAR','add',6,'p_add','cat.py',230),
  ('add -> ID POINT ADD LPAR BALL RPAR','add',6,'p_add','cat.py',231),
  ('turnleft -> TURNLEFT LPAR RPAR','turnleft',3,'p_turnleft','cat.py',234),
  ('turnright -> TURNRIGHT LPAR RPAR','turnright',3,'p_turnrigth','cat.py',237),
  ('empty -> <empty>','empty',0,'p_empty','cat.py',240),
]
