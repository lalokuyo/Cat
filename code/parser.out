Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    TRUE
    SEMICOLON
    COLON
    FALSE

Grammar

Rule 0     S' -> class
Rule 1     class -> vars_global init_vars func_list
Rule 2     class -> func class
Rule 3     vars_global -> varsGlobal vars_global
Rule 4     vars_global -> empty
Rule 5     init_vars -> asign init_vars
Rule 6     init_vars -> empty
Rule 7     func_list -> func func_list
Rule 8     func_list -> empty
Rule 9     func -> FUNC idCheck LPAR funcx RPAR block
Rule 10    idCheck -> ID
Rule 11    funcx -> vars
Rule 12    funcx -> empty
Rule 13    block -> LBRACKET blockx RBRACKET
Rule 14    blockx -> vars
Rule 15    blockx -> vars blockx
Rule 16    blockx -> statement
Rule 17    blockx -> statement blockx
Rule 18    statement -> asign
Rule 19    statement -> condition
Rule 20    statement -> cycle
Rule 21    statement -> print
Rule 22    statement -> list
Rule 23    statement -> call
Rule 24    statement -> move
Rule 25    statement -> eat
Rule 26    statement -> clean
Rule 27    statement -> play
Rule 28    statement -> add
Rule 29    statement -> turnleft
Rule 30    statement -> turnright
Rule 31    varsGlobal -> type ID
Rule 32    vars -> type ID
Rule 33    type -> INT
Rule 34    type -> FLOAT
Rule 35    type -> BOOLEAN
Rule 36    asign -> ID id_val EQUAL equal_val expression
Rule 37    id_val -> <empty>
Rule 38    equal_val -> <empty>
Rule 39    expression -> exp
Rule 40    exp -> termino termino_val
Rule 41    exp -> termino termino_val PLUS op_val exp
Rule 42    exp -> termino termino_val MINUS op_val exp
Rule 43    exp -> termino termino_val MULTIPLY op_val exp
Rule 44    exp -> termino termino_val DIVIDE op_val exp
Rule 45    exp -> termino termino_val COMPARISON op_val exp
Rule 46    termino_val -> <empty>
Rule 47    op_val -> <empty>
Rule 48    termino -> LPAR expression RPAR
Rule 49    termino -> MINUS varcte
Rule 50    termino -> varcte
Rule 51    varcte -> ID
Rule 52    varcte -> NUMINT
Rule 53    varcte -> NUMFLOAT
Rule 54    varcte -> BOOLEANTYPE
Rule 55    print -> PRINT LPAR printx RPAR
Rule 56    printx -> expression
Rule 57    printx -> STRING
Rule 58    printx -> expression COMA printx
Rule 59    printx -> STRING COMA printx
Rule 60    cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3
Rule 61    cycle_1 -> <empty>
Rule 62    cycle_2 -> <empty>
Rule 63    cycle_3 -> <empty>
Rule 64    condition -> IF LPAR exp RPAR cond_1 block else cond_2
Rule 65    else -> ELSE cond_else block
Rule 66    else -> empty
Rule 67    cond_1 -> <empty>
Rule 68    cond_2 -> <empty>
Rule 69    cond_else -> <empty>
Rule 70    list -> LIST ID EQUAL LBRACKET listx RBRACKET
Rule 71    listx -> ID
Rule 72    listx -> NUMINT
Rule 73    listx -> ID COMA listx
Rule 74    listx -> NUMINT COMA listx
Rule 75    call -> ID LPAR RPAR
Rule 76    call -> ID LPAR ID RPAR
Rule 77    move -> MOVE LPAR ID RPAR
Rule 78    eat -> EAT LPAR ID RPAR
Rule 79    clean -> CLEAN LPAR ID RPAR
Rule 80    play -> PLAY LPAR ID RPAR
Rule 81    add -> ID POINT ADD LPAR CANDY RPAR
Rule 82    add -> ID POINT ADD LPAR POOP RPAR
Rule 83    add -> ID POINT ADD LPAR BALL RPAR
Rule 84    turnleft -> TURNLEFT LPAR RPAR
Rule 85    turnright -> TURNRIGHT LPAR RPAR
Rule 86    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 81 82 83
BALL                 : 83
BOOLEAN              : 35
BOOLEANTYPE          : 54
CANDY                : 81
CLEAN                : 79
COLON                : 
COMA                 : 58 59 73 74
COMPARISON           : 45
DIVIDE               : 44
EAT                  : 78
ELSE                 : 65
EQUAL                : 36 70
FALSE                : 
FLOAT                : 34
FUNC                 : 9
ID                   : 10 31 32 36 51 70 71 73 75 76 76 77 78 79 80 81 82 83
IF                   : 64
INT                  : 33
LBRACKET             : 13 70
LIST                 : 70
LPAR                 : 9 48 55 60 64 75 76 77 78 79 80 81 82 83 84 85
MINUS                : 42 49
MOVE                 : 77
MULTIPLY             : 43
NUMFLOAT             : 53
NUMINT               : 52 72 74
PLAY                 : 80
PLUS                 : 41
POINT                : 81 82 83
POOP                 : 82
PRINT                : 55
RBRACKET             : 13 70
RPAR                 : 9 48 55 60 64 75 76 77 78 79 80 81 82 83 84 85
SEMICOLON            : 
STRING               : 57 59
TRUE                 : 
TURNLEFT             : 84
TURNRIGHT            : 85
WHILE                : 60
error                : 

Nonterminals, with rules where they appear

add                  : 28
asign                : 5 18
block                : 9 60 64 65
blockx               : 13 15 17
call                 : 23
class                : 2 0
clean                : 26
cond_1               : 64
cond_2               : 64
cond_else            : 65
condition            : 19
cycle                : 20
cycle_1              : 60
cycle_2              : 60
cycle_3              : 60
eat                  : 25
else                 : 64
empty                : 4 6 8 12 66
equal_val            : 36
exp                  : 39 41 42 43 44 45 60 64
expression           : 36 48 56 58
func                 : 2 7
func_list            : 1 7
funcx                : 9
idCheck              : 9
id_val               : 36
init_vars            : 1 5
list                 : 22
listx                : 70 73 74
move                 : 24
op_val               : 41 42 43 44 45
play                 : 27
print                : 21
printx               : 55 58 59
statement            : 16 17
termino              : 40 41 42 43 44 45
termino_val          : 40 41 42 43 44 45
turnleft             : 29
turnright            : 30
type                 : 31 32
varcte               : 49 50
vars                 : 11 14 15
varsGlobal           : 3
vars_global          : 1 3

Parsing method: LALR

state 0

    (0) S' -> . class
    (1) class -> . vars_global init_vars func_list
    (2) class -> . func class
    (3) vars_global -> . varsGlobal vars_global
    (4) vars_global -> . empty
    (9) func -> . FUNC idCheck LPAR funcx RPAR block
    (31) varsGlobal -> . type ID
    (86) empty -> .
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . BOOLEAN

  ! shift/reduce conflict for FUNC resolved as shift
    FUNC            shift and go to state 3
    ID              reduce using rule 86 (empty -> .)
    $end            reduce using rule 86 (empty -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5

  ! FUNC            [ reduce using rule 86 (empty -> .) ]

    varsGlobal                     shift and go to state 1
    func                           shift and go to state 6
    vars_global                    shift and go to state 7
    type                           shift and go to state 8
    class                          shift and go to state 9
    empty                          shift and go to state 10

state 1

    (3) vars_global -> varsGlobal . vars_global
    (3) vars_global -> . varsGlobal vars_global
    (4) vars_global -> . empty
    (31) varsGlobal -> . type ID
    (86) empty -> .
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . BOOLEAN

    ID              reduce using rule 86 (empty -> .)
    FUNC            reduce using rule 86 (empty -> .)
    $end            reduce using rule 86 (empty -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5

    varsGlobal                     shift and go to state 1
    vars_global                    shift and go to state 11
    type                           shift and go to state 8
    empty                          shift and go to state 10

state 2

    (34) type -> FLOAT .

    ID              reduce using rule 34 (type -> FLOAT .)


state 3

    (9) func -> FUNC . idCheck LPAR funcx RPAR block
    (10) idCheck -> . ID

    ID              shift and go to state 13

    idCheck                        shift and go to state 12

state 4

    (33) type -> INT .

    ID              reduce using rule 33 (type -> INT .)


state 5

    (35) type -> BOOLEAN .

    ID              reduce using rule 35 (type -> BOOLEAN .)


state 6

    (2) class -> func . class
    (1) class -> . vars_global init_vars func_list
    (2) class -> . func class
    (3) vars_global -> . varsGlobal vars_global
    (4) vars_global -> . empty
    (9) func -> . FUNC idCheck LPAR funcx RPAR block
    (31) varsGlobal -> . type ID
    (86) empty -> .
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . BOOLEAN

  ! shift/reduce conflict for FUNC resolved as shift
    FUNC            shift and go to state 3
    ID              reduce using rule 86 (empty -> .)
    $end            reduce using rule 86 (empty -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5

  ! FUNC            [ reduce using rule 86 (empty -> .) ]

    varsGlobal                     shift and go to state 1
    func                           shift and go to state 6
    vars_global                    shift and go to state 7
    type                           shift and go to state 8
    class                          shift and go to state 14
    empty                          shift and go to state 10

state 7

    (1) class -> vars_global . init_vars func_list
    (5) init_vars -> . asign init_vars
    (6) init_vars -> . empty
    (36) asign -> . ID id_val EQUAL equal_val expression
    (86) empty -> .

    ID              shift and go to state 17
    FUNC            reduce using rule 86 (empty -> .)
    $end            reduce using rule 86 (empty -> .)

    init_vars                      shift and go to state 15
    asign                          shift and go to state 16
    empty                          shift and go to state 18

state 8

    (31) varsGlobal -> type . ID

    ID              shift and go to state 19


state 9

    (0) S' -> class .



state 10

    (4) vars_global -> empty .

    ID              reduce using rule 4 (vars_global -> empty .)
    FUNC            reduce using rule 4 (vars_global -> empty .)
    $end            reduce using rule 4 (vars_global -> empty .)


state 11

    (3) vars_global -> varsGlobal vars_global .

    ID              reduce using rule 3 (vars_global -> varsGlobal vars_global .)
    FUNC            reduce using rule 3 (vars_global -> varsGlobal vars_global .)
    $end            reduce using rule 3 (vars_global -> varsGlobal vars_global .)


state 12

    (9) func -> FUNC idCheck . LPAR funcx RPAR block

    LPAR            shift and go to state 20


state 13

    (10) idCheck -> ID .

    LPAR            reduce using rule 10 (idCheck -> ID .)


state 14

    (2) class -> func class .

    $end            reduce using rule 2 (class -> func class .)


state 15

    (1) class -> vars_global init_vars . func_list
    (7) func_list -> . func func_list
    (8) func_list -> . empty
    (9) func -> . FUNC idCheck LPAR funcx RPAR block
    (86) empty -> .

    FUNC            shift and go to state 3
    $end            reduce using rule 86 (empty -> .)

    func                           shift and go to state 21
    func_list                      shift and go to state 22
    empty                          shift and go to state 23

state 16

    (5) init_vars -> asign . init_vars
    (5) init_vars -> . asign init_vars
    (6) init_vars -> . empty
    (36) asign -> . ID id_val EQUAL equal_val expression
    (86) empty -> .

    ID              shift and go to state 17
    FUNC            reduce using rule 86 (empty -> .)
    $end            reduce using rule 86 (empty -> .)

    init_vars                      shift and go to state 24
    asign                          shift and go to state 16
    empty                          shift and go to state 18

state 17

    (36) asign -> ID . id_val EQUAL equal_val expression
    (37) id_val -> .

    EQUAL           reduce using rule 37 (id_val -> .)

    id_val                         shift and go to state 25

state 18

    (6) init_vars -> empty .

    FUNC            reduce using rule 6 (init_vars -> empty .)
    $end            reduce using rule 6 (init_vars -> empty .)


state 19

    (31) varsGlobal -> type ID .

    INT             reduce using rule 31 (varsGlobal -> type ID .)
    FLOAT           reduce using rule 31 (varsGlobal -> type ID .)
    BOOLEAN         reduce using rule 31 (varsGlobal -> type ID .)
    ID              reduce using rule 31 (varsGlobal -> type ID .)
    FUNC            reduce using rule 31 (varsGlobal -> type ID .)
    $end            reduce using rule 31 (varsGlobal -> type ID .)


state 20

    (9) func -> FUNC idCheck LPAR . funcx RPAR block
    (11) funcx -> . vars
    (12) funcx -> . empty
    (32) vars -> . type ID
    (86) empty -> .
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . BOOLEAN

    RPAR            reduce using rule 86 (empty -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5

    vars                           shift and go to state 26
    funcx                          shift and go to state 27
    type                           shift and go to state 29
    empty                          shift and go to state 28

state 21

    (7) func_list -> func . func_list
    (7) func_list -> . func func_list
    (8) func_list -> . empty
    (9) func -> . FUNC idCheck LPAR funcx RPAR block
    (86) empty -> .

    FUNC            shift and go to state 3
    $end            reduce using rule 86 (empty -> .)

    empty                          shift and go to state 23
    func                           shift and go to state 21
    func_list                      shift and go to state 30

state 22

    (1) class -> vars_global init_vars func_list .

    $end            reduce using rule 1 (class -> vars_global init_vars func_list .)


state 23

    (8) func_list -> empty .

    $end            reduce using rule 8 (func_list -> empty .)


state 24

    (5) init_vars -> asign init_vars .

    FUNC            reduce using rule 5 (init_vars -> asign init_vars .)
    $end            reduce using rule 5 (init_vars -> asign init_vars .)


state 25

    (36) asign -> ID id_val . EQUAL equal_val expression

    EQUAL           shift and go to state 31


state 26

    (11) funcx -> vars .

    RPAR            reduce using rule 11 (funcx -> vars .)


state 27

    (9) func -> FUNC idCheck LPAR funcx . RPAR block

    RPAR            shift and go to state 32


state 28

    (12) funcx -> empty .

    RPAR            reduce using rule 12 (funcx -> empty .)


state 29

    (32) vars -> type . ID

    ID              shift and go to state 33


state 30

    (7) func_list -> func func_list .

    $end            reduce using rule 7 (func_list -> func func_list .)


state 31

    (36) asign -> ID id_val EQUAL . equal_val expression
    (38) equal_val -> .

    LPAR            reduce using rule 38 (equal_val -> .)
    MINUS           reduce using rule 38 (equal_val -> .)
    ID              reduce using rule 38 (equal_val -> .)
    NUMINT          reduce using rule 38 (equal_val -> .)
    NUMFLOAT        reduce using rule 38 (equal_val -> .)
    BOOLEANTYPE     reduce using rule 38 (equal_val -> .)

    equal_val                      shift and go to state 34

state 32

    (9) func -> FUNC idCheck LPAR funcx RPAR . block
    (13) block -> . LBRACKET blockx RBRACKET

    LBRACKET        shift and go to state 35

    block                          shift and go to state 36

state 33

    (32) vars -> type ID .

    INT             reduce using rule 32 (vars -> type ID .)
    FLOAT           reduce using rule 32 (vars -> type ID .)
    BOOLEAN         reduce using rule 32 (vars -> type ID .)
    ID              reduce using rule 32 (vars -> type ID .)
    IF              reduce using rule 32 (vars -> type ID .)
    WHILE           reduce using rule 32 (vars -> type ID .)
    PRINT           reduce using rule 32 (vars -> type ID .)
    LIST            reduce using rule 32 (vars -> type ID .)
    MOVE            reduce using rule 32 (vars -> type ID .)
    EAT             reduce using rule 32 (vars -> type ID .)
    CLEAN           reduce using rule 32 (vars -> type ID .)
    PLAY            reduce using rule 32 (vars -> type ID .)
    TURNLEFT        reduce using rule 32 (vars -> type ID .)
    TURNRIGHT       reduce using rule 32 (vars -> type ID .)
    RBRACKET        reduce using rule 32 (vars -> type ID .)
    RPAR            reduce using rule 32 (vars -> type ID .)


state 34

    (36) asign -> ID id_val EQUAL equal_val . expression
    (39) expression -> . exp
    (40) exp -> . termino termino_val
    (41) exp -> . termino termino_val PLUS op_val exp
    (42) exp -> . termino termino_val MINUS op_val exp
    (43) exp -> . termino termino_val MULTIPLY op_val exp
    (44) exp -> . termino termino_val DIVIDE op_val exp
    (45) exp -> . termino termino_val COMPARISON op_val exp
    (48) termino -> . LPAR expression RPAR
    (49) termino -> . MINUS varcte
    (50) termino -> . varcte
    (51) varcte -> . ID
    (52) varcte -> . NUMINT
    (53) varcte -> . NUMFLOAT
    (54) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 44

    varcte                         shift and go to state 40
    exp                            shift and go to state 43
    expression                     shift and go to state 46
    termino                        shift and go to state 42

state 35

    (13) block -> LBRACKET . blockx RBRACKET
    (14) blockx -> . vars
    (15) blockx -> . vars blockx
    (16) blockx -> . statement
    (17) blockx -> . statement blockx
    (32) vars -> . type ID
    (18) statement -> . asign
    (19) statement -> . condition
    (20) statement -> . cycle
    (21) statement -> . print
    (22) statement -> . list
    (23) statement -> . call
    (24) statement -> . move
    (25) statement -> . eat
    (26) statement -> . clean
    (27) statement -> . play
    (28) statement -> . add
    (29) statement -> . turnleft
    (30) statement -> . turnright
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . BOOLEAN
    (36) asign -> . ID id_val EQUAL equal_val expression
    (64) condition -> . IF LPAR exp RPAR cond_1 block else cond_2
    (60) cycle -> . WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3
    (55) print -> . PRINT LPAR printx RPAR
    (70) list -> . LIST ID EQUAL LBRACKET listx RBRACKET
    (75) call -> . ID LPAR RPAR
    (76) call -> . ID LPAR ID RPAR
    (77) move -> . MOVE LPAR ID RPAR
    (78) eat -> . EAT LPAR ID RPAR
    (79) clean -> . CLEAN LPAR ID RPAR
    (80) play -> . PLAY LPAR ID RPAR
    (81) add -> . ID POINT ADD LPAR CANDY RPAR
    (82) add -> . ID POINT ADD LPAR POOP RPAR
    (83) add -> . ID POINT ADD LPAR BALL RPAR
    (84) turnleft -> . TURNLEFT LPAR RPAR
    (85) turnright -> . TURNRIGHT LPAR RPAR

    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5
    ID              shift and go to state 53
    IF              shift and go to state 59
    WHILE           shift and go to state 50
    PRINT           shift and go to state 51
    LIST            shift and go to state 52
    MOVE            shift and go to state 63
    EAT             shift and go to state 60
    CLEAN           shift and go to state 67
    PLAY            shift and go to state 61
    TURNLEFT        shift and go to state 48
    TURNRIGHT       shift and go to state 66

    vars                           shift and go to state 47
    move                           shift and go to state 49
    turnright                      shift and go to state 54
    add                            shift and go to state 55
    call                           shift and go to state 56
    statement                      shift and go to state 57
    print                          shift and go to state 58
    type                           shift and go to state 29
    play                           shift and go to state 62
    turnleft                       shift and go to state 64
    blockx                         shift and go to state 65
    eat                            shift and go to state 68
    condition                      shift and go to state 69
    cycle                          shift and go to state 70
    list                           shift and go to state 71
    asign                          shift and go to state 72
    clean                          shift and go to state 73

state 36

    (9) func -> FUNC idCheck LPAR funcx RPAR block .

    FUNC            reduce using rule 9 (func -> FUNC idCheck LPAR funcx RPAR block .)
    $end            reduce using rule 9 (func -> FUNC idCheck LPAR funcx RPAR block .)
    INT             reduce using rule 9 (func -> FUNC idCheck LPAR funcx RPAR block .)
    FLOAT           reduce using rule 9 (func -> FUNC idCheck LPAR funcx RPAR block .)
    BOOLEAN         reduce using rule 9 (func -> FUNC idCheck LPAR funcx RPAR block .)
    ID              reduce using rule 9 (func -> FUNC idCheck LPAR funcx RPAR block .)


state 37

    (48) termino -> LPAR . expression RPAR
    (39) expression -> . exp
    (40) exp -> . termino termino_val
    (41) exp -> . termino termino_val PLUS op_val exp
    (42) exp -> . termino termino_val MINUS op_val exp
    (43) exp -> . termino termino_val MULTIPLY op_val exp
    (44) exp -> . termino termino_val DIVIDE op_val exp
    (45) exp -> . termino termino_val COMPARISON op_val exp
    (48) termino -> . LPAR expression RPAR
    (49) termino -> . MINUS varcte
    (50) termino -> . varcte
    (51) varcte -> . ID
    (52) varcte -> . NUMINT
    (53) varcte -> . NUMFLOAT
    (54) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 44

    varcte                         shift and go to state 40
    termino                        shift and go to state 42
    exp                            shift and go to state 43
    expression                     shift and go to state 74

state 38

    (49) termino -> MINUS . varcte
    (51) varcte -> . ID
    (52) varcte -> . NUMINT
    (53) varcte -> . NUMFLOAT
    (54) varcte -> . BOOLEANTYPE

    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 44

    varcte                         shift and go to state 75

state 39

    (52) varcte -> NUMINT .

    PLUS            reduce using rule 52 (varcte -> NUMINT .)
    MINUS           reduce using rule 52 (varcte -> NUMINT .)
    MULTIPLY        reduce using rule 52 (varcte -> NUMINT .)
    DIVIDE          reduce using rule 52 (varcte -> NUMINT .)
    COMPARISON      reduce using rule 52 (varcte -> NUMINT .)
    COMA            reduce using rule 52 (varcte -> NUMINT .)
    RPAR            reduce using rule 52 (varcte -> NUMINT .)
    ID              reduce using rule 52 (varcte -> NUMINT .)
    FUNC            reduce using rule 52 (varcte -> NUMINT .)
    $end            reduce using rule 52 (varcte -> NUMINT .)
    INT             reduce using rule 52 (varcte -> NUMINT .)
    FLOAT           reduce using rule 52 (varcte -> NUMINT .)
    BOOLEAN         reduce using rule 52 (varcte -> NUMINT .)
    IF              reduce using rule 52 (varcte -> NUMINT .)
    WHILE           reduce using rule 52 (varcte -> NUMINT .)
    PRINT           reduce using rule 52 (varcte -> NUMINT .)
    LIST            reduce using rule 52 (varcte -> NUMINT .)
    MOVE            reduce using rule 52 (varcte -> NUMINT .)
    EAT             reduce using rule 52 (varcte -> NUMINT .)
    CLEAN           reduce using rule 52 (varcte -> NUMINT .)
    PLAY            reduce using rule 52 (varcte -> NUMINT .)
    TURNLEFT        reduce using rule 52 (varcte -> NUMINT .)
    TURNRIGHT       reduce using rule 52 (varcte -> NUMINT .)
    RBRACKET        reduce using rule 52 (varcte -> NUMINT .)


state 40

    (50) termino -> varcte .

    PLUS            reduce using rule 50 (termino -> varcte .)
    MINUS           reduce using rule 50 (termino -> varcte .)
    MULTIPLY        reduce using rule 50 (termino -> varcte .)
    DIVIDE          reduce using rule 50 (termino -> varcte .)
    COMPARISON      reduce using rule 50 (termino -> varcte .)
    ID              reduce using rule 50 (termino -> varcte .)
    FUNC            reduce using rule 50 (termino -> varcte .)
    $end            reduce using rule 50 (termino -> varcte .)
    INT             reduce using rule 50 (termino -> varcte .)
    FLOAT           reduce using rule 50 (termino -> varcte .)
    BOOLEAN         reduce using rule 50 (termino -> varcte .)
    IF              reduce using rule 50 (termino -> varcte .)
    WHILE           reduce using rule 50 (termino -> varcte .)
    PRINT           reduce using rule 50 (termino -> varcte .)
    LIST            reduce using rule 50 (termino -> varcte .)
    MOVE            reduce using rule 50 (termino -> varcte .)
    EAT             reduce using rule 50 (termino -> varcte .)
    CLEAN           reduce using rule 50 (termino -> varcte .)
    PLAY            reduce using rule 50 (termino -> varcte .)
    TURNLEFT        reduce using rule 50 (termino -> varcte .)
    TURNRIGHT       reduce using rule 50 (termino -> varcte .)
    RBRACKET        reduce using rule 50 (termino -> varcte .)
    RPAR            reduce using rule 50 (termino -> varcte .)
    COMA            reduce using rule 50 (termino -> varcte .)


state 41

    (51) varcte -> ID .

    PLUS            reduce using rule 51 (varcte -> ID .)
    MINUS           reduce using rule 51 (varcte -> ID .)
    MULTIPLY        reduce using rule 51 (varcte -> ID .)
    DIVIDE          reduce using rule 51 (varcte -> ID .)
    COMPARISON      reduce using rule 51 (varcte -> ID .)
    COMA            reduce using rule 51 (varcte -> ID .)
    RPAR            reduce using rule 51 (varcte -> ID .)
    ID              reduce using rule 51 (varcte -> ID .)
    FUNC            reduce using rule 51 (varcte -> ID .)
    $end            reduce using rule 51 (varcte -> ID .)
    INT             reduce using rule 51 (varcte -> ID .)
    FLOAT           reduce using rule 51 (varcte -> ID .)
    BOOLEAN         reduce using rule 51 (varcte -> ID .)
    IF              reduce using rule 51 (varcte -> ID .)
    WHILE           reduce using rule 51 (varcte -> ID .)
    PRINT           reduce using rule 51 (varcte -> ID .)
    LIST            reduce using rule 51 (varcte -> ID .)
    MOVE            reduce using rule 51 (varcte -> ID .)
    EAT             reduce using rule 51 (varcte -> ID .)
    CLEAN           reduce using rule 51 (varcte -> ID .)
    PLAY            reduce using rule 51 (varcte -> ID .)
    TURNLEFT        reduce using rule 51 (varcte -> ID .)
    TURNRIGHT       reduce using rule 51 (varcte -> ID .)
    RBRACKET        reduce using rule 51 (varcte -> ID .)


state 42

    (40) exp -> termino . termino_val
    (41) exp -> termino . termino_val PLUS op_val exp
    (42) exp -> termino . termino_val MINUS op_val exp
    (43) exp -> termino . termino_val MULTIPLY op_val exp
    (44) exp -> termino . termino_val DIVIDE op_val exp
    (45) exp -> termino . termino_val COMPARISON op_val exp
    (46) termino_val -> .

    PLUS            reduce using rule 46 (termino_val -> .)
    MINUS           reduce using rule 46 (termino_val -> .)
    MULTIPLY        reduce using rule 46 (termino_val -> .)
    DIVIDE          reduce using rule 46 (termino_val -> .)
    COMPARISON      reduce using rule 46 (termino_val -> .)
    ID              reduce using rule 46 (termino_val -> .)
    FUNC            reduce using rule 46 (termino_val -> .)
    $end            reduce using rule 46 (termino_val -> .)
    INT             reduce using rule 46 (termino_val -> .)
    FLOAT           reduce using rule 46 (termino_val -> .)
    BOOLEAN         reduce using rule 46 (termino_val -> .)
    IF              reduce using rule 46 (termino_val -> .)
    WHILE           reduce using rule 46 (termino_val -> .)
    PRINT           reduce using rule 46 (termino_val -> .)
    LIST            reduce using rule 46 (termino_val -> .)
    MOVE            reduce using rule 46 (termino_val -> .)
    EAT             reduce using rule 46 (termino_val -> .)
    CLEAN           reduce using rule 46 (termino_val -> .)
    PLAY            reduce using rule 46 (termino_val -> .)
    TURNLEFT        reduce using rule 46 (termino_val -> .)
    TURNRIGHT       reduce using rule 46 (termino_val -> .)
    RBRACKET        reduce using rule 46 (termino_val -> .)
    RPAR            reduce using rule 46 (termino_val -> .)
    COMA            reduce using rule 46 (termino_val -> .)

    termino_val                    shift and go to state 76

state 43

    (39) expression -> exp .

    COMA            reduce using rule 39 (expression -> exp .)
    RPAR            reduce using rule 39 (expression -> exp .)
    ID              reduce using rule 39 (expression -> exp .)
    FUNC            reduce using rule 39 (expression -> exp .)
    $end            reduce using rule 39 (expression -> exp .)
    INT             reduce using rule 39 (expression -> exp .)
    FLOAT           reduce using rule 39 (expression -> exp .)
    BOOLEAN         reduce using rule 39 (expression -> exp .)
    IF              reduce using rule 39 (expression -> exp .)
    WHILE           reduce using rule 39 (expression -> exp .)
    PRINT           reduce using rule 39 (expression -> exp .)
    LIST            reduce using rule 39 (expression -> exp .)
    MOVE            reduce using rule 39 (expression -> exp .)
    EAT             reduce using rule 39 (expression -> exp .)
    CLEAN           reduce using rule 39 (expression -> exp .)
    PLAY            reduce using rule 39 (expression -> exp .)
    TURNLEFT        reduce using rule 39 (expression -> exp .)
    TURNRIGHT       reduce using rule 39 (expression -> exp .)
    RBRACKET        reduce using rule 39 (expression -> exp .)


state 44

    (54) varcte -> BOOLEANTYPE .

    PLUS            reduce using rule 54 (varcte -> BOOLEANTYPE .)
    MINUS           reduce using rule 54 (varcte -> BOOLEANTYPE .)
    MULTIPLY        reduce using rule 54 (varcte -> BOOLEANTYPE .)
    DIVIDE          reduce using rule 54 (varcte -> BOOLEANTYPE .)
    COMPARISON      reduce using rule 54 (varcte -> BOOLEANTYPE .)
    COMA            reduce using rule 54 (varcte -> BOOLEANTYPE .)
    RPAR            reduce using rule 54 (varcte -> BOOLEANTYPE .)
    ID              reduce using rule 54 (varcte -> BOOLEANTYPE .)
    FUNC            reduce using rule 54 (varcte -> BOOLEANTYPE .)
    $end            reduce using rule 54 (varcte -> BOOLEANTYPE .)
    INT             reduce using rule 54 (varcte -> BOOLEANTYPE .)
    FLOAT           reduce using rule 54 (varcte -> BOOLEANTYPE .)
    BOOLEAN         reduce using rule 54 (varcte -> BOOLEANTYPE .)
    IF              reduce using rule 54 (varcte -> BOOLEANTYPE .)
    WHILE           reduce using rule 54 (varcte -> BOOLEANTYPE .)
    PRINT           reduce using rule 54 (varcte -> BOOLEANTYPE .)
    LIST            reduce using rule 54 (varcte -> BOOLEANTYPE .)
    MOVE            reduce using rule 54 (varcte -> BOOLEANTYPE .)
    EAT             reduce using rule 54 (varcte -> BOOLEANTYPE .)
    CLEAN           reduce using rule 54 (varcte -> BOOLEANTYPE .)
    PLAY            reduce using rule 54 (varcte -> BOOLEANTYPE .)
    TURNLEFT        reduce using rule 54 (varcte -> BOOLEANTYPE .)
    TURNRIGHT       reduce using rule 54 (varcte -> BOOLEANTYPE .)
    RBRACKET        reduce using rule 54 (varcte -> BOOLEANTYPE .)


state 45

    (53) varcte -> NUMFLOAT .

    PLUS            reduce using rule 53 (varcte -> NUMFLOAT .)
    MINUS           reduce using rule 53 (varcte -> NUMFLOAT .)
    MULTIPLY        reduce using rule 53 (varcte -> NUMFLOAT .)
    DIVIDE          reduce using rule 53 (varcte -> NUMFLOAT .)
    COMPARISON      reduce using rule 53 (varcte -> NUMFLOAT .)
    COMA            reduce using rule 53 (varcte -> NUMFLOAT .)
    RPAR            reduce using rule 53 (varcte -> NUMFLOAT .)
    ID              reduce using rule 53 (varcte -> NUMFLOAT .)
    FUNC            reduce using rule 53 (varcte -> NUMFLOAT .)
    $end            reduce using rule 53 (varcte -> NUMFLOAT .)
    INT             reduce using rule 53 (varcte -> NUMFLOAT .)
    FLOAT           reduce using rule 53 (varcte -> NUMFLOAT .)
    BOOLEAN         reduce using rule 53 (varcte -> NUMFLOAT .)
    IF              reduce using rule 53 (varcte -> NUMFLOAT .)
    WHILE           reduce using rule 53 (varcte -> NUMFLOAT .)
    PRINT           reduce using rule 53 (varcte -> NUMFLOAT .)
    LIST            reduce using rule 53 (varcte -> NUMFLOAT .)
    MOVE            reduce using rule 53 (varcte -> NUMFLOAT .)
    EAT             reduce using rule 53 (varcte -> NUMFLOAT .)
    CLEAN           reduce using rule 53 (varcte -> NUMFLOAT .)
    PLAY            reduce using rule 53 (varcte -> NUMFLOAT .)
    TURNLEFT        reduce using rule 53 (varcte -> NUMFLOAT .)
    TURNRIGHT       reduce using rule 53 (varcte -> NUMFLOAT .)
    RBRACKET        reduce using rule 53 (varcte -> NUMFLOAT .)


state 46

    (36) asign -> ID id_val EQUAL equal_val expression .

    ID              reduce using rule 36 (asign -> ID id_val EQUAL equal_val expression .)
    FUNC            reduce using rule 36 (asign -> ID id_val EQUAL equal_val expression .)
    $end            reduce using rule 36 (asign -> ID id_val EQUAL equal_val expression .)
    INT             reduce using rule 36 (asign -> ID id_val EQUAL equal_val expression .)
    FLOAT           reduce using rule 36 (asign -> ID id_val EQUAL equal_val expression .)
    BOOLEAN         reduce using rule 36 (asign -> ID id_val EQUAL equal_val expression .)
    IF              reduce using rule 36 (asign -> ID id_val EQUAL equal_val expression .)
    WHILE           reduce using rule 36 (asign -> ID id_val EQUAL equal_val expression .)
    PRINT           reduce using rule 36 (asign -> ID id_val EQUAL equal_val expression .)
    LIST            reduce using rule 36 (asign -> ID id_val EQUAL equal_val expression .)
    MOVE            reduce using rule 36 (asign -> ID id_val EQUAL equal_val expression .)
    EAT             reduce using rule 36 (asign -> ID id_val EQUAL equal_val expression .)
    CLEAN           reduce using rule 36 (asign -> ID id_val EQUAL equal_val expression .)
    PLAY            reduce using rule 36 (asign -> ID id_val EQUAL equal_val expression .)
    TURNLEFT        reduce using rule 36 (asign -> ID id_val EQUAL equal_val expression .)
    TURNRIGHT       reduce using rule 36 (asign -> ID id_val EQUAL equal_val expression .)
    RBRACKET        reduce using rule 36 (asign -> ID id_val EQUAL equal_val expression .)


state 47

    (14) blockx -> vars .
    (15) blockx -> vars . blockx
    (14) blockx -> . vars
    (15) blockx -> . vars blockx
    (16) blockx -> . statement
    (17) blockx -> . statement blockx
    (32) vars -> . type ID
    (18) statement -> . asign
    (19) statement -> . condition
    (20) statement -> . cycle
    (21) statement -> . print
    (22) statement -> . list
    (23) statement -> . call
    (24) statement -> . move
    (25) statement -> . eat
    (26) statement -> . clean
    (27) statement -> . play
    (28) statement -> . add
    (29) statement -> . turnleft
    (30) statement -> . turnright
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . BOOLEAN
    (36) asign -> . ID id_val EQUAL equal_val expression
    (64) condition -> . IF LPAR exp RPAR cond_1 block else cond_2
    (60) cycle -> . WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3
    (55) print -> . PRINT LPAR printx RPAR
    (70) list -> . LIST ID EQUAL LBRACKET listx RBRACKET
    (75) call -> . ID LPAR RPAR
    (76) call -> . ID LPAR ID RPAR
    (77) move -> . MOVE LPAR ID RPAR
    (78) eat -> . EAT LPAR ID RPAR
    (79) clean -> . CLEAN LPAR ID RPAR
    (80) play -> . PLAY LPAR ID RPAR
    (81) add -> . ID POINT ADD LPAR CANDY RPAR
    (82) add -> . ID POINT ADD LPAR POOP RPAR
    (83) add -> . ID POINT ADD LPAR BALL RPAR
    (84) turnleft -> . TURNLEFT LPAR RPAR
    (85) turnright -> . TURNRIGHT LPAR RPAR

    RBRACKET        reduce using rule 14 (blockx -> vars .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5
    ID              shift and go to state 53
    IF              shift and go to state 59
    WHILE           shift and go to state 50
    PRINT           shift and go to state 51
    LIST            shift and go to state 52
    MOVE            shift and go to state 63
    EAT             shift and go to state 60
    CLEAN           shift and go to state 67
    PLAY            shift and go to state 61
    TURNLEFT        shift and go to state 48
    TURNRIGHT       shift and go to state 66

    vars                           shift and go to state 47
    move                           shift and go to state 49
    turnright                      shift and go to state 54
    add                            shift and go to state 55
    call                           shift and go to state 56
    statement                      shift and go to state 57
    print                          shift and go to state 58
    type                           shift and go to state 29
    play                           shift and go to state 62
    turnleft                       shift and go to state 64
    blockx                         shift and go to state 77
    eat                            shift and go to state 68
    condition                      shift and go to state 69
    cycle                          shift and go to state 70
    list                           shift and go to state 71
    asign                          shift and go to state 72
    clean                          shift and go to state 73

state 48

    (84) turnleft -> TURNLEFT . LPAR RPAR

    LPAR            shift and go to state 78


state 49

    (24) statement -> move .

    INT             reduce using rule 24 (statement -> move .)
    FLOAT           reduce using rule 24 (statement -> move .)
    BOOLEAN         reduce using rule 24 (statement -> move .)
    ID              reduce using rule 24 (statement -> move .)
    IF              reduce using rule 24 (statement -> move .)
    WHILE           reduce using rule 24 (statement -> move .)
    PRINT           reduce using rule 24 (statement -> move .)
    LIST            reduce using rule 24 (statement -> move .)
    MOVE            reduce using rule 24 (statement -> move .)
    EAT             reduce using rule 24 (statement -> move .)
    CLEAN           reduce using rule 24 (statement -> move .)
    PLAY            reduce using rule 24 (statement -> move .)
    TURNLEFT        reduce using rule 24 (statement -> move .)
    TURNRIGHT       reduce using rule 24 (statement -> move .)
    RBRACKET        reduce using rule 24 (statement -> move .)


state 50

    (60) cycle -> WHILE . cycle_1 LPAR exp RPAR cycle_2 block cycle_3
    (61) cycle_1 -> .

    LPAR            reduce using rule 61 (cycle_1 -> .)

    cycle_1                        shift and go to state 79

state 51

    (55) print -> PRINT . LPAR printx RPAR

    LPAR            shift and go to state 80


state 52

    (70) list -> LIST . ID EQUAL LBRACKET listx RBRACKET

    ID              shift and go to state 81


state 53

    (36) asign -> ID . id_val EQUAL equal_val expression
    (75) call -> ID . LPAR RPAR
    (76) call -> ID . LPAR ID RPAR
    (81) add -> ID . POINT ADD LPAR CANDY RPAR
    (82) add -> ID . POINT ADD LPAR POOP RPAR
    (83) add -> ID . POINT ADD LPAR BALL RPAR
    (37) id_val -> .

    LPAR            shift and go to state 82
    POINT           shift and go to state 83
    EQUAL           reduce using rule 37 (id_val -> .)

    id_val                         shift and go to state 25

state 54

    (30) statement -> turnright .

    INT             reduce using rule 30 (statement -> turnright .)
    FLOAT           reduce using rule 30 (statement -> turnright .)
    BOOLEAN         reduce using rule 30 (statement -> turnright .)
    ID              reduce using rule 30 (statement -> turnright .)
    IF              reduce using rule 30 (statement -> turnright .)
    WHILE           reduce using rule 30 (statement -> turnright .)
    PRINT           reduce using rule 30 (statement -> turnright .)
    LIST            reduce using rule 30 (statement -> turnright .)
    MOVE            reduce using rule 30 (statement -> turnright .)
    EAT             reduce using rule 30 (statement -> turnright .)
    CLEAN           reduce using rule 30 (statement -> turnright .)
    PLAY            reduce using rule 30 (statement -> turnright .)
    TURNLEFT        reduce using rule 30 (statement -> turnright .)
    TURNRIGHT       reduce using rule 30 (statement -> turnright .)
    RBRACKET        reduce using rule 30 (statement -> turnright .)


state 55

    (28) statement -> add .

    INT             reduce using rule 28 (statement -> add .)
    FLOAT           reduce using rule 28 (statement -> add .)
    BOOLEAN         reduce using rule 28 (statement -> add .)
    ID              reduce using rule 28 (statement -> add .)
    IF              reduce using rule 28 (statement -> add .)
    WHILE           reduce using rule 28 (statement -> add .)
    PRINT           reduce using rule 28 (statement -> add .)
    LIST            reduce using rule 28 (statement -> add .)
    MOVE            reduce using rule 28 (statement -> add .)
    EAT             reduce using rule 28 (statement -> add .)
    CLEAN           reduce using rule 28 (statement -> add .)
    PLAY            reduce using rule 28 (statement -> add .)
    TURNLEFT        reduce using rule 28 (statement -> add .)
    TURNRIGHT       reduce using rule 28 (statement -> add .)
    RBRACKET        reduce using rule 28 (statement -> add .)


state 56

    (23) statement -> call .

    INT             reduce using rule 23 (statement -> call .)
    FLOAT           reduce using rule 23 (statement -> call .)
    BOOLEAN         reduce using rule 23 (statement -> call .)
    ID              reduce using rule 23 (statement -> call .)
    IF              reduce using rule 23 (statement -> call .)
    WHILE           reduce using rule 23 (statement -> call .)
    PRINT           reduce using rule 23 (statement -> call .)
    LIST            reduce using rule 23 (statement -> call .)
    MOVE            reduce using rule 23 (statement -> call .)
    EAT             reduce using rule 23 (statement -> call .)
    CLEAN           reduce using rule 23 (statement -> call .)
    PLAY            reduce using rule 23 (statement -> call .)
    TURNLEFT        reduce using rule 23 (statement -> call .)
    TURNRIGHT       reduce using rule 23 (statement -> call .)
    RBRACKET        reduce using rule 23 (statement -> call .)


state 57

    (16) blockx -> statement .
    (17) blockx -> statement . blockx
    (14) blockx -> . vars
    (15) blockx -> . vars blockx
    (16) blockx -> . statement
    (17) blockx -> . statement blockx
    (32) vars -> . type ID
    (18) statement -> . asign
    (19) statement -> . condition
    (20) statement -> . cycle
    (21) statement -> . print
    (22) statement -> . list
    (23) statement -> . call
    (24) statement -> . move
    (25) statement -> . eat
    (26) statement -> . clean
    (27) statement -> . play
    (28) statement -> . add
    (29) statement -> . turnleft
    (30) statement -> . turnright
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . BOOLEAN
    (36) asign -> . ID id_val EQUAL equal_val expression
    (64) condition -> . IF LPAR exp RPAR cond_1 block else cond_2
    (60) cycle -> . WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3
    (55) print -> . PRINT LPAR printx RPAR
    (70) list -> . LIST ID EQUAL LBRACKET listx RBRACKET
    (75) call -> . ID LPAR RPAR
    (76) call -> . ID LPAR ID RPAR
    (77) move -> . MOVE LPAR ID RPAR
    (78) eat -> . EAT LPAR ID RPAR
    (79) clean -> . CLEAN LPAR ID RPAR
    (80) play -> . PLAY LPAR ID RPAR
    (81) add -> . ID POINT ADD LPAR CANDY RPAR
    (82) add -> . ID POINT ADD LPAR POOP RPAR
    (83) add -> . ID POINT ADD LPAR BALL RPAR
    (84) turnleft -> . TURNLEFT LPAR RPAR
    (85) turnright -> . TURNRIGHT LPAR RPAR

    RBRACKET        reduce using rule 16 (blockx -> statement .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5
    ID              shift and go to state 53
    IF              shift and go to state 59
    WHILE           shift and go to state 50
    PRINT           shift and go to state 51
    LIST            shift and go to state 52
    MOVE            shift and go to state 63
    EAT             shift and go to state 60
    CLEAN           shift and go to state 67
    PLAY            shift and go to state 61
    TURNLEFT        shift and go to state 48
    TURNRIGHT       shift and go to state 66

    vars                           shift and go to state 47
    move                           shift and go to state 49
    turnright                      shift and go to state 54
    add                            shift and go to state 55
    call                           shift and go to state 56
    statement                      shift and go to state 57
    print                          shift and go to state 58
    type                           shift and go to state 29
    play                           shift and go to state 62
    turnleft                       shift and go to state 64
    blockx                         shift and go to state 84
    eat                            shift and go to state 68
    condition                      shift and go to state 69
    cycle                          shift and go to state 70
    list                           shift and go to state 71
    asign                          shift and go to state 72
    clean                          shift and go to state 73

state 58

    (21) statement -> print .

    INT             reduce using rule 21 (statement -> print .)
    FLOAT           reduce using rule 21 (statement -> print .)
    BOOLEAN         reduce using rule 21 (statement -> print .)
    ID              reduce using rule 21 (statement -> print .)
    IF              reduce using rule 21 (statement -> print .)
    WHILE           reduce using rule 21 (statement -> print .)
    PRINT           reduce using rule 21 (statement -> print .)
    LIST            reduce using rule 21 (statement -> print .)
    MOVE            reduce using rule 21 (statement -> print .)
    EAT             reduce using rule 21 (statement -> print .)
    CLEAN           reduce using rule 21 (statement -> print .)
    PLAY            reduce using rule 21 (statement -> print .)
    TURNLEFT        reduce using rule 21 (statement -> print .)
    TURNRIGHT       reduce using rule 21 (statement -> print .)
    RBRACKET        reduce using rule 21 (statement -> print .)


state 59

    (64) condition -> IF . LPAR exp RPAR cond_1 block else cond_2

    LPAR            shift and go to state 85


state 60

    (78) eat -> EAT . LPAR ID RPAR

    LPAR            shift and go to state 86


state 61

    (80) play -> PLAY . LPAR ID RPAR

    LPAR            shift and go to state 87


state 62

    (27) statement -> play .

    INT             reduce using rule 27 (statement -> play .)
    FLOAT           reduce using rule 27 (statement -> play .)
    BOOLEAN         reduce using rule 27 (statement -> play .)
    ID              reduce using rule 27 (statement -> play .)
    IF              reduce using rule 27 (statement -> play .)
    WHILE           reduce using rule 27 (statement -> play .)
    PRINT           reduce using rule 27 (statement -> play .)
    LIST            reduce using rule 27 (statement -> play .)
    MOVE            reduce using rule 27 (statement -> play .)
    EAT             reduce using rule 27 (statement -> play .)
    CLEAN           reduce using rule 27 (statement -> play .)
    PLAY            reduce using rule 27 (statement -> play .)
    TURNLEFT        reduce using rule 27 (statement -> play .)
    TURNRIGHT       reduce using rule 27 (statement -> play .)
    RBRACKET        reduce using rule 27 (statement -> play .)


state 63

    (77) move -> MOVE . LPAR ID RPAR

    LPAR            shift and go to state 88


state 64

    (29) statement -> turnleft .

    INT             reduce using rule 29 (statement -> turnleft .)
    FLOAT           reduce using rule 29 (statement -> turnleft .)
    BOOLEAN         reduce using rule 29 (statement -> turnleft .)
    ID              reduce using rule 29 (statement -> turnleft .)
    IF              reduce using rule 29 (statement -> turnleft .)
    WHILE           reduce using rule 29 (statement -> turnleft .)
    PRINT           reduce using rule 29 (statement -> turnleft .)
    LIST            reduce using rule 29 (statement -> turnleft .)
    MOVE            reduce using rule 29 (statement -> turnleft .)
    EAT             reduce using rule 29 (statement -> turnleft .)
    CLEAN           reduce using rule 29 (statement -> turnleft .)
    PLAY            reduce using rule 29 (statement -> turnleft .)
    TURNLEFT        reduce using rule 29 (statement -> turnleft .)
    TURNRIGHT       reduce using rule 29 (statement -> turnleft .)
    RBRACKET        reduce using rule 29 (statement -> turnleft .)


state 65

    (13) block -> LBRACKET blockx . RBRACKET

    RBRACKET        shift and go to state 89


state 66

    (85) turnright -> TURNRIGHT . LPAR RPAR

    LPAR            shift and go to state 90


state 67

    (79) clean -> CLEAN . LPAR ID RPAR

    LPAR            shift and go to state 91


state 68

    (25) statement -> eat .

    INT             reduce using rule 25 (statement -> eat .)
    FLOAT           reduce using rule 25 (statement -> eat .)
    BOOLEAN         reduce using rule 25 (statement -> eat .)
    ID              reduce using rule 25 (statement -> eat .)
    IF              reduce using rule 25 (statement -> eat .)
    WHILE           reduce using rule 25 (statement -> eat .)
    PRINT           reduce using rule 25 (statement -> eat .)
    LIST            reduce using rule 25 (statement -> eat .)
    MOVE            reduce using rule 25 (statement -> eat .)
    EAT             reduce using rule 25 (statement -> eat .)
    CLEAN           reduce using rule 25 (statement -> eat .)
    PLAY            reduce using rule 25 (statement -> eat .)
    TURNLEFT        reduce using rule 25 (statement -> eat .)
    TURNRIGHT       reduce using rule 25 (statement -> eat .)
    RBRACKET        reduce using rule 25 (statement -> eat .)


state 69

    (19) statement -> condition .

    INT             reduce using rule 19 (statement -> condition .)
    FLOAT           reduce using rule 19 (statement -> condition .)
    BOOLEAN         reduce using rule 19 (statement -> condition .)
    ID              reduce using rule 19 (statement -> condition .)
    IF              reduce using rule 19 (statement -> condition .)
    WHILE           reduce using rule 19 (statement -> condition .)
    PRINT           reduce using rule 19 (statement -> condition .)
    LIST            reduce using rule 19 (statement -> condition .)
    MOVE            reduce using rule 19 (statement -> condition .)
    EAT             reduce using rule 19 (statement -> condition .)
    CLEAN           reduce using rule 19 (statement -> condition .)
    PLAY            reduce using rule 19 (statement -> condition .)
    TURNLEFT        reduce using rule 19 (statement -> condition .)
    TURNRIGHT       reduce using rule 19 (statement -> condition .)
    RBRACKET        reduce using rule 19 (statement -> condition .)


state 70

    (20) statement -> cycle .

    INT             reduce using rule 20 (statement -> cycle .)
    FLOAT           reduce using rule 20 (statement -> cycle .)
    BOOLEAN         reduce using rule 20 (statement -> cycle .)
    ID              reduce using rule 20 (statement -> cycle .)
    IF              reduce using rule 20 (statement -> cycle .)
    WHILE           reduce using rule 20 (statement -> cycle .)
    PRINT           reduce using rule 20 (statement -> cycle .)
    LIST            reduce using rule 20 (statement -> cycle .)
    MOVE            reduce using rule 20 (statement -> cycle .)
    EAT             reduce using rule 20 (statement -> cycle .)
    CLEAN           reduce using rule 20 (statement -> cycle .)
    PLAY            reduce using rule 20 (statement -> cycle .)
    TURNLEFT        reduce using rule 20 (statement -> cycle .)
    TURNRIGHT       reduce using rule 20 (statement -> cycle .)
    RBRACKET        reduce using rule 20 (statement -> cycle .)


state 71

    (22) statement -> list .

    INT             reduce using rule 22 (statement -> list .)
    FLOAT           reduce using rule 22 (statement -> list .)
    BOOLEAN         reduce using rule 22 (statement -> list .)
    ID              reduce using rule 22 (statement -> list .)
    IF              reduce using rule 22 (statement -> list .)
    WHILE           reduce using rule 22 (statement -> list .)
    PRINT           reduce using rule 22 (statement -> list .)
    LIST            reduce using rule 22 (statement -> list .)
    MOVE            reduce using rule 22 (statement -> list .)
    EAT             reduce using rule 22 (statement -> list .)
    CLEAN           reduce using rule 22 (statement -> list .)
    PLAY            reduce using rule 22 (statement -> list .)
    TURNLEFT        reduce using rule 22 (statement -> list .)
    TURNRIGHT       reduce using rule 22 (statement -> list .)
    RBRACKET        reduce using rule 22 (statement -> list .)


state 72

    (18) statement -> asign .

    INT             reduce using rule 18 (statement -> asign .)
    FLOAT           reduce using rule 18 (statement -> asign .)
    BOOLEAN         reduce using rule 18 (statement -> asign .)
    ID              reduce using rule 18 (statement -> asign .)
    IF              reduce using rule 18 (statement -> asign .)
    WHILE           reduce using rule 18 (statement -> asign .)
    PRINT           reduce using rule 18 (statement -> asign .)
    LIST            reduce using rule 18 (statement -> asign .)
    MOVE            reduce using rule 18 (statement -> asign .)
    EAT             reduce using rule 18 (statement -> asign .)
    CLEAN           reduce using rule 18 (statement -> asign .)
    PLAY            reduce using rule 18 (statement -> asign .)
    TURNLEFT        reduce using rule 18 (statement -> asign .)
    TURNRIGHT       reduce using rule 18 (statement -> asign .)
    RBRACKET        reduce using rule 18 (statement -> asign .)


state 73

    (26) statement -> clean .

    INT             reduce using rule 26 (statement -> clean .)
    FLOAT           reduce using rule 26 (statement -> clean .)
    BOOLEAN         reduce using rule 26 (statement -> clean .)
    ID              reduce using rule 26 (statement -> clean .)
    IF              reduce using rule 26 (statement -> clean .)
    WHILE           reduce using rule 26 (statement -> clean .)
    PRINT           reduce using rule 26 (statement -> clean .)
    LIST            reduce using rule 26 (statement -> clean .)
    MOVE            reduce using rule 26 (statement -> clean .)
    EAT             reduce using rule 26 (statement -> clean .)
    CLEAN           reduce using rule 26 (statement -> clean .)
    PLAY            reduce using rule 26 (statement -> clean .)
    TURNLEFT        reduce using rule 26 (statement -> clean .)
    TURNRIGHT       reduce using rule 26 (statement -> clean .)
    RBRACKET        reduce using rule 26 (statement -> clean .)


state 74

    (48) termino -> LPAR expression . RPAR

    RPAR            shift and go to state 92


state 75

    (49) termino -> MINUS varcte .

    PLUS            reduce using rule 49 (termino -> MINUS varcte .)
    MINUS           reduce using rule 49 (termino -> MINUS varcte .)
    MULTIPLY        reduce using rule 49 (termino -> MINUS varcte .)
    DIVIDE          reduce using rule 49 (termino -> MINUS varcte .)
    COMPARISON      reduce using rule 49 (termino -> MINUS varcte .)
    ID              reduce using rule 49 (termino -> MINUS varcte .)
    FUNC            reduce using rule 49 (termino -> MINUS varcte .)
    $end            reduce using rule 49 (termino -> MINUS varcte .)
    INT             reduce using rule 49 (termino -> MINUS varcte .)
    FLOAT           reduce using rule 49 (termino -> MINUS varcte .)
    BOOLEAN         reduce using rule 49 (termino -> MINUS varcte .)
    IF              reduce using rule 49 (termino -> MINUS varcte .)
    WHILE           reduce using rule 49 (termino -> MINUS varcte .)
    PRINT           reduce using rule 49 (termino -> MINUS varcte .)
    LIST            reduce using rule 49 (termino -> MINUS varcte .)
    MOVE            reduce using rule 49 (termino -> MINUS varcte .)
    EAT             reduce using rule 49 (termino -> MINUS varcte .)
    CLEAN           reduce using rule 49 (termino -> MINUS varcte .)
    PLAY            reduce using rule 49 (termino -> MINUS varcte .)
    TURNLEFT        reduce using rule 49 (termino -> MINUS varcte .)
    TURNRIGHT       reduce using rule 49 (termino -> MINUS varcte .)
    RBRACKET        reduce using rule 49 (termino -> MINUS varcte .)
    RPAR            reduce using rule 49 (termino -> MINUS varcte .)
    COMA            reduce using rule 49 (termino -> MINUS varcte .)


state 76

    (40) exp -> termino termino_val .
    (41) exp -> termino termino_val . PLUS op_val exp
    (42) exp -> termino termino_val . MINUS op_val exp
    (43) exp -> termino termino_val . MULTIPLY op_val exp
    (44) exp -> termino termino_val . DIVIDE op_val exp
    (45) exp -> termino termino_val . COMPARISON op_val exp

    ID              reduce using rule 40 (exp -> termino termino_val .)
    FUNC            reduce using rule 40 (exp -> termino termino_val .)
    $end            reduce using rule 40 (exp -> termino termino_val .)
    INT             reduce using rule 40 (exp -> termino termino_val .)
    FLOAT           reduce using rule 40 (exp -> termino termino_val .)
    BOOLEAN         reduce using rule 40 (exp -> termino termino_val .)
    IF              reduce using rule 40 (exp -> termino termino_val .)
    WHILE           reduce using rule 40 (exp -> termino termino_val .)
    PRINT           reduce using rule 40 (exp -> termino termino_val .)
    LIST            reduce using rule 40 (exp -> termino termino_val .)
    MOVE            reduce using rule 40 (exp -> termino termino_val .)
    EAT             reduce using rule 40 (exp -> termino termino_val .)
    CLEAN           reduce using rule 40 (exp -> termino termino_val .)
    PLAY            reduce using rule 40 (exp -> termino termino_val .)
    TURNLEFT        reduce using rule 40 (exp -> termino termino_val .)
    TURNRIGHT       reduce using rule 40 (exp -> termino termino_val .)
    RBRACKET        reduce using rule 40 (exp -> termino termino_val .)
    RPAR            reduce using rule 40 (exp -> termino termino_val .)
    COMA            reduce using rule 40 (exp -> termino termino_val .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 97
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 94
    COMPARISON      shift and go to state 93


state 77

    (15) blockx -> vars blockx .

    RBRACKET        reduce using rule 15 (blockx -> vars blockx .)


state 78

    (84) turnleft -> TURNLEFT LPAR . RPAR

    RPAR            shift and go to state 98


state 79

    (60) cycle -> WHILE cycle_1 . LPAR exp RPAR cycle_2 block cycle_3

    LPAR            shift and go to state 99


state 80

    (55) print -> PRINT LPAR . printx RPAR
    (56) printx -> . expression
    (57) printx -> . STRING
    (58) printx -> . expression COMA printx
    (59) printx -> . STRING COMA printx
    (39) expression -> . exp
    (40) exp -> . termino termino_val
    (41) exp -> . termino termino_val PLUS op_val exp
    (42) exp -> . termino termino_val MINUS op_val exp
    (43) exp -> . termino termino_val MULTIPLY op_val exp
    (44) exp -> . termino termino_val DIVIDE op_val exp
    (45) exp -> . termino termino_val COMPARISON op_val exp
    (48) termino -> . LPAR expression RPAR
    (49) termino -> . MINUS varcte
    (50) termino -> . varcte
    (51) varcte -> . ID
    (52) varcte -> . NUMINT
    (53) varcte -> . NUMFLOAT
    (54) varcte -> . BOOLEANTYPE

    STRING          shift and go to state 100
    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 44

    varcte                         shift and go to state 40
    printx                         shift and go to state 101
    termino                        shift and go to state 42
    exp                            shift and go to state 43
    expression                     shift and go to state 102

state 81

    (70) list -> LIST ID . EQUAL LBRACKET listx RBRACKET

    EQUAL           shift and go to state 103


state 82

    (75) call -> ID LPAR . RPAR
    (76) call -> ID LPAR . ID RPAR

    RPAR            shift and go to state 105
    ID              shift and go to state 104


state 83

    (81) add -> ID POINT . ADD LPAR CANDY RPAR
    (82) add -> ID POINT . ADD LPAR POOP RPAR
    (83) add -> ID POINT . ADD LPAR BALL RPAR

    ADD             shift and go to state 106


state 84

    (17) blockx -> statement blockx .

    RBRACKET        reduce using rule 17 (blockx -> statement blockx .)


state 85

    (64) condition -> IF LPAR . exp RPAR cond_1 block else cond_2
    (40) exp -> . termino termino_val
    (41) exp -> . termino termino_val PLUS op_val exp
    (42) exp -> . termino termino_val MINUS op_val exp
    (43) exp -> . termino termino_val MULTIPLY op_val exp
    (44) exp -> . termino termino_val DIVIDE op_val exp
    (45) exp -> . termino termino_val COMPARISON op_val exp
    (48) termino -> . LPAR expression RPAR
    (49) termino -> . MINUS varcte
    (50) termino -> . varcte
    (51) varcte -> . ID
    (52) varcte -> . NUMINT
    (53) varcte -> . NUMFLOAT
    (54) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 44

    varcte                         shift and go to state 40
    termino                        shift and go to state 42
    exp                            shift and go to state 107

state 86

    (78) eat -> EAT LPAR . ID RPAR

    ID              shift and go to state 108


state 87

    (80) play -> PLAY LPAR . ID RPAR

    ID              shift and go to state 109


state 88

    (77) move -> MOVE LPAR . ID RPAR

    ID              shift and go to state 110


state 89

    (13) block -> LBRACKET blockx RBRACKET .

    INT             reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    FLOAT           reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    BOOLEAN         reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    ID              reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    IF              reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    WHILE           reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    PRINT           reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    LIST            reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    MOVE            reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    EAT             reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    CLEAN           reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    PLAY            reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    TURNLEFT        reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    TURNRIGHT       reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    RBRACKET        reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    FUNC            reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    $end            reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    ELSE            reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)


state 90

    (85) turnright -> TURNRIGHT LPAR . RPAR

    RPAR            shift and go to state 111


state 91

    (79) clean -> CLEAN LPAR . ID RPAR

    ID              shift and go to state 112


state 92

    (48) termino -> LPAR expression RPAR .

    PLUS            reduce using rule 48 (termino -> LPAR expression RPAR .)
    MINUS           reduce using rule 48 (termino -> LPAR expression RPAR .)
    MULTIPLY        reduce using rule 48 (termino -> LPAR expression RPAR .)
    DIVIDE          reduce using rule 48 (termino -> LPAR expression RPAR .)
    COMPARISON      reduce using rule 48 (termino -> LPAR expression RPAR .)
    ID              reduce using rule 48 (termino -> LPAR expression RPAR .)
    FUNC            reduce using rule 48 (termino -> LPAR expression RPAR .)
    $end            reduce using rule 48 (termino -> LPAR expression RPAR .)
    INT             reduce using rule 48 (termino -> LPAR expression RPAR .)
    FLOAT           reduce using rule 48 (termino -> LPAR expression RPAR .)
    BOOLEAN         reduce using rule 48 (termino -> LPAR expression RPAR .)
    IF              reduce using rule 48 (termino -> LPAR expression RPAR .)
    WHILE           reduce using rule 48 (termino -> LPAR expression RPAR .)
    PRINT           reduce using rule 48 (termino -> LPAR expression RPAR .)
    LIST            reduce using rule 48 (termino -> LPAR expression RPAR .)
    MOVE            reduce using rule 48 (termino -> LPAR expression RPAR .)
    EAT             reduce using rule 48 (termino -> LPAR expression RPAR .)
    CLEAN           reduce using rule 48 (termino -> LPAR expression RPAR .)
    PLAY            reduce using rule 48 (termino -> LPAR expression RPAR .)
    TURNLEFT        reduce using rule 48 (termino -> LPAR expression RPAR .)
    TURNRIGHT       reduce using rule 48 (termino -> LPAR expression RPAR .)
    RBRACKET        reduce using rule 48 (termino -> LPAR expression RPAR .)
    RPAR            reduce using rule 48 (termino -> LPAR expression RPAR .)
    COMA            reduce using rule 48 (termino -> LPAR expression RPAR .)


state 93

    (45) exp -> termino termino_val COMPARISON . op_val exp
    (47) op_val -> .

    LPAR            reduce using rule 47 (op_val -> .)
    MINUS           reduce using rule 47 (op_val -> .)
    ID              reduce using rule 47 (op_val -> .)
    NUMINT          reduce using rule 47 (op_val -> .)
    NUMFLOAT        reduce using rule 47 (op_val -> .)
    BOOLEANTYPE     reduce using rule 47 (op_val -> .)

    op_val                         shift and go to state 113

state 94

    (44) exp -> termino termino_val DIVIDE . op_val exp
    (47) op_val -> .

    LPAR            reduce using rule 47 (op_val -> .)
    MINUS           reduce using rule 47 (op_val -> .)
    ID              reduce using rule 47 (op_val -> .)
    NUMINT          reduce using rule 47 (op_val -> .)
    NUMFLOAT        reduce using rule 47 (op_val -> .)
    BOOLEANTYPE     reduce using rule 47 (op_val -> .)

    op_val                         shift and go to state 114

state 95

    (41) exp -> termino termino_val PLUS . op_val exp
    (47) op_val -> .

    LPAR            reduce using rule 47 (op_val -> .)
    MINUS           reduce using rule 47 (op_val -> .)
    ID              reduce using rule 47 (op_val -> .)
    NUMINT          reduce using rule 47 (op_val -> .)
    NUMFLOAT        reduce using rule 47 (op_val -> .)
    BOOLEANTYPE     reduce using rule 47 (op_val -> .)

    op_val                         shift and go to state 115

state 96

    (43) exp -> termino termino_val MULTIPLY . op_val exp
    (47) op_val -> .

    LPAR            reduce using rule 47 (op_val -> .)
    MINUS           reduce using rule 47 (op_val -> .)
    ID              reduce using rule 47 (op_val -> .)
    NUMINT          reduce using rule 47 (op_val -> .)
    NUMFLOAT        reduce using rule 47 (op_val -> .)
    BOOLEANTYPE     reduce using rule 47 (op_val -> .)

    op_val                         shift and go to state 116

state 97

    (42) exp -> termino termino_val MINUS . op_val exp
    (47) op_val -> .

    LPAR            reduce using rule 47 (op_val -> .)
    MINUS           reduce using rule 47 (op_val -> .)
    ID              reduce using rule 47 (op_val -> .)
    NUMINT          reduce using rule 47 (op_val -> .)
    NUMFLOAT        reduce using rule 47 (op_val -> .)
    BOOLEANTYPE     reduce using rule 47 (op_val -> .)

    op_val                         shift and go to state 117

state 98

    (84) turnleft -> TURNLEFT LPAR RPAR .

    INT             reduce using rule 84 (turnleft -> TURNLEFT LPAR RPAR .)
    FLOAT           reduce using rule 84 (turnleft -> TURNLEFT LPAR RPAR .)
    BOOLEAN         reduce using rule 84 (turnleft -> TURNLEFT LPAR RPAR .)
    ID              reduce using rule 84 (turnleft -> TURNLEFT LPAR RPAR .)
    IF              reduce using rule 84 (turnleft -> TURNLEFT LPAR RPAR .)
    WHILE           reduce using rule 84 (turnleft -> TURNLEFT LPAR RPAR .)
    PRINT           reduce using rule 84 (turnleft -> TURNLEFT LPAR RPAR .)
    LIST            reduce using rule 84 (turnleft -> TURNLEFT LPAR RPAR .)
    MOVE            reduce using rule 84 (turnleft -> TURNLEFT LPAR RPAR .)
    EAT             reduce using rule 84 (turnleft -> TURNLEFT LPAR RPAR .)
    CLEAN           reduce using rule 84 (turnleft -> TURNLEFT LPAR RPAR .)
    PLAY            reduce using rule 84 (turnleft -> TURNLEFT LPAR RPAR .)
    TURNLEFT        reduce using rule 84 (turnleft -> TURNLEFT LPAR RPAR .)
    TURNRIGHT       reduce using rule 84 (turnleft -> TURNLEFT LPAR RPAR .)
    RBRACKET        reduce using rule 84 (turnleft -> TURNLEFT LPAR RPAR .)


state 99

    (60) cycle -> WHILE cycle_1 LPAR . exp RPAR cycle_2 block cycle_3
    (40) exp -> . termino termino_val
    (41) exp -> . termino termino_val PLUS op_val exp
    (42) exp -> . termino termino_val MINUS op_val exp
    (43) exp -> . termino termino_val MULTIPLY op_val exp
    (44) exp -> . termino termino_val DIVIDE op_val exp
    (45) exp -> . termino termino_val COMPARISON op_val exp
    (48) termino -> . LPAR expression RPAR
    (49) termino -> . MINUS varcte
    (50) termino -> . varcte
    (51) varcte -> . ID
    (52) varcte -> . NUMINT
    (53) varcte -> . NUMFLOAT
    (54) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 44

    varcte                         shift and go to state 40
    termino                        shift and go to state 42
    exp                            shift and go to state 118

state 100

    (57) printx -> STRING .
    (59) printx -> STRING . COMA printx

    RPAR            reduce using rule 57 (printx -> STRING .)
    COMA            shift and go to state 119


state 101

    (55) print -> PRINT LPAR printx . RPAR

    RPAR            shift and go to state 120


state 102

    (56) printx -> expression .
    (58) printx -> expression . COMA printx

    RPAR            reduce using rule 56 (printx -> expression .)
    COMA            shift and go to state 121


state 103

    (70) list -> LIST ID EQUAL . LBRACKET listx RBRACKET

    LBRACKET        shift and go to state 122


state 104

    (76) call -> ID LPAR ID . RPAR

    RPAR            shift and go to state 123


state 105

    (75) call -> ID LPAR RPAR .

    INT             reduce using rule 75 (call -> ID LPAR RPAR .)
    FLOAT           reduce using rule 75 (call -> ID LPAR RPAR .)
    BOOLEAN         reduce using rule 75 (call -> ID LPAR RPAR .)
    ID              reduce using rule 75 (call -> ID LPAR RPAR .)
    IF              reduce using rule 75 (call -> ID LPAR RPAR .)
    WHILE           reduce using rule 75 (call -> ID LPAR RPAR .)
    PRINT           reduce using rule 75 (call -> ID LPAR RPAR .)
    LIST            reduce using rule 75 (call -> ID LPAR RPAR .)
    MOVE            reduce using rule 75 (call -> ID LPAR RPAR .)
    EAT             reduce using rule 75 (call -> ID LPAR RPAR .)
    CLEAN           reduce using rule 75 (call -> ID LPAR RPAR .)
    PLAY            reduce using rule 75 (call -> ID LPAR RPAR .)
    TURNLEFT        reduce using rule 75 (call -> ID LPAR RPAR .)
    TURNRIGHT       reduce using rule 75 (call -> ID LPAR RPAR .)
    RBRACKET        reduce using rule 75 (call -> ID LPAR RPAR .)


state 106

    (81) add -> ID POINT ADD . LPAR CANDY RPAR
    (82) add -> ID POINT ADD . LPAR POOP RPAR
    (83) add -> ID POINT ADD . LPAR BALL RPAR

    LPAR            shift and go to state 124


state 107

    (64) condition -> IF LPAR exp . RPAR cond_1 block else cond_2

    RPAR            shift and go to state 125


state 108

    (78) eat -> EAT LPAR ID . RPAR

    RPAR            shift and go to state 126


state 109

    (80) play -> PLAY LPAR ID . RPAR

    RPAR            shift and go to state 127


state 110

    (77) move -> MOVE LPAR ID . RPAR

    RPAR            shift and go to state 128


state 111

    (85) turnright -> TURNRIGHT LPAR RPAR .

    INT             reduce using rule 85 (turnright -> TURNRIGHT LPAR RPAR .)
    FLOAT           reduce using rule 85 (turnright -> TURNRIGHT LPAR RPAR .)
    BOOLEAN         reduce using rule 85 (turnright -> TURNRIGHT LPAR RPAR .)
    ID              reduce using rule 85 (turnright -> TURNRIGHT LPAR RPAR .)
    IF              reduce using rule 85 (turnright -> TURNRIGHT LPAR RPAR .)
    WHILE           reduce using rule 85 (turnright -> TURNRIGHT LPAR RPAR .)
    PRINT           reduce using rule 85 (turnright -> TURNRIGHT LPAR RPAR .)
    LIST            reduce using rule 85 (turnright -> TURNRIGHT LPAR RPAR .)
    MOVE            reduce using rule 85 (turnright -> TURNRIGHT LPAR RPAR .)
    EAT             reduce using rule 85 (turnright -> TURNRIGHT LPAR RPAR .)
    CLEAN           reduce using rule 85 (turnright -> TURNRIGHT LPAR RPAR .)
    PLAY            reduce using rule 85 (turnright -> TURNRIGHT LPAR RPAR .)
    TURNLEFT        reduce using rule 85 (turnright -> TURNRIGHT LPAR RPAR .)
    TURNRIGHT       reduce using rule 85 (turnright -> TURNRIGHT LPAR RPAR .)
    RBRACKET        reduce using rule 85 (turnright -> TURNRIGHT LPAR RPAR .)


state 112

    (79) clean -> CLEAN LPAR ID . RPAR

    RPAR            shift and go to state 129


state 113

    (45) exp -> termino termino_val COMPARISON op_val . exp
    (40) exp -> . termino termino_val
    (41) exp -> . termino termino_val PLUS op_val exp
    (42) exp -> . termino termino_val MINUS op_val exp
    (43) exp -> . termino termino_val MULTIPLY op_val exp
    (44) exp -> . termino termino_val DIVIDE op_val exp
    (45) exp -> . termino termino_val COMPARISON op_val exp
    (48) termino -> . LPAR expression RPAR
    (49) termino -> . MINUS varcte
    (50) termino -> . varcte
    (51) varcte -> . ID
    (52) varcte -> . NUMINT
    (53) varcte -> . NUMFLOAT
    (54) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 44

    varcte                         shift and go to state 40
    termino                        shift and go to state 42
    exp                            shift and go to state 130

state 114

    (44) exp -> termino termino_val DIVIDE op_val . exp
    (40) exp -> . termino termino_val
    (41) exp -> . termino termino_val PLUS op_val exp
    (42) exp -> . termino termino_val MINUS op_val exp
    (43) exp -> . termino termino_val MULTIPLY op_val exp
    (44) exp -> . termino termino_val DIVIDE op_val exp
    (45) exp -> . termino termino_val COMPARISON op_val exp
    (48) termino -> . LPAR expression RPAR
    (49) termino -> . MINUS varcte
    (50) termino -> . varcte
    (51) varcte -> . ID
    (52) varcte -> . NUMINT
    (53) varcte -> . NUMFLOAT
    (54) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 44

    varcte                         shift and go to state 40
    termino                        shift and go to state 42
    exp                            shift and go to state 131

state 115

    (41) exp -> termino termino_val PLUS op_val . exp
    (40) exp -> . termino termino_val
    (41) exp -> . termino termino_val PLUS op_val exp
    (42) exp -> . termino termino_val MINUS op_val exp
    (43) exp -> . termino termino_val MULTIPLY op_val exp
    (44) exp -> . termino termino_val DIVIDE op_val exp
    (45) exp -> . termino termino_val COMPARISON op_val exp
    (48) termino -> . LPAR expression RPAR
    (49) termino -> . MINUS varcte
    (50) termino -> . varcte
    (51) varcte -> . ID
    (52) varcte -> . NUMINT
    (53) varcte -> . NUMFLOAT
    (54) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 44

    varcte                         shift and go to state 40
    termino                        shift and go to state 42
    exp                            shift and go to state 132

state 116

    (43) exp -> termino termino_val MULTIPLY op_val . exp
    (40) exp -> . termino termino_val
    (41) exp -> . termino termino_val PLUS op_val exp
    (42) exp -> . termino termino_val MINUS op_val exp
    (43) exp -> . termino termino_val MULTIPLY op_val exp
    (44) exp -> . termino termino_val DIVIDE op_val exp
    (45) exp -> . termino termino_val COMPARISON op_val exp
    (48) termino -> . LPAR expression RPAR
    (49) termino -> . MINUS varcte
    (50) termino -> . varcte
    (51) varcte -> . ID
    (52) varcte -> . NUMINT
    (53) varcte -> . NUMFLOAT
    (54) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 44

    varcte                         shift and go to state 40
    termino                        shift and go to state 42
    exp                            shift and go to state 133

state 117

    (42) exp -> termino termino_val MINUS op_val . exp
    (40) exp -> . termino termino_val
    (41) exp -> . termino termino_val PLUS op_val exp
    (42) exp -> . termino termino_val MINUS op_val exp
    (43) exp -> . termino termino_val MULTIPLY op_val exp
    (44) exp -> . termino termino_val DIVIDE op_val exp
    (45) exp -> . termino termino_val COMPARISON op_val exp
    (48) termino -> . LPAR expression RPAR
    (49) termino -> . MINUS varcte
    (50) termino -> . varcte
    (51) varcte -> . ID
    (52) varcte -> . NUMINT
    (53) varcte -> . NUMFLOAT
    (54) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 44

    varcte                         shift and go to state 40
    termino                        shift and go to state 42
    exp                            shift and go to state 134

state 118

    (60) cycle -> WHILE cycle_1 LPAR exp . RPAR cycle_2 block cycle_3

    RPAR            shift and go to state 135


state 119

    (59) printx -> STRING COMA . printx
    (56) printx -> . expression
    (57) printx -> . STRING
    (58) printx -> . expression COMA printx
    (59) printx -> . STRING COMA printx
    (39) expression -> . exp
    (40) exp -> . termino termino_val
    (41) exp -> . termino termino_val PLUS op_val exp
    (42) exp -> . termino termino_val MINUS op_val exp
    (43) exp -> . termino termino_val MULTIPLY op_val exp
    (44) exp -> . termino termino_val DIVIDE op_val exp
    (45) exp -> . termino termino_val COMPARISON op_val exp
    (48) termino -> . LPAR expression RPAR
    (49) termino -> . MINUS varcte
    (50) termino -> . varcte
    (51) varcte -> . ID
    (52) varcte -> . NUMINT
    (53) varcte -> . NUMFLOAT
    (54) varcte -> . BOOLEANTYPE

    STRING          shift and go to state 100
    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 44

    varcte                         shift and go to state 40
    printx                         shift and go to state 136
    termino                        shift and go to state 42
    exp                            shift and go to state 43
    expression                     shift and go to state 102

state 120

    (55) print -> PRINT LPAR printx RPAR .

    INT             reduce using rule 55 (print -> PRINT LPAR printx RPAR .)
    FLOAT           reduce using rule 55 (print -> PRINT LPAR printx RPAR .)
    BOOLEAN         reduce using rule 55 (print -> PRINT LPAR printx RPAR .)
    ID              reduce using rule 55 (print -> PRINT LPAR printx RPAR .)
    IF              reduce using rule 55 (print -> PRINT LPAR printx RPAR .)
    WHILE           reduce using rule 55 (print -> PRINT LPAR printx RPAR .)
    PRINT           reduce using rule 55 (print -> PRINT LPAR printx RPAR .)
    LIST            reduce using rule 55 (print -> PRINT LPAR printx RPAR .)
    MOVE            reduce using rule 55 (print -> PRINT LPAR printx RPAR .)
    EAT             reduce using rule 55 (print -> PRINT LPAR printx RPAR .)
    CLEAN           reduce using rule 55 (print -> PRINT LPAR printx RPAR .)
    PLAY            reduce using rule 55 (print -> PRINT LPAR printx RPAR .)
    TURNLEFT        reduce using rule 55 (print -> PRINT LPAR printx RPAR .)
    TURNRIGHT       reduce using rule 55 (print -> PRINT LPAR printx RPAR .)
    RBRACKET        reduce using rule 55 (print -> PRINT LPAR printx RPAR .)


state 121

    (58) printx -> expression COMA . printx
    (56) printx -> . expression
    (57) printx -> . STRING
    (58) printx -> . expression COMA printx
    (59) printx -> . STRING COMA printx
    (39) expression -> . exp
    (40) exp -> . termino termino_val
    (41) exp -> . termino termino_val PLUS op_val exp
    (42) exp -> . termino termino_val MINUS op_val exp
    (43) exp -> . termino termino_val MULTIPLY op_val exp
    (44) exp -> . termino termino_val DIVIDE op_val exp
    (45) exp -> . termino termino_val COMPARISON op_val exp
    (48) termino -> . LPAR expression RPAR
    (49) termino -> . MINUS varcte
    (50) termino -> . varcte
    (51) varcte -> . ID
    (52) varcte -> . NUMINT
    (53) varcte -> . NUMFLOAT
    (54) varcte -> . BOOLEANTYPE

    STRING          shift and go to state 100
    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 44

    varcte                         shift and go to state 40
    printx                         shift and go to state 137
    termino                        shift and go to state 42
    exp                            shift and go to state 43
    expression                     shift and go to state 102

state 122

    (70) list -> LIST ID EQUAL LBRACKET . listx RBRACKET
    (71) listx -> . ID
    (72) listx -> . NUMINT
    (73) listx -> . ID COMA listx
    (74) listx -> . NUMINT COMA listx

    ID              shift and go to state 140
    NUMINT          shift and go to state 139

    listx                          shift and go to state 138

state 123

    (76) call -> ID LPAR ID RPAR .

    INT             reduce using rule 76 (call -> ID LPAR ID RPAR .)
    FLOAT           reduce using rule 76 (call -> ID LPAR ID RPAR .)
    BOOLEAN         reduce using rule 76 (call -> ID LPAR ID RPAR .)
    ID              reduce using rule 76 (call -> ID LPAR ID RPAR .)
    IF              reduce using rule 76 (call -> ID LPAR ID RPAR .)
    WHILE           reduce using rule 76 (call -> ID LPAR ID RPAR .)
    PRINT           reduce using rule 76 (call -> ID LPAR ID RPAR .)
    LIST            reduce using rule 76 (call -> ID LPAR ID RPAR .)
    MOVE            reduce using rule 76 (call -> ID LPAR ID RPAR .)
    EAT             reduce using rule 76 (call -> ID LPAR ID RPAR .)
    CLEAN           reduce using rule 76 (call -> ID LPAR ID RPAR .)
    PLAY            reduce using rule 76 (call -> ID LPAR ID RPAR .)
    TURNLEFT        reduce using rule 76 (call -> ID LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 76 (call -> ID LPAR ID RPAR .)
    RBRACKET        reduce using rule 76 (call -> ID LPAR ID RPAR .)


state 124

    (81) add -> ID POINT ADD LPAR . CANDY RPAR
    (82) add -> ID POINT ADD LPAR . POOP RPAR
    (83) add -> ID POINT ADD LPAR . BALL RPAR

    CANDY           shift and go to state 143
    POOP            shift and go to state 141
    BALL            shift and go to state 142


state 125

    (64) condition -> IF LPAR exp RPAR . cond_1 block else cond_2
    (67) cond_1 -> .

    LBRACKET        reduce using rule 67 (cond_1 -> .)

    cond_1                         shift and go to state 144

state 126

    (78) eat -> EAT LPAR ID RPAR .

    INT             reduce using rule 78 (eat -> EAT LPAR ID RPAR .)
    FLOAT           reduce using rule 78 (eat -> EAT LPAR ID RPAR .)
    BOOLEAN         reduce using rule 78 (eat -> EAT LPAR ID RPAR .)
    ID              reduce using rule 78 (eat -> EAT LPAR ID RPAR .)
    IF              reduce using rule 78 (eat -> EAT LPAR ID RPAR .)
    WHILE           reduce using rule 78 (eat -> EAT LPAR ID RPAR .)
    PRINT           reduce using rule 78 (eat -> EAT LPAR ID RPAR .)
    LIST            reduce using rule 78 (eat -> EAT LPAR ID RPAR .)
    MOVE            reduce using rule 78 (eat -> EAT LPAR ID RPAR .)
    EAT             reduce using rule 78 (eat -> EAT LPAR ID RPAR .)
    CLEAN           reduce using rule 78 (eat -> EAT LPAR ID RPAR .)
    PLAY            reduce using rule 78 (eat -> EAT LPAR ID RPAR .)
    TURNLEFT        reduce using rule 78 (eat -> EAT LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 78 (eat -> EAT LPAR ID RPAR .)
    RBRACKET        reduce using rule 78 (eat -> EAT LPAR ID RPAR .)


state 127

    (80) play -> PLAY LPAR ID RPAR .

    INT             reduce using rule 80 (play -> PLAY LPAR ID RPAR .)
    FLOAT           reduce using rule 80 (play -> PLAY LPAR ID RPAR .)
    BOOLEAN         reduce using rule 80 (play -> PLAY LPAR ID RPAR .)
    ID              reduce using rule 80 (play -> PLAY LPAR ID RPAR .)
    IF              reduce using rule 80 (play -> PLAY LPAR ID RPAR .)
    WHILE           reduce using rule 80 (play -> PLAY LPAR ID RPAR .)
    PRINT           reduce using rule 80 (play -> PLAY LPAR ID RPAR .)
    LIST            reduce using rule 80 (play -> PLAY LPAR ID RPAR .)
    MOVE            reduce using rule 80 (play -> PLAY LPAR ID RPAR .)
    EAT             reduce using rule 80 (play -> PLAY LPAR ID RPAR .)
    CLEAN           reduce using rule 80 (play -> PLAY LPAR ID RPAR .)
    PLAY            reduce using rule 80 (play -> PLAY LPAR ID RPAR .)
    TURNLEFT        reduce using rule 80 (play -> PLAY LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 80 (play -> PLAY LPAR ID RPAR .)
    RBRACKET        reduce using rule 80 (play -> PLAY LPAR ID RPAR .)


state 128

    (77) move -> MOVE LPAR ID RPAR .

    INT             reduce using rule 77 (move -> MOVE LPAR ID RPAR .)
    FLOAT           reduce using rule 77 (move -> MOVE LPAR ID RPAR .)
    BOOLEAN         reduce using rule 77 (move -> MOVE LPAR ID RPAR .)
    ID              reduce using rule 77 (move -> MOVE LPAR ID RPAR .)
    IF              reduce using rule 77 (move -> MOVE LPAR ID RPAR .)
    WHILE           reduce using rule 77 (move -> MOVE LPAR ID RPAR .)
    PRINT           reduce using rule 77 (move -> MOVE LPAR ID RPAR .)
    LIST            reduce using rule 77 (move -> MOVE LPAR ID RPAR .)
    MOVE            reduce using rule 77 (move -> MOVE LPAR ID RPAR .)
    EAT             reduce using rule 77 (move -> MOVE LPAR ID RPAR .)
    CLEAN           reduce using rule 77 (move -> MOVE LPAR ID RPAR .)
    PLAY            reduce using rule 77 (move -> MOVE LPAR ID RPAR .)
    TURNLEFT        reduce using rule 77 (move -> MOVE LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 77 (move -> MOVE LPAR ID RPAR .)
    RBRACKET        reduce using rule 77 (move -> MOVE LPAR ID RPAR .)


state 129

    (79) clean -> CLEAN LPAR ID RPAR .

    INT             reduce using rule 79 (clean -> CLEAN LPAR ID RPAR .)
    FLOAT           reduce using rule 79 (clean -> CLEAN LPAR ID RPAR .)
    BOOLEAN         reduce using rule 79 (clean -> CLEAN LPAR ID RPAR .)
    ID              reduce using rule 79 (clean -> CLEAN LPAR ID RPAR .)
    IF              reduce using rule 79 (clean -> CLEAN LPAR ID RPAR .)
    WHILE           reduce using rule 79 (clean -> CLEAN LPAR ID RPAR .)
    PRINT           reduce using rule 79 (clean -> CLEAN LPAR ID RPAR .)
    LIST            reduce using rule 79 (clean -> CLEAN LPAR ID RPAR .)
    MOVE            reduce using rule 79 (clean -> CLEAN LPAR ID RPAR .)
    EAT             reduce using rule 79 (clean -> CLEAN LPAR ID RPAR .)
    CLEAN           reduce using rule 79 (clean -> CLEAN LPAR ID RPAR .)
    PLAY            reduce using rule 79 (clean -> CLEAN LPAR ID RPAR .)
    TURNLEFT        reduce using rule 79 (clean -> CLEAN LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 79 (clean -> CLEAN LPAR ID RPAR .)
    RBRACKET        reduce using rule 79 (clean -> CLEAN LPAR ID RPAR .)


state 130

    (45) exp -> termino termino_val COMPARISON op_val exp .

    ID              reduce using rule 45 (exp -> termino termino_val COMPARISON op_val exp .)
    FUNC            reduce using rule 45 (exp -> termino termino_val COMPARISON op_val exp .)
    $end            reduce using rule 45 (exp -> termino termino_val COMPARISON op_val exp .)
    INT             reduce using rule 45 (exp -> termino termino_val COMPARISON op_val exp .)
    FLOAT           reduce using rule 45 (exp -> termino termino_val COMPARISON op_val exp .)
    BOOLEAN         reduce using rule 45 (exp -> termino termino_val COMPARISON op_val exp .)
    IF              reduce using rule 45 (exp -> termino termino_val COMPARISON op_val exp .)
    WHILE           reduce using rule 45 (exp -> termino termino_val COMPARISON op_val exp .)
    PRINT           reduce using rule 45 (exp -> termino termino_val COMPARISON op_val exp .)
    LIST            reduce using rule 45 (exp -> termino termino_val COMPARISON op_val exp .)
    MOVE            reduce using rule 45 (exp -> termino termino_val COMPARISON op_val exp .)
    EAT             reduce using rule 45 (exp -> termino termino_val COMPARISON op_val exp .)
    CLEAN           reduce using rule 45 (exp -> termino termino_val COMPARISON op_val exp .)
    PLAY            reduce using rule 45 (exp -> termino termino_val COMPARISON op_val exp .)
    TURNLEFT        reduce using rule 45 (exp -> termino termino_val COMPARISON op_val exp .)
    TURNRIGHT       reduce using rule 45 (exp -> termino termino_val COMPARISON op_val exp .)
    RBRACKET        reduce using rule 45 (exp -> termino termino_val COMPARISON op_val exp .)
    RPAR            reduce using rule 45 (exp -> termino termino_val COMPARISON op_val exp .)
    COMA            reduce using rule 45 (exp -> termino termino_val COMPARISON op_val exp .)


state 131

    (44) exp -> termino termino_val DIVIDE op_val exp .

    ID              reduce using rule 44 (exp -> termino termino_val DIVIDE op_val exp .)
    FUNC            reduce using rule 44 (exp -> termino termino_val DIVIDE op_val exp .)
    $end            reduce using rule 44 (exp -> termino termino_val DIVIDE op_val exp .)
    INT             reduce using rule 44 (exp -> termino termino_val DIVIDE op_val exp .)
    FLOAT           reduce using rule 44 (exp -> termino termino_val DIVIDE op_val exp .)
    BOOLEAN         reduce using rule 44 (exp -> termino termino_val DIVIDE op_val exp .)
    IF              reduce using rule 44 (exp -> termino termino_val DIVIDE op_val exp .)
    WHILE           reduce using rule 44 (exp -> termino termino_val DIVIDE op_val exp .)
    PRINT           reduce using rule 44 (exp -> termino termino_val DIVIDE op_val exp .)
    LIST            reduce using rule 44 (exp -> termino termino_val DIVIDE op_val exp .)
    MOVE            reduce using rule 44 (exp -> termino termino_val DIVIDE op_val exp .)
    EAT             reduce using rule 44 (exp -> termino termino_val DIVIDE op_val exp .)
    CLEAN           reduce using rule 44 (exp -> termino termino_val DIVIDE op_val exp .)
    PLAY            reduce using rule 44 (exp -> termino termino_val DIVIDE op_val exp .)
    TURNLEFT        reduce using rule 44 (exp -> termino termino_val DIVIDE op_val exp .)
    TURNRIGHT       reduce using rule 44 (exp -> termino termino_val DIVIDE op_val exp .)
    RBRACKET        reduce using rule 44 (exp -> termino termino_val DIVIDE op_val exp .)
    RPAR            reduce using rule 44 (exp -> termino termino_val DIVIDE op_val exp .)
    COMA            reduce using rule 44 (exp -> termino termino_val DIVIDE op_val exp .)


state 132

    (41) exp -> termino termino_val PLUS op_val exp .

    ID              reduce using rule 41 (exp -> termino termino_val PLUS op_val exp .)
    FUNC            reduce using rule 41 (exp -> termino termino_val PLUS op_val exp .)
    $end            reduce using rule 41 (exp -> termino termino_val PLUS op_val exp .)
    INT             reduce using rule 41 (exp -> termino termino_val PLUS op_val exp .)
    FLOAT           reduce using rule 41 (exp -> termino termino_val PLUS op_val exp .)
    BOOLEAN         reduce using rule 41 (exp -> termino termino_val PLUS op_val exp .)
    IF              reduce using rule 41 (exp -> termino termino_val PLUS op_val exp .)
    WHILE           reduce using rule 41 (exp -> termino termino_val PLUS op_val exp .)
    PRINT           reduce using rule 41 (exp -> termino termino_val PLUS op_val exp .)
    LIST            reduce using rule 41 (exp -> termino termino_val PLUS op_val exp .)
    MOVE            reduce using rule 41 (exp -> termino termino_val PLUS op_val exp .)
    EAT             reduce using rule 41 (exp -> termino termino_val PLUS op_val exp .)
    CLEAN           reduce using rule 41 (exp -> termino termino_val PLUS op_val exp .)
    PLAY            reduce using rule 41 (exp -> termino termino_val PLUS op_val exp .)
    TURNLEFT        reduce using rule 41 (exp -> termino termino_val PLUS op_val exp .)
    TURNRIGHT       reduce using rule 41 (exp -> termino termino_val PLUS op_val exp .)
    RBRACKET        reduce using rule 41 (exp -> termino termino_val PLUS op_val exp .)
    RPAR            reduce using rule 41 (exp -> termino termino_val PLUS op_val exp .)
    COMA            reduce using rule 41 (exp -> termino termino_val PLUS op_val exp .)


state 133

    (43) exp -> termino termino_val MULTIPLY op_val exp .

    ID              reduce using rule 43 (exp -> termino termino_val MULTIPLY op_val exp .)
    FUNC            reduce using rule 43 (exp -> termino termino_val MULTIPLY op_val exp .)
    $end            reduce using rule 43 (exp -> termino termino_val MULTIPLY op_val exp .)
    INT             reduce using rule 43 (exp -> termino termino_val MULTIPLY op_val exp .)
    FLOAT           reduce using rule 43 (exp -> termino termino_val MULTIPLY op_val exp .)
    BOOLEAN         reduce using rule 43 (exp -> termino termino_val MULTIPLY op_val exp .)
    IF              reduce using rule 43 (exp -> termino termino_val MULTIPLY op_val exp .)
    WHILE           reduce using rule 43 (exp -> termino termino_val MULTIPLY op_val exp .)
    PRINT           reduce using rule 43 (exp -> termino termino_val MULTIPLY op_val exp .)
    LIST            reduce using rule 43 (exp -> termino termino_val MULTIPLY op_val exp .)
    MOVE            reduce using rule 43 (exp -> termino termino_val MULTIPLY op_val exp .)
    EAT             reduce using rule 43 (exp -> termino termino_val MULTIPLY op_val exp .)
    CLEAN           reduce using rule 43 (exp -> termino termino_val MULTIPLY op_val exp .)
    PLAY            reduce using rule 43 (exp -> termino termino_val MULTIPLY op_val exp .)
    TURNLEFT        reduce using rule 43 (exp -> termino termino_val MULTIPLY op_val exp .)
    TURNRIGHT       reduce using rule 43 (exp -> termino termino_val MULTIPLY op_val exp .)
    RBRACKET        reduce using rule 43 (exp -> termino termino_val MULTIPLY op_val exp .)
    RPAR            reduce using rule 43 (exp -> termino termino_val MULTIPLY op_val exp .)
    COMA            reduce using rule 43 (exp -> termino termino_val MULTIPLY op_val exp .)


state 134

    (42) exp -> termino termino_val MINUS op_val exp .

    ID              reduce using rule 42 (exp -> termino termino_val MINUS op_val exp .)
    FUNC            reduce using rule 42 (exp -> termino termino_val MINUS op_val exp .)
    $end            reduce using rule 42 (exp -> termino termino_val MINUS op_val exp .)
    INT             reduce using rule 42 (exp -> termino termino_val MINUS op_val exp .)
    FLOAT           reduce using rule 42 (exp -> termino termino_val MINUS op_val exp .)
    BOOLEAN         reduce using rule 42 (exp -> termino termino_val MINUS op_val exp .)
    IF              reduce using rule 42 (exp -> termino termino_val MINUS op_val exp .)
    WHILE           reduce using rule 42 (exp -> termino termino_val MINUS op_val exp .)
    PRINT           reduce using rule 42 (exp -> termino termino_val MINUS op_val exp .)
    LIST            reduce using rule 42 (exp -> termino termino_val MINUS op_val exp .)
    MOVE            reduce using rule 42 (exp -> termino termino_val MINUS op_val exp .)
    EAT             reduce using rule 42 (exp -> termino termino_val MINUS op_val exp .)
    CLEAN           reduce using rule 42 (exp -> termino termino_val MINUS op_val exp .)
    PLAY            reduce using rule 42 (exp -> termino termino_val MINUS op_val exp .)
    TURNLEFT        reduce using rule 42 (exp -> termino termino_val MINUS op_val exp .)
    TURNRIGHT       reduce using rule 42 (exp -> termino termino_val MINUS op_val exp .)
    RBRACKET        reduce using rule 42 (exp -> termino termino_val MINUS op_val exp .)
    RPAR            reduce using rule 42 (exp -> termino termino_val MINUS op_val exp .)
    COMA            reduce using rule 42 (exp -> termino termino_val MINUS op_val exp .)


state 135

    (60) cycle -> WHILE cycle_1 LPAR exp RPAR . cycle_2 block cycle_3
    (62) cycle_2 -> .

    LBRACKET        reduce using rule 62 (cycle_2 -> .)

    cycle_2                        shift and go to state 145

state 136

    (59) printx -> STRING COMA printx .

    RPAR            reduce using rule 59 (printx -> STRING COMA printx .)


state 137

    (58) printx -> expression COMA printx .

    RPAR            reduce using rule 58 (printx -> expression COMA printx .)


state 138

    (70) list -> LIST ID EQUAL LBRACKET listx . RBRACKET

    RBRACKET        shift and go to state 146


state 139

    (72) listx -> NUMINT .
    (74) listx -> NUMINT . COMA listx

    RBRACKET        reduce using rule 72 (listx -> NUMINT .)
    COMA            shift and go to state 147


state 140

    (71) listx -> ID .
    (73) listx -> ID . COMA listx

    RBRACKET        reduce using rule 71 (listx -> ID .)
    COMA            shift and go to state 148


state 141

    (82) add -> ID POINT ADD LPAR POOP . RPAR

    RPAR            shift and go to state 149


state 142

    (83) add -> ID POINT ADD LPAR BALL . RPAR

    RPAR            shift and go to state 150


state 143

    (81) add -> ID POINT ADD LPAR CANDY . RPAR

    RPAR            shift and go to state 151


state 144

    (64) condition -> IF LPAR exp RPAR cond_1 . block else cond_2
    (13) block -> . LBRACKET blockx RBRACKET

    LBRACKET        shift and go to state 35

    block                          shift and go to state 152

state 145

    (60) cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 . block cycle_3
    (13) block -> . LBRACKET blockx RBRACKET

    LBRACKET        shift and go to state 35

    block                          shift and go to state 153

state 146

    (70) list -> LIST ID EQUAL LBRACKET listx RBRACKET .

    INT             reduce using rule 70 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    FLOAT           reduce using rule 70 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    BOOLEAN         reduce using rule 70 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    ID              reduce using rule 70 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    IF              reduce using rule 70 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    WHILE           reduce using rule 70 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    PRINT           reduce using rule 70 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    LIST            reduce using rule 70 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    MOVE            reduce using rule 70 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    EAT             reduce using rule 70 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    CLEAN           reduce using rule 70 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    PLAY            reduce using rule 70 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    TURNLEFT        reduce using rule 70 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    TURNRIGHT       reduce using rule 70 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    RBRACKET        reduce using rule 70 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)


state 147

    (74) listx -> NUMINT COMA . listx
    (71) listx -> . ID
    (72) listx -> . NUMINT
    (73) listx -> . ID COMA listx
    (74) listx -> . NUMINT COMA listx

    ID              shift and go to state 140
    NUMINT          shift and go to state 139

    listx                          shift and go to state 154

state 148

    (73) listx -> ID COMA . listx
    (71) listx -> . ID
    (72) listx -> . NUMINT
    (73) listx -> . ID COMA listx
    (74) listx -> . NUMINT COMA listx

    ID              shift and go to state 140
    NUMINT          shift and go to state 139

    listx                          shift and go to state 155

state 149

    (82) add -> ID POINT ADD LPAR POOP RPAR .

    INT             reduce using rule 82 (add -> ID POINT ADD LPAR POOP RPAR .)
    FLOAT           reduce using rule 82 (add -> ID POINT ADD LPAR POOP RPAR .)
    BOOLEAN         reduce using rule 82 (add -> ID POINT ADD LPAR POOP RPAR .)
    ID              reduce using rule 82 (add -> ID POINT ADD LPAR POOP RPAR .)
    IF              reduce using rule 82 (add -> ID POINT ADD LPAR POOP RPAR .)
    WHILE           reduce using rule 82 (add -> ID POINT ADD LPAR POOP RPAR .)
    PRINT           reduce using rule 82 (add -> ID POINT ADD LPAR POOP RPAR .)
    LIST            reduce using rule 82 (add -> ID POINT ADD LPAR POOP RPAR .)
    MOVE            reduce using rule 82 (add -> ID POINT ADD LPAR POOP RPAR .)
    EAT             reduce using rule 82 (add -> ID POINT ADD LPAR POOP RPAR .)
    CLEAN           reduce using rule 82 (add -> ID POINT ADD LPAR POOP RPAR .)
    PLAY            reduce using rule 82 (add -> ID POINT ADD LPAR POOP RPAR .)
    TURNLEFT        reduce using rule 82 (add -> ID POINT ADD LPAR POOP RPAR .)
    TURNRIGHT       reduce using rule 82 (add -> ID POINT ADD LPAR POOP RPAR .)
    RBRACKET        reduce using rule 82 (add -> ID POINT ADD LPAR POOP RPAR .)


state 150

    (83) add -> ID POINT ADD LPAR BALL RPAR .

    INT             reduce using rule 83 (add -> ID POINT ADD LPAR BALL RPAR .)
    FLOAT           reduce using rule 83 (add -> ID POINT ADD LPAR BALL RPAR .)
    BOOLEAN         reduce using rule 83 (add -> ID POINT ADD LPAR BALL RPAR .)
    ID              reduce using rule 83 (add -> ID POINT ADD LPAR BALL RPAR .)
    IF              reduce using rule 83 (add -> ID POINT ADD LPAR BALL RPAR .)
    WHILE           reduce using rule 83 (add -> ID POINT ADD LPAR BALL RPAR .)
    PRINT           reduce using rule 83 (add -> ID POINT ADD LPAR BALL RPAR .)
    LIST            reduce using rule 83 (add -> ID POINT ADD LPAR BALL RPAR .)
    MOVE            reduce using rule 83 (add -> ID POINT ADD LPAR BALL RPAR .)
    EAT             reduce using rule 83 (add -> ID POINT ADD LPAR BALL RPAR .)
    CLEAN           reduce using rule 83 (add -> ID POINT ADD LPAR BALL RPAR .)
    PLAY            reduce using rule 83 (add -> ID POINT ADD LPAR BALL RPAR .)
    TURNLEFT        reduce using rule 83 (add -> ID POINT ADD LPAR BALL RPAR .)
    TURNRIGHT       reduce using rule 83 (add -> ID POINT ADD LPAR BALL RPAR .)
    RBRACKET        reduce using rule 83 (add -> ID POINT ADD LPAR BALL RPAR .)


state 151

    (81) add -> ID POINT ADD LPAR CANDY RPAR .

    INT             reduce using rule 81 (add -> ID POINT ADD LPAR CANDY RPAR .)
    FLOAT           reduce using rule 81 (add -> ID POINT ADD LPAR CANDY RPAR .)
    BOOLEAN         reduce using rule 81 (add -> ID POINT ADD LPAR CANDY RPAR .)
    ID              reduce using rule 81 (add -> ID POINT ADD LPAR CANDY RPAR .)
    IF              reduce using rule 81 (add -> ID POINT ADD LPAR CANDY RPAR .)
    WHILE           reduce using rule 81 (add -> ID POINT ADD LPAR CANDY RPAR .)
    PRINT           reduce using rule 81 (add -> ID POINT ADD LPAR CANDY RPAR .)
    LIST            reduce using rule 81 (add -> ID POINT ADD LPAR CANDY RPAR .)
    MOVE            reduce using rule 81 (add -> ID POINT ADD LPAR CANDY RPAR .)
    EAT             reduce using rule 81 (add -> ID POINT ADD LPAR CANDY RPAR .)
    CLEAN           reduce using rule 81 (add -> ID POINT ADD LPAR CANDY RPAR .)
    PLAY            reduce using rule 81 (add -> ID POINT ADD LPAR CANDY RPAR .)
    TURNLEFT        reduce using rule 81 (add -> ID POINT ADD LPAR CANDY RPAR .)
    TURNRIGHT       reduce using rule 81 (add -> ID POINT ADD LPAR CANDY RPAR .)
    RBRACKET        reduce using rule 81 (add -> ID POINT ADD LPAR CANDY RPAR .)


state 152

    (64) condition -> IF LPAR exp RPAR cond_1 block . else cond_2
    (65) else -> . ELSE cond_else block
    (66) else -> . empty
    (86) empty -> .

    ELSE            shift and go to state 156
    INT             reduce using rule 86 (empty -> .)
    FLOAT           reduce using rule 86 (empty -> .)
    BOOLEAN         reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    IF              reduce using rule 86 (empty -> .)
    WHILE           reduce using rule 86 (empty -> .)
    PRINT           reduce using rule 86 (empty -> .)
    LIST            reduce using rule 86 (empty -> .)
    MOVE            reduce using rule 86 (empty -> .)
    EAT             reduce using rule 86 (empty -> .)
    CLEAN           reduce using rule 86 (empty -> .)
    PLAY            reduce using rule 86 (empty -> .)
    TURNLEFT        reduce using rule 86 (empty -> .)
    TURNRIGHT       reduce using rule 86 (empty -> .)
    RBRACKET        reduce using rule 86 (empty -> .)

    else                           shift and go to state 158
    empty                          shift and go to state 157

state 153

    (60) cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block . cycle_3
    (63) cycle_3 -> .

    INT             reduce using rule 63 (cycle_3 -> .)
    FLOAT           reduce using rule 63 (cycle_3 -> .)
    BOOLEAN         reduce using rule 63 (cycle_3 -> .)
    ID              reduce using rule 63 (cycle_3 -> .)
    IF              reduce using rule 63 (cycle_3 -> .)
    WHILE           reduce using rule 63 (cycle_3 -> .)
    PRINT           reduce using rule 63 (cycle_3 -> .)
    LIST            reduce using rule 63 (cycle_3 -> .)
    MOVE            reduce using rule 63 (cycle_3 -> .)
    EAT             reduce using rule 63 (cycle_3 -> .)
    CLEAN           reduce using rule 63 (cycle_3 -> .)
    PLAY            reduce using rule 63 (cycle_3 -> .)
    TURNLEFT        reduce using rule 63 (cycle_3 -> .)
    TURNRIGHT       reduce using rule 63 (cycle_3 -> .)
    RBRACKET        reduce using rule 63 (cycle_3 -> .)

    cycle_3                        shift and go to state 159

state 154

    (74) listx -> NUMINT COMA listx .

    RBRACKET        reduce using rule 74 (listx -> NUMINT COMA listx .)


state 155

    (73) listx -> ID COMA listx .

    RBRACKET        reduce using rule 73 (listx -> ID COMA listx .)


state 156

    (65) else -> ELSE . cond_else block
    (69) cond_else -> .

    LBRACKET        reduce using rule 69 (cond_else -> .)

    cond_else                      shift and go to state 160

state 157

    (66) else -> empty .

    INT             reduce using rule 66 (else -> empty .)
    FLOAT           reduce using rule 66 (else -> empty .)
    BOOLEAN         reduce using rule 66 (else -> empty .)
    ID              reduce using rule 66 (else -> empty .)
    IF              reduce using rule 66 (else -> empty .)
    WHILE           reduce using rule 66 (else -> empty .)
    PRINT           reduce using rule 66 (else -> empty .)
    LIST            reduce using rule 66 (else -> empty .)
    MOVE            reduce using rule 66 (else -> empty .)
    EAT             reduce using rule 66 (else -> empty .)
    CLEAN           reduce using rule 66 (else -> empty .)
    PLAY            reduce using rule 66 (else -> empty .)
    TURNLEFT        reduce using rule 66 (else -> empty .)
    TURNRIGHT       reduce using rule 66 (else -> empty .)
    RBRACKET        reduce using rule 66 (else -> empty .)


state 158

    (64) condition -> IF LPAR exp RPAR cond_1 block else . cond_2
    (68) cond_2 -> .

    INT             reduce using rule 68 (cond_2 -> .)
    FLOAT           reduce using rule 68 (cond_2 -> .)
    BOOLEAN         reduce using rule 68 (cond_2 -> .)
    ID              reduce using rule 68 (cond_2 -> .)
    IF              reduce using rule 68 (cond_2 -> .)
    WHILE           reduce using rule 68 (cond_2 -> .)
    PRINT           reduce using rule 68 (cond_2 -> .)
    LIST            reduce using rule 68 (cond_2 -> .)
    MOVE            reduce using rule 68 (cond_2 -> .)
    EAT             reduce using rule 68 (cond_2 -> .)
    CLEAN           reduce using rule 68 (cond_2 -> .)
    PLAY            reduce using rule 68 (cond_2 -> .)
    TURNLEFT        reduce using rule 68 (cond_2 -> .)
    TURNRIGHT       reduce using rule 68 (cond_2 -> .)
    RBRACKET        reduce using rule 68 (cond_2 -> .)

    cond_2                         shift and go to state 161

state 159

    (60) cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .

    INT             reduce using rule 60 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    FLOAT           reduce using rule 60 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    BOOLEAN         reduce using rule 60 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    ID              reduce using rule 60 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    IF              reduce using rule 60 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    WHILE           reduce using rule 60 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    PRINT           reduce using rule 60 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    LIST            reduce using rule 60 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    MOVE            reduce using rule 60 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    EAT             reduce using rule 60 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    CLEAN           reduce using rule 60 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    PLAY            reduce using rule 60 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    TURNLEFT        reduce using rule 60 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    TURNRIGHT       reduce using rule 60 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    RBRACKET        reduce using rule 60 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)


state 160

    (65) else -> ELSE cond_else . block
    (13) block -> . LBRACKET blockx RBRACKET

    LBRACKET        shift and go to state 35

    block                          shift and go to state 162

state 161

    (64) condition -> IF LPAR exp RPAR cond_1 block else cond_2 .

    INT             reduce using rule 64 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    FLOAT           reduce using rule 64 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    BOOLEAN         reduce using rule 64 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    ID              reduce using rule 64 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    IF              reduce using rule 64 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    WHILE           reduce using rule 64 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    PRINT           reduce using rule 64 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    LIST            reduce using rule 64 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    MOVE            reduce using rule 64 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    EAT             reduce using rule 64 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    CLEAN           reduce using rule 64 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    PLAY            reduce using rule 64 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    TURNLEFT        reduce using rule 64 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    TURNRIGHT       reduce using rule 64 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    RBRACKET        reduce using rule 64 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)


state 162

    (65) else -> ELSE cond_else block .

    INT             reduce using rule 65 (else -> ELSE cond_else block .)
    FLOAT           reduce using rule 65 (else -> ELSE cond_else block .)
    BOOLEAN         reduce using rule 65 (else -> ELSE cond_else block .)
    ID              reduce using rule 65 (else -> ELSE cond_else block .)
    IF              reduce using rule 65 (else -> ELSE cond_else block .)
    WHILE           reduce using rule 65 (else -> ELSE cond_else block .)
    PRINT           reduce using rule 65 (else -> ELSE cond_else block .)
    LIST            reduce using rule 65 (else -> ELSE cond_else block .)
    MOVE            reduce using rule 65 (else -> ELSE cond_else block .)
    EAT             reduce using rule 65 (else -> ELSE cond_else block .)
    CLEAN           reduce using rule 65 (else -> ELSE cond_else block .)
    PLAY            reduce using rule 65 (else -> ELSE cond_else block .)
    TURNLEFT        reduce using rule 65 (else -> ELSE cond_else block .)
    TURNRIGHT       reduce using rule 65 (else -> ELSE cond_else block .)
    RBRACKET        reduce using rule 65 (else -> ELSE cond_else block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNC in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 6 resolved as shift
