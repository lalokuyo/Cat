Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    TRUE
    POOP
    SEMICOLON
    COLON
    BALL
    CANDY
    FALSE

Grammar

Rule 0     S' -> class
Rule 1     class -> vars_global init_vars func_list
Rule 2     class -> func class
Rule 3     vars_global -> varsGlobal vars_global
Rule 4     vars_global -> empty
Rule 5     init_vars -> asign init_vars
Rule 6     init_vars -> empty
Rule 7     func_list -> func func_list
Rule 8     func_list -> empty
Rule 9     func -> FUNC idCheck LPAR funcx RPAR block func_end
Rule 10    func_end -> <empty>
Rule 11    idCheck -> ID
Rule 12    funcx -> vars
Rule 13    funcx -> empty
Rule 14    block -> LCBRACKET blockx RCBRACKET
Rule 15    blockx -> vars
Rule 16    blockx -> vars blockx
Rule 17    blockx -> statement
Rule 18    blockx -> statement blockx
Rule 19    statement -> asign
Rule 20    statement -> condition
Rule 21    statement -> cycle
Rule 22    statement -> print
Rule 23    statement -> list
Rule 24    statement -> call
Rule 25    statement -> move
Rule 26    statement -> eat
Rule 27    statement -> clean
Rule 28    statement -> play
Rule 29    statement -> add
Rule 30    statement -> remove
Rule 31    statement -> turnleft
Rule 32    statement -> turnright
Rule 33    varsGlobal -> type ID
Rule 34    vars -> type ID
Rule 35    type -> INT
Rule 36    type -> FLOAT
Rule 37    type -> BOOLEAN
Rule 38    asign -> ID id_val EQUAL equal_val expression
Rule 39    id_val -> <empty>
Rule 40    equal_val -> <empty>
Rule 41    expression -> exp
Rule 42    expression -> exp termino_val COMPARISON op_val expression
Rule 43    exp -> termino
Rule 44    exp -> termino PLUS op_val exp
Rule 45    exp -> termino MINUS op_val exp
Rule 46    termino -> factor
Rule 47    termino -> factor MULTIPLY op_val termino
Rule 48    termino -> factor DIVIDE op_val termino
Rule 49    termino_val -> <empty>
Rule 50    op_val -> <empty>
Rule 51    factor -> LPAR expression RPAR
Rule 52    factor -> MINUS varcte
Rule 53    factor -> varcte termino_val
Rule 54    varcte -> ID
Rule 55    varcte -> NUMINT
Rule 56    varcte -> NUMFLOAT
Rule 57    varcte -> BOOLEANTYPE
Rule 58    print -> PRINT LPAR printx RPAR
Rule 59    printx -> expression
Rule 60    printx -> STRING
Rule 61    printx -> expression COMA printx
Rule 62    printx -> STRING COMA printx
Rule 63    cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3
Rule 64    cycle_1 -> <empty>
Rule 65    cycle_2 -> <empty>
Rule 66    cycle_3 -> <empty>
Rule 67    condition -> IF LPAR exp RPAR cond_1 block else cond_2
Rule 68    else -> ELSE cond_else block
Rule 69    else -> empty
Rule 70    cond_1 -> <empty>
Rule 71    cond_2 -> <empty>
Rule 72    cond_else -> <empty>
Rule 73    list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET
Rule 74    listx -> ID id_param
Rule 75    listx -> ID id_param COMA listx
Rule 76    listx -> NUMINT id_param
Rule 77    listx -> NUMINT id_param COMA listx
Rule 78    listx -> NUMFLOAT id_param
Rule 79    listx -> NUMFLOAT id_param COMA listx
Rule 80    idCheck_List -> ID
Rule 81    id_param -> <empty>
Rule 82    id_param2 -> <empty>
Rule 83    listx_add -> ID id_param2
Rule 84    listx_add -> NUMINT id_param2
Rule 85    listx_add -> NUMFLOAT id_param2
Rule 86    add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR
Rule 87    idCheck_Add -> <empty>
Rule 88    remove -> ID idCheck_Add POINT REMOVE LPAR RPAR
Rule 89    call -> ID id_call LPAR RPAR
Rule 90    call -> ID id_call LPAR par_call params RPAR
Rule 91    id_call -> <empty>
Rule 92    par_call -> <empty>
Rule 93    params -> expression COMA params
Rule 94    params -> ID COMA params
Rule 95    params -> expression
Rule 96    params -> ID
Rule 97    move -> MOVE LPAR ID RPAR
Rule 98    eat -> EAT LPAR ID RPAR
Rule 99    clean -> CLEAN LPAR ID RPAR
Rule 100   play -> PLAY LPAR ID RPAR
Rule 101   turnleft -> TURNLEFT LPAR RPAR
Rule 102   turnright -> TURNRIGHT LPAR RPAR
Rule 103   empty -> <empty>

Terminals, with rules where they appear

ADD                  : 86
BALL                 : 
BOOLEAN              : 37
BOOLEANTYPE          : 57
CANDY                : 
CLEAN                : 99
COLON                : 
COMA                 : 61 62 75 77 79 93 94
COMPARISON           : 42
DIVIDE               : 48
EAT                  : 98
ELSE                 : 68
EQUAL                : 38 73
FALSE                : 
FLOAT                : 36
FUNC                 : 9
ID                   : 11 33 34 38 54 74 75 80 83 86 88 89 90 94 96 97 98 99 100
IF                   : 67
INT                  : 35
LBRACKET             : 73
LCBRACKET            : 14
LIST                 : 73
LPAR                 : 9 51 58 63 67 86 88 89 90 97 98 99 100 101 102
MINUS                : 45 52
MOVE                 : 97
MULTIPLY             : 47
NUMFLOAT             : 56 78 79 85
NUMINT               : 55 76 77 84
PLAY                 : 100
PLUS                 : 44
POINT                : 86 88
POOP                 : 
PRINT                : 58
RBRACKET             : 73
RCBRACKET            : 14
REMOVE               : 88
RPAR                 : 9 51 58 63 67 86 88 89 90 97 98 99 100 101 102
SEMICOLON            : 
STRING               : 60 62
TRUE                 : 
TURNLEFT             : 101
TURNRIGHT            : 102
WHILE                : 63
error                : 

Nonterminals, with rules where they appear

add                  : 29
asign                : 5 19
block                : 9 63 67 68
blockx               : 14 16 18
call                 : 24
class                : 2 0
clean                : 27
cond_1               : 67
cond_2               : 67
cond_else            : 68
condition            : 20
cycle                : 21
cycle_1              : 63
cycle_2              : 63
cycle_3              : 63
eat                  : 26
else                 : 67
empty                : 4 6 8 13 69
equal_val            : 38
exp                  : 41 42 44 45 63 67
expression           : 38 42 51 59 61 93 95
factor               : 46 47 48
func                 : 2 7
func_end             : 9
func_list            : 1 7
funcx                : 9
idCheck              : 9
idCheck_Add          : 86 88
idCheck_List         : 73
id_call              : 89 90
id_param             : 74 75 76 77 78 79
id_param2            : 83 84 85
id_val               : 38
init_vars            : 1 5
list                 : 23
listx                : 73 75 77 79
listx_add            : 86
move                 : 25
op_val               : 42 44 45 47 48
par_call             : 90
params               : 90 93 94
play                 : 28
print                : 22
printx               : 58 61 62
remove               : 30
statement            : 17 18
termino              : 43 44 45 47 48
termino_val          : 42 53
turnleft             : 31
turnright            : 32
type                 : 33 34
varcte               : 52 53
vars                 : 12 15 16
varsGlobal           : 3
vars_global          : 1 3

Parsing method: LALR

state 0

    (0) S' -> . class
    (1) class -> . vars_global init_vars func_list
    (2) class -> . func class
    (3) vars_global -> . varsGlobal vars_global
    (4) vars_global -> . empty
    (9) func -> . FUNC idCheck LPAR funcx RPAR block func_end
    (33) varsGlobal -> . type ID
    (103) empty -> .
    (35) type -> . INT
    (36) type -> . FLOAT
    (37) type -> . BOOLEAN

  ! shift/reduce conflict for FUNC resolved as shift
    FUNC            shift and go to state 3
    ID              reduce using rule 103 (empty -> .)
    $end            reduce using rule 103 (empty -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5

  ! FUNC            [ reduce using rule 103 (empty -> .) ]

    varsGlobal                     shift and go to state 1
    func                           shift and go to state 6
    vars_global                    shift and go to state 7
    type                           shift and go to state 8
    class                          shift and go to state 9
    empty                          shift and go to state 10

state 1

    (3) vars_global -> varsGlobal . vars_global
    (3) vars_global -> . varsGlobal vars_global
    (4) vars_global -> . empty
    (33) varsGlobal -> . type ID
    (103) empty -> .
    (35) type -> . INT
    (36) type -> . FLOAT
    (37) type -> . BOOLEAN

    ID              reduce using rule 103 (empty -> .)
    FUNC            reduce using rule 103 (empty -> .)
    $end            reduce using rule 103 (empty -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5

    varsGlobal                     shift and go to state 1
    vars_global                    shift and go to state 11
    type                           shift and go to state 8
    empty                          shift and go to state 10

state 2

    (36) type -> FLOAT .

    ID              reduce using rule 36 (type -> FLOAT .)


state 3

    (9) func -> FUNC . idCheck LPAR funcx RPAR block func_end
    (11) idCheck -> . ID

    ID              shift and go to state 13

    idCheck                        shift and go to state 12

state 4

    (35) type -> INT .

    ID              reduce using rule 35 (type -> INT .)


state 5

    (37) type -> BOOLEAN .

    ID              reduce using rule 37 (type -> BOOLEAN .)


state 6

    (2) class -> func . class
    (1) class -> . vars_global init_vars func_list
    (2) class -> . func class
    (3) vars_global -> . varsGlobal vars_global
    (4) vars_global -> . empty
    (9) func -> . FUNC idCheck LPAR funcx RPAR block func_end
    (33) varsGlobal -> . type ID
    (103) empty -> .
    (35) type -> . INT
    (36) type -> . FLOAT
    (37) type -> . BOOLEAN

  ! shift/reduce conflict for FUNC resolved as shift
    FUNC            shift and go to state 3
    ID              reduce using rule 103 (empty -> .)
    $end            reduce using rule 103 (empty -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5

  ! FUNC            [ reduce using rule 103 (empty -> .) ]

    varsGlobal                     shift and go to state 1
    func                           shift and go to state 6
    vars_global                    shift and go to state 7
    type                           shift and go to state 8
    class                          shift and go to state 14
    empty                          shift and go to state 10

state 7

    (1) class -> vars_global . init_vars func_list
    (5) init_vars -> . asign init_vars
    (6) init_vars -> . empty
    (38) asign -> . ID id_val EQUAL equal_val expression
    (103) empty -> .

    ID              shift and go to state 17
    FUNC            reduce using rule 103 (empty -> .)
    $end            reduce using rule 103 (empty -> .)

    init_vars                      shift and go to state 15
    asign                          shift and go to state 16
    empty                          shift and go to state 18

state 8

    (33) varsGlobal -> type . ID

    ID              shift and go to state 19


state 9

    (0) S' -> class .



state 10

    (4) vars_global -> empty .

    ID              reduce using rule 4 (vars_global -> empty .)
    FUNC            reduce using rule 4 (vars_global -> empty .)
    $end            reduce using rule 4 (vars_global -> empty .)


state 11

    (3) vars_global -> varsGlobal vars_global .

    ID              reduce using rule 3 (vars_global -> varsGlobal vars_global .)
    FUNC            reduce using rule 3 (vars_global -> varsGlobal vars_global .)
    $end            reduce using rule 3 (vars_global -> varsGlobal vars_global .)


state 12

    (9) func -> FUNC idCheck . LPAR funcx RPAR block func_end

    LPAR            shift and go to state 20


state 13

    (11) idCheck -> ID .

    LPAR            reduce using rule 11 (idCheck -> ID .)


state 14

    (2) class -> func class .

    $end            reduce using rule 2 (class -> func class .)


state 15

    (1) class -> vars_global init_vars . func_list
    (7) func_list -> . func func_list
    (8) func_list -> . empty
    (9) func -> . FUNC idCheck LPAR funcx RPAR block func_end
    (103) empty -> .

    FUNC            shift and go to state 3
    $end            reduce using rule 103 (empty -> .)

    func                           shift and go to state 21
    func_list                      shift and go to state 22
    empty                          shift and go to state 23

state 16

    (5) init_vars -> asign . init_vars
    (5) init_vars -> . asign init_vars
    (6) init_vars -> . empty
    (38) asign -> . ID id_val EQUAL equal_val expression
    (103) empty -> .

    ID              shift and go to state 17
    FUNC            reduce using rule 103 (empty -> .)
    $end            reduce using rule 103 (empty -> .)

    init_vars                      shift and go to state 24
    asign                          shift and go to state 16
    empty                          shift and go to state 18

state 17

    (38) asign -> ID . id_val EQUAL equal_val expression
    (39) id_val -> .

    EQUAL           reduce using rule 39 (id_val -> .)

    id_val                         shift and go to state 25

state 18

    (6) init_vars -> empty .

    FUNC            reduce using rule 6 (init_vars -> empty .)
    $end            reduce using rule 6 (init_vars -> empty .)


state 19

    (33) varsGlobal -> type ID .

    INT             reduce using rule 33 (varsGlobal -> type ID .)
    FLOAT           reduce using rule 33 (varsGlobal -> type ID .)
    BOOLEAN         reduce using rule 33 (varsGlobal -> type ID .)
    ID              reduce using rule 33 (varsGlobal -> type ID .)
    FUNC            reduce using rule 33 (varsGlobal -> type ID .)
    $end            reduce using rule 33 (varsGlobal -> type ID .)


state 20

    (9) func -> FUNC idCheck LPAR . funcx RPAR block func_end
    (12) funcx -> . vars
    (13) funcx -> . empty
    (34) vars -> . type ID
    (103) empty -> .
    (35) type -> . INT
    (36) type -> . FLOAT
    (37) type -> . BOOLEAN

    RPAR            reduce using rule 103 (empty -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5

    vars                           shift and go to state 26
    funcx                          shift and go to state 27
    empty                          shift and go to state 28
    type                           shift and go to state 29

state 21

    (7) func_list -> func . func_list
    (7) func_list -> . func func_list
    (8) func_list -> . empty
    (9) func -> . FUNC idCheck LPAR funcx RPAR block func_end
    (103) empty -> .

    FUNC            shift and go to state 3
    $end            reduce using rule 103 (empty -> .)

    empty                          shift and go to state 23
    func                           shift and go to state 21
    func_list                      shift and go to state 30

state 22

    (1) class -> vars_global init_vars func_list .

    $end            reduce using rule 1 (class -> vars_global init_vars func_list .)


state 23

    (8) func_list -> empty .

    $end            reduce using rule 8 (func_list -> empty .)


state 24

    (5) init_vars -> asign init_vars .

    FUNC            reduce using rule 5 (init_vars -> asign init_vars .)
    $end            reduce using rule 5 (init_vars -> asign init_vars .)


state 25

    (38) asign -> ID id_val . EQUAL equal_val expression

    EQUAL           shift and go to state 31


state 26

    (12) funcx -> vars .

    RPAR            reduce using rule 12 (funcx -> vars .)


state 27

    (9) func -> FUNC idCheck LPAR funcx . RPAR block func_end

    RPAR            shift and go to state 32


state 28

    (13) funcx -> empty .

    RPAR            reduce using rule 13 (funcx -> empty .)


state 29

    (34) vars -> type . ID

    ID              shift and go to state 33


state 30

    (7) func_list -> func func_list .

    $end            reduce using rule 7 (func_list -> func func_list .)


state 31

    (38) asign -> ID id_val EQUAL . equal_val expression
    (40) equal_val -> .

    LPAR            reduce using rule 40 (equal_val -> .)
    MINUS           reduce using rule 40 (equal_val -> .)
    ID              reduce using rule 40 (equal_val -> .)
    NUMINT          reduce using rule 40 (equal_val -> .)
    NUMFLOAT        reduce using rule 40 (equal_val -> .)
    BOOLEANTYPE     reduce using rule 40 (equal_val -> .)

    equal_val                      shift and go to state 34

state 32

    (9) func -> FUNC idCheck LPAR funcx RPAR . block func_end
    (14) block -> . LCBRACKET blockx RCBRACKET

    LCBRACKET       shift and go to state 35

    block                          shift and go to state 36

state 33

    (34) vars -> type ID .

    INT             reduce using rule 34 (vars -> type ID .)
    FLOAT           reduce using rule 34 (vars -> type ID .)
    BOOLEAN         reduce using rule 34 (vars -> type ID .)
    ID              reduce using rule 34 (vars -> type ID .)
    IF              reduce using rule 34 (vars -> type ID .)
    WHILE           reduce using rule 34 (vars -> type ID .)
    PRINT           reduce using rule 34 (vars -> type ID .)
    LIST            reduce using rule 34 (vars -> type ID .)
    MOVE            reduce using rule 34 (vars -> type ID .)
    EAT             reduce using rule 34 (vars -> type ID .)
    CLEAN           reduce using rule 34 (vars -> type ID .)
    PLAY            reduce using rule 34 (vars -> type ID .)
    TURNLEFT        reduce using rule 34 (vars -> type ID .)
    TURNRIGHT       reduce using rule 34 (vars -> type ID .)
    RCBRACKET       reduce using rule 34 (vars -> type ID .)
    RPAR            reduce using rule 34 (vars -> type ID .)


state 34

    (38) asign -> ID id_val EQUAL equal_val . expression
    (41) expression -> . exp
    (42) expression -> . exp termino_val COMPARISON op_val expression
    (43) exp -> . termino
    (44) exp -> . termino PLUS op_val exp
    (45) exp -> . termino MINUS op_val exp
    (46) termino -> . factor
    (47) termino -> . factor MULTIPLY op_val termino
    (48) termino -> . factor DIVIDE op_val termino
    (51) factor -> . LPAR expression RPAR
    (52) factor -> . MINUS varcte
    (53) factor -> . varcte termino_val
    (54) varcte -> . ID
    (55) varcte -> . NUMINT
    (56) varcte -> . NUMFLOAT
    (57) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 42

    varcte                         shift and go to state 40
    exp                            shift and go to state 43
    factor                         shift and go to state 44
    expression                     shift and go to state 46
    termino                        shift and go to state 47

state 35

    (14) block -> LCBRACKET . blockx RCBRACKET
    (15) blockx -> . vars
    (16) blockx -> . vars blockx
    (17) blockx -> . statement
    (18) blockx -> . statement blockx
    (34) vars -> . type ID
    (19) statement -> . asign
    (20) statement -> . condition
    (21) statement -> . cycle
    (22) statement -> . print
    (23) statement -> . list
    (24) statement -> . call
    (25) statement -> . move
    (26) statement -> . eat
    (27) statement -> . clean
    (28) statement -> . play
    (29) statement -> . add
    (30) statement -> . remove
    (31) statement -> . turnleft
    (32) statement -> . turnright
    (35) type -> . INT
    (36) type -> . FLOAT
    (37) type -> . BOOLEAN
    (38) asign -> . ID id_val EQUAL equal_val expression
    (67) condition -> . IF LPAR exp RPAR cond_1 block else cond_2
    (63) cycle -> . WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3
    (58) print -> . PRINT LPAR printx RPAR
    (73) list -> . LIST idCheck_List EQUAL LBRACKET listx RBRACKET
    (89) call -> . ID id_call LPAR RPAR
    (90) call -> . ID id_call LPAR par_call params RPAR
    (97) move -> . MOVE LPAR ID RPAR
    (98) eat -> . EAT LPAR ID RPAR
    (99) clean -> . CLEAN LPAR ID RPAR
    (100) play -> . PLAY LPAR ID RPAR
    (86) add -> . ID idCheck_Add POINT ADD LPAR listx_add RPAR
    (88) remove -> . ID idCheck_Add POINT REMOVE LPAR RPAR
    (101) turnleft -> . TURNLEFT LPAR RPAR
    (102) turnright -> . TURNRIGHT LPAR RPAR

    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5
    ID              shift and go to state 53
    IF              shift and go to state 59
    WHILE           shift and go to state 50
    PRINT           shift and go to state 51
    LIST            shift and go to state 52
    MOVE            shift and go to state 63
    EAT             shift and go to state 60
    CLEAN           shift and go to state 67
    PLAY            shift and go to state 61
    TURNLEFT        shift and go to state 71
    TURNRIGHT       shift and go to state 66

    vars                           shift and go to state 48
    move                           shift and go to state 49
    turnright                      shift and go to state 54
    add                            shift and go to state 55
    call                           shift and go to state 56
    statement                      shift and go to state 57
    print                          shift and go to state 58
    type                           shift and go to state 29
    play                           shift and go to state 62
    turnleft                       shift and go to state 64
    blockx                         shift and go to state 65
    eat                            shift and go to state 68
    condition                      shift and go to state 69
    cycle                          shift and go to state 70
    list                           shift and go to state 72
    remove                         shift and go to state 73
    asign                          shift and go to state 74
    clean                          shift and go to state 75

state 36

    (9) func -> FUNC idCheck LPAR funcx RPAR block . func_end
    (10) func_end -> .

    FUNC            reduce using rule 10 (func_end -> .)
    INT             reduce using rule 10 (func_end -> .)
    FLOAT           reduce using rule 10 (func_end -> .)
    BOOLEAN         reduce using rule 10 (func_end -> .)
    ID              reduce using rule 10 (func_end -> .)
    $end            reduce using rule 10 (func_end -> .)

    func_end                       shift and go to state 76

state 37

    (51) factor -> LPAR . expression RPAR
    (41) expression -> . exp
    (42) expression -> . exp termino_val COMPARISON op_val expression
    (43) exp -> . termino
    (44) exp -> . termino PLUS op_val exp
    (45) exp -> . termino MINUS op_val exp
    (46) termino -> . factor
    (47) termino -> . factor MULTIPLY op_val termino
    (48) termino -> . factor DIVIDE op_val termino
    (51) factor -> . LPAR expression RPAR
    (52) factor -> . MINUS varcte
    (53) factor -> . varcte termino_val
    (54) varcte -> . ID
    (55) varcte -> . NUMINT
    (56) varcte -> . NUMFLOAT
    (57) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 42

    varcte                         shift and go to state 40
    exp                            shift and go to state 43
    factor                         shift and go to state 44
    expression                     shift and go to state 77
    termino                        shift and go to state 47

state 38

    (52) factor -> MINUS . varcte
    (54) varcte -> . ID
    (55) varcte -> . NUMINT
    (56) varcte -> . NUMFLOAT
    (57) varcte -> . BOOLEANTYPE

    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 42

    varcte                         shift and go to state 78

state 39

    (55) varcte -> NUMINT .

    MULTIPLY        reduce using rule 55 (varcte -> NUMINT .)
    DIVIDE          reduce using rule 55 (varcte -> NUMINT .)
    PLUS            reduce using rule 55 (varcte -> NUMINT .)
    MINUS           reduce using rule 55 (varcte -> NUMINT .)
    COMPARISON      reduce using rule 55 (varcte -> NUMINT .)
    ID              reduce using rule 55 (varcte -> NUMINT .)
    FUNC            reduce using rule 55 (varcte -> NUMINT .)
    $end            reduce using rule 55 (varcte -> NUMINT .)
    INT             reduce using rule 55 (varcte -> NUMINT .)
    FLOAT           reduce using rule 55 (varcte -> NUMINT .)
    BOOLEAN         reduce using rule 55 (varcte -> NUMINT .)
    IF              reduce using rule 55 (varcte -> NUMINT .)
    WHILE           reduce using rule 55 (varcte -> NUMINT .)
    PRINT           reduce using rule 55 (varcte -> NUMINT .)
    LIST            reduce using rule 55 (varcte -> NUMINT .)
    MOVE            reduce using rule 55 (varcte -> NUMINT .)
    EAT             reduce using rule 55 (varcte -> NUMINT .)
    CLEAN           reduce using rule 55 (varcte -> NUMINT .)
    PLAY            reduce using rule 55 (varcte -> NUMINT .)
    TURNLEFT        reduce using rule 55 (varcte -> NUMINT .)
    TURNRIGHT       reduce using rule 55 (varcte -> NUMINT .)
    RCBRACKET       reduce using rule 55 (varcte -> NUMINT .)
    RPAR            reduce using rule 55 (varcte -> NUMINT .)
    COMA            reduce using rule 55 (varcte -> NUMINT .)


state 40

    (53) factor -> varcte . termino_val
    (49) termino_val -> .

    MULTIPLY        reduce using rule 49 (termino_val -> .)
    DIVIDE          reduce using rule 49 (termino_val -> .)
    PLUS            reduce using rule 49 (termino_val -> .)
    MINUS           reduce using rule 49 (termino_val -> .)
    COMPARISON      reduce using rule 49 (termino_val -> .)
    ID              reduce using rule 49 (termino_val -> .)
    FUNC            reduce using rule 49 (termino_val -> .)
    $end            reduce using rule 49 (termino_val -> .)
    INT             reduce using rule 49 (termino_val -> .)
    FLOAT           reduce using rule 49 (termino_val -> .)
    BOOLEAN         reduce using rule 49 (termino_val -> .)
    IF              reduce using rule 49 (termino_val -> .)
    WHILE           reduce using rule 49 (termino_val -> .)
    PRINT           reduce using rule 49 (termino_val -> .)
    LIST            reduce using rule 49 (termino_val -> .)
    MOVE            reduce using rule 49 (termino_val -> .)
    EAT             reduce using rule 49 (termino_val -> .)
    CLEAN           reduce using rule 49 (termino_val -> .)
    PLAY            reduce using rule 49 (termino_val -> .)
    TURNLEFT        reduce using rule 49 (termino_val -> .)
    TURNRIGHT       reduce using rule 49 (termino_val -> .)
    RCBRACKET       reduce using rule 49 (termino_val -> .)
    RPAR            reduce using rule 49 (termino_val -> .)
    COMA            reduce using rule 49 (termino_val -> .)

    termino_val                    shift and go to state 79

state 41

    (54) varcte -> ID .

    MULTIPLY        reduce using rule 54 (varcte -> ID .)
    DIVIDE          reduce using rule 54 (varcte -> ID .)
    PLUS            reduce using rule 54 (varcte -> ID .)
    MINUS           reduce using rule 54 (varcte -> ID .)
    COMPARISON      reduce using rule 54 (varcte -> ID .)
    ID              reduce using rule 54 (varcte -> ID .)
    FUNC            reduce using rule 54 (varcte -> ID .)
    $end            reduce using rule 54 (varcte -> ID .)
    INT             reduce using rule 54 (varcte -> ID .)
    FLOAT           reduce using rule 54 (varcte -> ID .)
    BOOLEAN         reduce using rule 54 (varcte -> ID .)
    IF              reduce using rule 54 (varcte -> ID .)
    WHILE           reduce using rule 54 (varcte -> ID .)
    PRINT           reduce using rule 54 (varcte -> ID .)
    LIST            reduce using rule 54 (varcte -> ID .)
    MOVE            reduce using rule 54 (varcte -> ID .)
    EAT             reduce using rule 54 (varcte -> ID .)
    CLEAN           reduce using rule 54 (varcte -> ID .)
    PLAY            reduce using rule 54 (varcte -> ID .)
    TURNLEFT        reduce using rule 54 (varcte -> ID .)
    TURNRIGHT       reduce using rule 54 (varcte -> ID .)
    RCBRACKET       reduce using rule 54 (varcte -> ID .)
    RPAR            reduce using rule 54 (varcte -> ID .)
    COMA            reduce using rule 54 (varcte -> ID .)


state 42

    (57) varcte -> BOOLEANTYPE .

    MULTIPLY        reduce using rule 57 (varcte -> BOOLEANTYPE .)
    DIVIDE          reduce using rule 57 (varcte -> BOOLEANTYPE .)
    PLUS            reduce using rule 57 (varcte -> BOOLEANTYPE .)
    MINUS           reduce using rule 57 (varcte -> BOOLEANTYPE .)
    COMPARISON      reduce using rule 57 (varcte -> BOOLEANTYPE .)
    ID              reduce using rule 57 (varcte -> BOOLEANTYPE .)
    FUNC            reduce using rule 57 (varcte -> BOOLEANTYPE .)
    $end            reduce using rule 57 (varcte -> BOOLEANTYPE .)
    INT             reduce using rule 57 (varcte -> BOOLEANTYPE .)
    FLOAT           reduce using rule 57 (varcte -> BOOLEANTYPE .)
    BOOLEAN         reduce using rule 57 (varcte -> BOOLEANTYPE .)
    IF              reduce using rule 57 (varcte -> BOOLEANTYPE .)
    WHILE           reduce using rule 57 (varcte -> BOOLEANTYPE .)
    PRINT           reduce using rule 57 (varcte -> BOOLEANTYPE .)
    LIST            reduce using rule 57 (varcte -> BOOLEANTYPE .)
    MOVE            reduce using rule 57 (varcte -> BOOLEANTYPE .)
    EAT             reduce using rule 57 (varcte -> BOOLEANTYPE .)
    CLEAN           reduce using rule 57 (varcte -> BOOLEANTYPE .)
    PLAY            reduce using rule 57 (varcte -> BOOLEANTYPE .)
    TURNLEFT        reduce using rule 57 (varcte -> BOOLEANTYPE .)
    TURNRIGHT       reduce using rule 57 (varcte -> BOOLEANTYPE .)
    RCBRACKET       reduce using rule 57 (varcte -> BOOLEANTYPE .)
    RPAR            reduce using rule 57 (varcte -> BOOLEANTYPE .)
    COMA            reduce using rule 57 (varcte -> BOOLEANTYPE .)


state 43

    (41) expression -> exp .
    (42) expression -> exp . termino_val COMPARISON op_val expression
    (49) termino_val -> .

    ID              reduce using rule 41 (expression -> exp .)
    FUNC            reduce using rule 41 (expression -> exp .)
    $end            reduce using rule 41 (expression -> exp .)
    INT             reduce using rule 41 (expression -> exp .)
    FLOAT           reduce using rule 41 (expression -> exp .)
    BOOLEAN         reduce using rule 41 (expression -> exp .)
    IF              reduce using rule 41 (expression -> exp .)
    WHILE           reduce using rule 41 (expression -> exp .)
    PRINT           reduce using rule 41 (expression -> exp .)
    LIST            reduce using rule 41 (expression -> exp .)
    MOVE            reduce using rule 41 (expression -> exp .)
    EAT             reduce using rule 41 (expression -> exp .)
    CLEAN           reduce using rule 41 (expression -> exp .)
    PLAY            reduce using rule 41 (expression -> exp .)
    TURNLEFT        reduce using rule 41 (expression -> exp .)
    TURNRIGHT       reduce using rule 41 (expression -> exp .)
    RCBRACKET       reduce using rule 41 (expression -> exp .)
    RPAR            reduce using rule 41 (expression -> exp .)
    COMA            reduce using rule 41 (expression -> exp .)
    COMPARISON      reduce using rule 49 (termino_val -> .)

    termino_val                    shift and go to state 80

state 44

    (46) termino -> factor .
    (47) termino -> factor . MULTIPLY op_val termino
    (48) termino -> factor . DIVIDE op_val termino

    PLUS            reduce using rule 46 (termino -> factor .)
    MINUS           reduce using rule 46 (termino -> factor .)
    COMPARISON      reduce using rule 46 (termino -> factor .)
    COMA            reduce using rule 46 (termino -> factor .)
    RPAR            reduce using rule 46 (termino -> factor .)
    ID              reduce using rule 46 (termino -> factor .)
    FUNC            reduce using rule 46 (termino -> factor .)
    $end            reduce using rule 46 (termino -> factor .)
    INT             reduce using rule 46 (termino -> factor .)
    FLOAT           reduce using rule 46 (termino -> factor .)
    BOOLEAN         reduce using rule 46 (termino -> factor .)
    IF              reduce using rule 46 (termino -> factor .)
    WHILE           reduce using rule 46 (termino -> factor .)
    PRINT           reduce using rule 46 (termino -> factor .)
    LIST            reduce using rule 46 (termino -> factor .)
    MOVE            reduce using rule 46 (termino -> factor .)
    EAT             reduce using rule 46 (termino -> factor .)
    CLEAN           reduce using rule 46 (termino -> factor .)
    PLAY            reduce using rule 46 (termino -> factor .)
    TURNLEFT        reduce using rule 46 (termino -> factor .)
    TURNRIGHT       reduce using rule 46 (termino -> factor .)
    RCBRACKET       reduce using rule 46 (termino -> factor .)
    MULTIPLY        shift and go to state 81
    DIVIDE          shift and go to state 82


state 45

    (56) varcte -> NUMFLOAT .

    MULTIPLY        reduce using rule 56 (varcte -> NUMFLOAT .)
    DIVIDE          reduce using rule 56 (varcte -> NUMFLOAT .)
    PLUS            reduce using rule 56 (varcte -> NUMFLOAT .)
    MINUS           reduce using rule 56 (varcte -> NUMFLOAT .)
    COMPARISON      reduce using rule 56 (varcte -> NUMFLOAT .)
    ID              reduce using rule 56 (varcte -> NUMFLOAT .)
    FUNC            reduce using rule 56 (varcte -> NUMFLOAT .)
    $end            reduce using rule 56 (varcte -> NUMFLOAT .)
    INT             reduce using rule 56 (varcte -> NUMFLOAT .)
    FLOAT           reduce using rule 56 (varcte -> NUMFLOAT .)
    BOOLEAN         reduce using rule 56 (varcte -> NUMFLOAT .)
    IF              reduce using rule 56 (varcte -> NUMFLOAT .)
    WHILE           reduce using rule 56 (varcte -> NUMFLOAT .)
    PRINT           reduce using rule 56 (varcte -> NUMFLOAT .)
    LIST            reduce using rule 56 (varcte -> NUMFLOAT .)
    MOVE            reduce using rule 56 (varcte -> NUMFLOAT .)
    EAT             reduce using rule 56 (varcte -> NUMFLOAT .)
    CLEAN           reduce using rule 56 (varcte -> NUMFLOAT .)
    PLAY            reduce using rule 56 (varcte -> NUMFLOAT .)
    TURNLEFT        reduce using rule 56 (varcte -> NUMFLOAT .)
    TURNRIGHT       reduce using rule 56 (varcte -> NUMFLOAT .)
    RCBRACKET       reduce using rule 56 (varcte -> NUMFLOAT .)
    RPAR            reduce using rule 56 (varcte -> NUMFLOAT .)
    COMA            reduce using rule 56 (varcte -> NUMFLOAT .)


state 46

    (38) asign -> ID id_val EQUAL equal_val expression .

    INT             reduce using rule 38 (asign -> ID id_val EQUAL equal_val expression .)
    FLOAT           reduce using rule 38 (asign -> ID id_val EQUAL equal_val expression .)
    BOOLEAN         reduce using rule 38 (asign -> ID id_val EQUAL equal_val expression .)
    ID              reduce using rule 38 (asign -> ID id_val EQUAL equal_val expression .)
    IF              reduce using rule 38 (asign -> ID id_val EQUAL equal_val expression .)
    WHILE           reduce using rule 38 (asign -> ID id_val EQUAL equal_val expression .)
    PRINT           reduce using rule 38 (asign -> ID id_val EQUAL equal_val expression .)
    LIST            reduce using rule 38 (asign -> ID id_val EQUAL equal_val expression .)
    MOVE            reduce using rule 38 (asign -> ID id_val EQUAL equal_val expression .)
    EAT             reduce using rule 38 (asign -> ID id_val EQUAL equal_val expression .)
    CLEAN           reduce using rule 38 (asign -> ID id_val EQUAL equal_val expression .)
    PLAY            reduce using rule 38 (asign -> ID id_val EQUAL equal_val expression .)
    TURNLEFT        reduce using rule 38 (asign -> ID id_val EQUAL equal_val expression .)
    TURNRIGHT       reduce using rule 38 (asign -> ID id_val EQUAL equal_val expression .)
    RCBRACKET       reduce using rule 38 (asign -> ID id_val EQUAL equal_val expression .)
    FUNC            reduce using rule 38 (asign -> ID id_val EQUAL equal_val expression .)
    $end            reduce using rule 38 (asign -> ID id_val EQUAL equal_val expression .)


state 47

    (43) exp -> termino .
    (44) exp -> termino . PLUS op_val exp
    (45) exp -> termino . MINUS op_val exp

    COMPARISON      reduce using rule 43 (exp -> termino .)
    COMA            reduce using rule 43 (exp -> termino .)
    RPAR            reduce using rule 43 (exp -> termino .)
    ID              reduce using rule 43 (exp -> termino .)
    FUNC            reduce using rule 43 (exp -> termino .)
    $end            reduce using rule 43 (exp -> termino .)
    INT             reduce using rule 43 (exp -> termino .)
    FLOAT           reduce using rule 43 (exp -> termino .)
    BOOLEAN         reduce using rule 43 (exp -> termino .)
    IF              reduce using rule 43 (exp -> termino .)
    WHILE           reduce using rule 43 (exp -> termino .)
    PRINT           reduce using rule 43 (exp -> termino .)
    LIST            reduce using rule 43 (exp -> termino .)
    MOVE            reduce using rule 43 (exp -> termino .)
    EAT             reduce using rule 43 (exp -> termino .)
    CLEAN           reduce using rule 43 (exp -> termino .)
    PLAY            reduce using rule 43 (exp -> termino .)
    TURNLEFT        reduce using rule 43 (exp -> termino .)
    TURNRIGHT       reduce using rule 43 (exp -> termino .)
    RCBRACKET       reduce using rule 43 (exp -> termino .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84


state 48

    (15) blockx -> vars .
    (16) blockx -> vars . blockx
    (15) blockx -> . vars
    (16) blockx -> . vars blockx
    (17) blockx -> . statement
    (18) blockx -> . statement blockx
    (34) vars -> . type ID
    (19) statement -> . asign
    (20) statement -> . condition
    (21) statement -> . cycle
    (22) statement -> . print
    (23) statement -> . list
    (24) statement -> . call
    (25) statement -> . move
    (26) statement -> . eat
    (27) statement -> . clean
    (28) statement -> . play
    (29) statement -> . add
    (30) statement -> . remove
    (31) statement -> . turnleft
    (32) statement -> . turnright
    (35) type -> . INT
    (36) type -> . FLOAT
    (37) type -> . BOOLEAN
    (38) asign -> . ID id_val EQUAL equal_val expression
    (67) condition -> . IF LPAR exp RPAR cond_1 block else cond_2
    (63) cycle -> . WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3
    (58) print -> . PRINT LPAR printx RPAR
    (73) list -> . LIST idCheck_List EQUAL LBRACKET listx RBRACKET
    (89) call -> . ID id_call LPAR RPAR
    (90) call -> . ID id_call LPAR par_call params RPAR
    (97) move -> . MOVE LPAR ID RPAR
    (98) eat -> . EAT LPAR ID RPAR
    (99) clean -> . CLEAN LPAR ID RPAR
    (100) play -> . PLAY LPAR ID RPAR
    (86) add -> . ID idCheck_Add POINT ADD LPAR listx_add RPAR
    (88) remove -> . ID idCheck_Add POINT REMOVE LPAR RPAR
    (101) turnleft -> . TURNLEFT LPAR RPAR
    (102) turnright -> . TURNRIGHT LPAR RPAR

    RCBRACKET       reduce using rule 15 (blockx -> vars .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5
    ID              shift and go to state 53
    IF              shift and go to state 59
    WHILE           shift and go to state 50
    PRINT           shift and go to state 51
    LIST            shift and go to state 52
    MOVE            shift and go to state 63
    EAT             shift and go to state 60
    CLEAN           shift and go to state 67
    PLAY            shift and go to state 61
    TURNLEFT        shift and go to state 71
    TURNRIGHT       shift and go to state 66

    vars                           shift and go to state 48
    move                           shift and go to state 49
    turnright                      shift and go to state 54
    add                            shift and go to state 55
    call                           shift and go to state 56
    statement                      shift and go to state 57
    print                          shift and go to state 58
    type                           shift and go to state 29
    play                           shift and go to state 62
    turnleft                       shift and go to state 64
    blockx                         shift and go to state 85
    eat                            shift and go to state 68
    condition                      shift and go to state 69
    cycle                          shift and go to state 70
    list                           shift and go to state 72
    remove                         shift and go to state 73
    asign                          shift and go to state 74
    clean                          shift and go to state 75

state 49

    (25) statement -> move .

    INT             reduce using rule 25 (statement -> move .)
    FLOAT           reduce using rule 25 (statement -> move .)
    BOOLEAN         reduce using rule 25 (statement -> move .)
    ID              reduce using rule 25 (statement -> move .)
    IF              reduce using rule 25 (statement -> move .)
    WHILE           reduce using rule 25 (statement -> move .)
    PRINT           reduce using rule 25 (statement -> move .)
    LIST            reduce using rule 25 (statement -> move .)
    MOVE            reduce using rule 25 (statement -> move .)
    EAT             reduce using rule 25 (statement -> move .)
    CLEAN           reduce using rule 25 (statement -> move .)
    PLAY            reduce using rule 25 (statement -> move .)
    TURNLEFT        reduce using rule 25 (statement -> move .)
    TURNRIGHT       reduce using rule 25 (statement -> move .)
    RCBRACKET       reduce using rule 25 (statement -> move .)


state 50

    (63) cycle -> WHILE . cycle_1 LPAR exp RPAR cycle_2 block cycle_3
    (64) cycle_1 -> .

    LPAR            reduce using rule 64 (cycle_1 -> .)

    cycle_1                        shift and go to state 86

state 51

    (58) print -> PRINT . LPAR printx RPAR

    LPAR            shift and go to state 87


state 52

    (73) list -> LIST . idCheck_List EQUAL LBRACKET listx RBRACKET
    (80) idCheck_List -> . ID

    ID              shift and go to state 89

    idCheck_List                   shift and go to state 88

state 53

    (38) asign -> ID . id_val EQUAL equal_val expression
    (89) call -> ID . id_call LPAR RPAR
    (90) call -> ID . id_call LPAR par_call params RPAR
    (86) add -> ID . idCheck_Add POINT ADD LPAR listx_add RPAR
    (88) remove -> ID . idCheck_Add POINT REMOVE LPAR RPAR
    (39) id_val -> .
    (91) id_call -> .
    (87) idCheck_Add -> .

    EQUAL           reduce using rule 39 (id_val -> .)
    LPAR            reduce using rule 91 (id_call -> .)
    POINT           reduce using rule 87 (idCheck_Add -> .)

    idCheck_Add                    shift and go to state 90
    id_call                        shift and go to state 91
    id_val                         shift and go to state 25

state 54

    (32) statement -> turnright .

    INT             reduce using rule 32 (statement -> turnright .)
    FLOAT           reduce using rule 32 (statement -> turnright .)
    BOOLEAN         reduce using rule 32 (statement -> turnright .)
    ID              reduce using rule 32 (statement -> turnright .)
    IF              reduce using rule 32 (statement -> turnright .)
    WHILE           reduce using rule 32 (statement -> turnright .)
    PRINT           reduce using rule 32 (statement -> turnright .)
    LIST            reduce using rule 32 (statement -> turnright .)
    MOVE            reduce using rule 32 (statement -> turnright .)
    EAT             reduce using rule 32 (statement -> turnright .)
    CLEAN           reduce using rule 32 (statement -> turnright .)
    PLAY            reduce using rule 32 (statement -> turnright .)
    TURNLEFT        reduce using rule 32 (statement -> turnright .)
    TURNRIGHT       reduce using rule 32 (statement -> turnright .)
    RCBRACKET       reduce using rule 32 (statement -> turnright .)


state 55

    (29) statement -> add .

    INT             reduce using rule 29 (statement -> add .)
    FLOAT           reduce using rule 29 (statement -> add .)
    BOOLEAN         reduce using rule 29 (statement -> add .)
    ID              reduce using rule 29 (statement -> add .)
    IF              reduce using rule 29 (statement -> add .)
    WHILE           reduce using rule 29 (statement -> add .)
    PRINT           reduce using rule 29 (statement -> add .)
    LIST            reduce using rule 29 (statement -> add .)
    MOVE            reduce using rule 29 (statement -> add .)
    EAT             reduce using rule 29 (statement -> add .)
    CLEAN           reduce using rule 29 (statement -> add .)
    PLAY            reduce using rule 29 (statement -> add .)
    TURNLEFT        reduce using rule 29 (statement -> add .)
    TURNRIGHT       reduce using rule 29 (statement -> add .)
    RCBRACKET       reduce using rule 29 (statement -> add .)


state 56

    (24) statement -> call .

    INT             reduce using rule 24 (statement -> call .)
    FLOAT           reduce using rule 24 (statement -> call .)
    BOOLEAN         reduce using rule 24 (statement -> call .)
    ID              reduce using rule 24 (statement -> call .)
    IF              reduce using rule 24 (statement -> call .)
    WHILE           reduce using rule 24 (statement -> call .)
    PRINT           reduce using rule 24 (statement -> call .)
    LIST            reduce using rule 24 (statement -> call .)
    MOVE            reduce using rule 24 (statement -> call .)
    EAT             reduce using rule 24 (statement -> call .)
    CLEAN           reduce using rule 24 (statement -> call .)
    PLAY            reduce using rule 24 (statement -> call .)
    TURNLEFT        reduce using rule 24 (statement -> call .)
    TURNRIGHT       reduce using rule 24 (statement -> call .)
    RCBRACKET       reduce using rule 24 (statement -> call .)


state 57

    (17) blockx -> statement .
    (18) blockx -> statement . blockx
    (15) blockx -> . vars
    (16) blockx -> . vars blockx
    (17) blockx -> . statement
    (18) blockx -> . statement blockx
    (34) vars -> . type ID
    (19) statement -> . asign
    (20) statement -> . condition
    (21) statement -> . cycle
    (22) statement -> . print
    (23) statement -> . list
    (24) statement -> . call
    (25) statement -> . move
    (26) statement -> . eat
    (27) statement -> . clean
    (28) statement -> . play
    (29) statement -> . add
    (30) statement -> . remove
    (31) statement -> . turnleft
    (32) statement -> . turnright
    (35) type -> . INT
    (36) type -> . FLOAT
    (37) type -> . BOOLEAN
    (38) asign -> . ID id_val EQUAL equal_val expression
    (67) condition -> . IF LPAR exp RPAR cond_1 block else cond_2
    (63) cycle -> . WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3
    (58) print -> . PRINT LPAR printx RPAR
    (73) list -> . LIST idCheck_List EQUAL LBRACKET listx RBRACKET
    (89) call -> . ID id_call LPAR RPAR
    (90) call -> . ID id_call LPAR par_call params RPAR
    (97) move -> . MOVE LPAR ID RPAR
    (98) eat -> . EAT LPAR ID RPAR
    (99) clean -> . CLEAN LPAR ID RPAR
    (100) play -> . PLAY LPAR ID RPAR
    (86) add -> . ID idCheck_Add POINT ADD LPAR listx_add RPAR
    (88) remove -> . ID idCheck_Add POINT REMOVE LPAR RPAR
    (101) turnleft -> . TURNLEFT LPAR RPAR
    (102) turnright -> . TURNRIGHT LPAR RPAR

    RCBRACKET       reduce using rule 17 (blockx -> statement .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5
    ID              shift and go to state 53
    IF              shift and go to state 59
    WHILE           shift and go to state 50
    PRINT           shift and go to state 51
    LIST            shift and go to state 52
    MOVE            shift and go to state 63
    EAT             shift and go to state 60
    CLEAN           shift and go to state 67
    PLAY            shift and go to state 61
    TURNLEFT        shift and go to state 71
    TURNRIGHT       shift and go to state 66

    vars                           shift and go to state 48
    move                           shift and go to state 49
    turnright                      shift and go to state 54
    add                            shift and go to state 55
    call                           shift and go to state 56
    statement                      shift and go to state 57
    print                          shift and go to state 58
    type                           shift and go to state 29
    play                           shift and go to state 62
    turnleft                       shift and go to state 64
    blockx                         shift and go to state 92
    eat                            shift and go to state 68
    condition                      shift and go to state 69
    cycle                          shift and go to state 70
    list                           shift and go to state 72
    remove                         shift and go to state 73
    asign                          shift and go to state 74
    clean                          shift and go to state 75

state 58

    (22) statement -> print .

    INT             reduce using rule 22 (statement -> print .)
    FLOAT           reduce using rule 22 (statement -> print .)
    BOOLEAN         reduce using rule 22 (statement -> print .)
    ID              reduce using rule 22 (statement -> print .)
    IF              reduce using rule 22 (statement -> print .)
    WHILE           reduce using rule 22 (statement -> print .)
    PRINT           reduce using rule 22 (statement -> print .)
    LIST            reduce using rule 22 (statement -> print .)
    MOVE            reduce using rule 22 (statement -> print .)
    EAT             reduce using rule 22 (statement -> print .)
    CLEAN           reduce using rule 22 (statement -> print .)
    PLAY            reduce using rule 22 (statement -> print .)
    TURNLEFT        reduce using rule 22 (statement -> print .)
    TURNRIGHT       reduce using rule 22 (statement -> print .)
    RCBRACKET       reduce using rule 22 (statement -> print .)


state 59

    (67) condition -> IF . LPAR exp RPAR cond_1 block else cond_2

    LPAR            shift and go to state 93


state 60

    (98) eat -> EAT . LPAR ID RPAR

    LPAR            shift and go to state 94


state 61

    (100) play -> PLAY . LPAR ID RPAR

    LPAR            shift and go to state 95


state 62

    (28) statement -> play .

    INT             reduce using rule 28 (statement -> play .)
    FLOAT           reduce using rule 28 (statement -> play .)
    BOOLEAN         reduce using rule 28 (statement -> play .)
    ID              reduce using rule 28 (statement -> play .)
    IF              reduce using rule 28 (statement -> play .)
    WHILE           reduce using rule 28 (statement -> play .)
    PRINT           reduce using rule 28 (statement -> play .)
    LIST            reduce using rule 28 (statement -> play .)
    MOVE            reduce using rule 28 (statement -> play .)
    EAT             reduce using rule 28 (statement -> play .)
    CLEAN           reduce using rule 28 (statement -> play .)
    PLAY            reduce using rule 28 (statement -> play .)
    TURNLEFT        reduce using rule 28 (statement -> play .)
    TURNRIGHT       reduce using rule 28 (statement -> play .)
    RCBRACKET       reduce using rule 28 (statement -> play .)


state 63

    (97) move -> MOVE . LPAR ID RPAR

    LPAR            shift and go to state 96


state 64

    (31) statement -> turnleft .

    INT             reduce using rule 31 (statement -> turnleft .)
    FLOAT           reduce using rule 31 (statement -> turnleft .)
    BOOLEAN         reduce using rule 31 (statement -> turnleft .)
    ID              reduce using rule 31 (statement -> turnleft .)
    IF              reduce using rule 31 (statement -> turnleft .)
    WHILE           reduce using rule 31 (statement -> turnleft .)
    PRINT           reduce using rule 31 (statement -> turnleft .)
    LIST            reduce using rule 31 (statement -> turnleft .)
    MOVE            reduce using rule 31 (statement -> turnleft .)
    EAT             reduce using rule 31 (statement -> turnleft .)
    CLEAN           reduce using rule 31 (statement -> turnleft .)
    PLAY            reduce using rule 31 (statement -> turnleft .)
    TURNLEFT        reduce using rule 31 (statement -> turnleft .)
    TURNRIGHT       reduce using rule 31 (statement -> turnleft .)
    RCBRACKET       reduce using rule 31 (statement -> turnleft .)


state 65

    (14) block -> LCBRACKET blockx . RCBRACKET

    RCBRACKET       shift and go to state 97


state 66

    (102) turnright -> TURNRIGHT . LPAR RPAR

    LPAR            shift and go to state 98


state 67

    (99) clean -> CLEAN . LPAR ID RPAR

    LPAR            shift and go to state 99


state 68

    (26) statement -> eat .

    INT             reduce using rule 26 (statement -> eat .)
    FLOAT           reduce using rule 26 (statement -> eat .)
    BOOLEAN         reduce using rule 26 (statement -> eat .)
    ID              reduce using rule 26 (statement -> eat .)
    IF              reduce using rule 26 (statement -> eat .)
    WHILE           reduce using rule 26 (statement -> eat .)
    PRINT           reduce using rule 26 (statement -> eat .)
    LIST            reduce using rule 26 (statement -> eat .)
    MOVE            reduce using rule 26 (statement -> eat .)
    EAT             reduce using rule 26 (statement -> eat .)
    CLEAN           reduce using rule 26 (statement -> eat .)
    PLAY            reduce using rule 26 (statement -> eat .)
    TURNLEFT        reduce using rule 26 (statement -> eat .)
    TURNRIGHT       reduce using rule 26 (statement -> eat .)
    RCBRACKET       reduce using rule 26 (statement -> eat .)


state 69

    (20) statement -> condition .

    INT             reduce using rule 20 (statement -> condition .)
    FLOAT           reduce using rule 20 (statement -> condition .)
    BOOLEAN         reduce using rule 20 (statement -> condition .)
    ID              reduce using rule 20 (statement -> condition .)
    IF              reduce using rule 20 (statement -> condition .)
    WHILE           reduce using rule 20 (statement -> condition .)
    PRINT           reduce using rule 20 (statement -> condition .)
    LIST            reduce using rule 20 (statement -> condition .)
    MOVE            reduce using rule 20 (statement -> condition .)
    EAT             reduce using rule 20 (statement -> condition .)
    CLEAN           reduce using rule 20 (statement -> condition .)
    PLAY            reduce using rule 20 (statement -> condition .)
    TURNLEFT        reduce using rule 20 (statement -> condition .)
    TURNRIGHT       reduce using rule 20 (statement -> condition .)
    RCBRACKET       reduce using rule 20 (statement -> condition .)


state 70

    (21) statement -> cycle .

    INT             reduce using rule 21 (statement -> cycle .)
    FLOAT           reduce using rule 21 (statement -> cycle .)
    BOOLEAN         reduce using rule 21 (statement -> cycle .)
    ID              reduce using rule 21 (statement -> cycle .)
    IF              reduce using rule 21 (statement -> cycle .)
    WHILE           reduce using rule 21 (statement -> cycle .)
    PRINT           reduce using rule 21 (statement -> cycle .)
    LIST            reduce using rule 21 (statement -> cycle .)
    MOVE            reduce using rule 21 (statement -> cycle .)
    EAT             reduce using rule 21 (statement -> cycle .)
    CLEAN           reduce using rule 21 (statement -> cycle .)
    PLAY            reduce using rule 21 (statement -> cycle .)
    TURNLEFT        reduce using rule 21 (statement -> cycle .)
    TURNRIGHT       reduce using rule 21 (statement -> cycle .)
    RCBRACKET       reduce using rule 21 (statement -> cycle .)


state 71

    (101) turnleft -> TURNLEFT . LPAR RPAR

    LPAR            shift and go to state 100


state 72

    (23) statement -> list .

    INT             reduce using rule 23 (statement -> list .)
    FLOAT           reduce using rule 23 (statement -> list .)
    BOOLEAN         reduce using rule 23 (statement -> list .)
    ID              reduce using rule 23 (statement -> list .)
    IF              reduce using rule 23 (statement -> list .)
    WHILE           reduce using rule 23 (statement -> list .)
    PRINT           reduce using rule 23 (statement -> list .)
    LIST            reduce using rule 23 (statement -> list .)
    MOVE            reduce using rule 23 (statement -> list .)
    EAT             reduce using rule 23 (statement -> list .)
    CLEAN           reduce using rule 23 (statement -> list .)
    PLAY            reduce using rule 23 (statement -> list .)
    TURNLEFT        reduce using rule 23 (statement -> list .)
    TURNRIGHT       reduce using rule 23 (statement -> list .)
    RCBRACKET       reduce using rule 23 (statement -> list .)


state 73

    (30) statement -> remove .

    INT             reduce using rule 30 (statement -> remove .)
    FLOAT           reduce using rule 30 (statement -> remove .)
    BOOLEAN         reduce using rule 30 (statement -> remove .)
    ID              reduce using rule 30 (statement -> remove .)
    IF              reduce using rule 30 (statement -> remove .)
    WHILE           reduce using rule 30 (statement -> remove .)
    PRINT           reduce using rule 30 (statement -> remove .)
    LIST            reduce using rule 30 (statement -> remove .)
    MOVE            reduce using rule 30 (statement -> remove .)
    EAT             reduce using rule 30 (statement -> remove .)
    CLEAN           reduce using rule 30 (statement -> remove .)
    PLAY            reduce using rule 30 (statement -> remove .)
    TURNLEFT        reduce using rule 30 (statement -> remove .)
    TURNRIGHT       reduce using rule 30 (statement -> remove .)
    RCBRACKET       reduce using rule 30 (statement -> remove .)


state 74

    (19) statement -> asign .

    INT             reduce using rule 19 (statement -> asign .)
    FLOAT           reduce using rule 19 (statement -> asign .)
    BOOLEAN         reduce using rule 19 (statement -> asign .)
    ID              reduce using rule 19 (statement -> asign .)
    IF              reduce using rule 19 (statement -> asign .)
    WHILE           reduce using rule 19 (statement -> asign .)
    PRINT           reduce using rule 19 (statement -> asign .)
    LIST            reduce using rule 19 (statement -> asign .)
    MOVE            reduce using rule 19 (statement -> asign .)
    EAT             reduce using rule 19 (statement -> asign .)
    CLEAN           reduce using rule 19 (statement -> asign .)
    PLAY            reduce using rule 19 (statement -> asign .)
    TURNLEFT        reduce using rule 19 (statement -> asign .)
    TURNRIGHT       reduce using rule 19 (statement -> asign .)
    RCBRACKET       reduce using rule 19 (statement -> asign .)


state 75

    (27) statement -> clean .

    INT             reduce using rule 27 (statement -> clean .)
    FLOAT           reduce using rule 27 (statement -> clean .)
    BOOLEAN         reduce using rule 27 (statement -> clean .)
    ID              reduce using rule 27 (statement -> clean .)
    IF              reduce using rule 27 (statement -> clean .)
    WHILE           reduce using rule 27 (statement -> clean .)
    PRINT           reduce using rule 27 (statement -> clean .)
    LIST            reduce using rule 27 (statement -> clean .)
    MOVE            reduce using rule 27 (statement -> clean .)
    EAT             reduce using rule 27 (statement -> clean .)
    CLEAN           reduce using rule 27 (statement -> clean .)
    PLAY            reduce using rule 27 (statement -> clean .)
    TURNLEFT        reduce using rule 27 (statement -> clean .)
    TURNRIGHT       reduce using rule 27 (statement -> clean .)
    RCBRACKET       reduce using rule 27 (statement -> clean .)


state 76

    (9) func -> FUNC idCheck LPAR funcx RPAR block func_end .

    FUNC            reduce using rule 9 (func -> FUNC idCheck LPAR funcx RPAR block func_end .)
    $end            reduce using rule 9 (func -> FUNC idCheck LPAR funcx RPAR block func_end .)
    INT             reduce using rule 9 (func -> FUNC idCheck LPAR funcx RPAR block func_end .)
    FLOAT           reduce using rule 9 (func -> FUNC idCheck LPAR funcx RPAR block func_end .)
    BOOLEAN         reduce using rule 9 (func -> FUNC idCheck LPAR funcx RPAR block func_end .)
    ID              reduce using rule 9 (func -> FUNC idCheck LPAR funcx RPAR block func_end .)


state 77

    (51) factor -> LPAR expression . RPAR

    RPAR            shift and go to state 101


state 78

    (52) factor -> MINUS varcte .

    MULTIPLY        reduce using rule 52 (factor -> MINUS varcte .)
    DIVIDE          reduce using rule 52 (factor -> MINUS varcte .)
    PLUS            reduce using rule 52 (factor -> MINUS varcte .)
    MINUS           reduce using rule 52 (factor -> MINUS varcte .)
    COMPARISON      reduce using rule 52 (factor -> MINUS varcte .)
    ID              reduce using rule 52 (factor -> MINUS varcte .)
    FUNC            reduce using rule 52 (factor -> MINUS varcte .)
    $end            reduce using rule 52 (factor -> MINUS varcte .)
    INT             reduce using rule 52 (factor -> MINUS varcte .)
    FLOAT           reduce using rule 52 (factor -> MINUS varcte .)
    BOOLEAN         reduce using rule 52 (factor -> MINUS varcte .)
    IF              reduce using rule 52 (factor -> MINUS varcte .)
    WHILE           reduce using rule 52 (factor -> MINUS varcte .)
    PRINT           reduce using rule 52 (factor -> MINUS varcte .)
    LIST            reduce using rule 52 (factor -> MINUS varcte .)
    MOVE            reduce using rule 52 (factor -> MINUS varcte .)
    EAT             reduce using rule 52 (factor -> MINUS varcte .)
    CLEAN           reduce using rule 52 (factor -> MINUS varcte .)
    PLAY            reduce using rule 52 (factor -> MINUS varcte .)
    TURNLEFT        reduce using rule 52 (factor -> MINUS varcte .)
    TURNRIGHT       reduce using rule 52 (factor -> MINUS varcte .)
    RCBRACKET       reduce using rule 52 (factor -> MINUS varcte .)
    RPAR            reduce using rule 52 (factor -> MINUS varcte .)
    COMA            reduce using rule 52 (factor -> MINUS varcte .)


state 79

    (53) factor -> varcte termino_val .

    MULTIPLY        reduce using rule 53 (factor -> varcte termino_val .)
    DIVIDE          reduce using rule 53 (factor -> varcte termino_val .)
    PLUS            reduce using rule 53 (factor -> varcte termino_val .)
    MINUS           reduce using rule 53 (factor -> varcte termino_val .)
    COMPARISON      reduce using rule 53 (factor -> varcte termino_val .)
    ID              reduce using rule 53 (factor -> varcte termino_val .)
    FUNC            reduce using rule 53 (factor -> varcte termino_val .)
    $end            reduce using rule 53 (factor -> varcte termino_val .)
    INT             reduce using rule 53 (factor -> varcte termino_val .)
    FLOAT           reduce using rule 53 (factor -> varcte termino_val .)
    BOOLEAN         reduce using rule 53 (factor -> varcte termino_val .)
    IF              reduce using rule 53 (factor -> varcte termino_val .)
    WHILE           reduce using rule 53 (factor -> varcte termino_val .)
    PRINT           reduce using rule 53 (factor -> varcte termino_val .)
    LIST            reduce using rule 53 (factor -> varcte termino_val .)
    MOVE            reduce using rule 53 (factor -> varcte termino_val .)
    EAT             reduce using rule 53 (factor -> varcte termino_val .)
    CLEAN           reduce using rule 53 (factor -> varcte termino_val .)
    PLAY            reduce using rule 53 (factor -> varcte termino_val .)
    TURNLEFT        reduce using rule 53 (factor -> varcte termino_val .)
    TURNRIGHT       reduce using rule 53 (factor -> varcte termino_val .)
    RCBRACKET       reduce using rule 53 (factor -> varcte termino_val .)
    RPAR            reduce using rule 53 (factor -> varcte termino_val .)
    COMA            reduce using rule 53 (factor -> varcte termino_val .)


state 80

    (42) expression -> exp termino_val . COMPARISON op_val expression

    COMPARISON      shift and go to state 102


state 81

    (47) termino -> factor MULTIPLY . op_val termino
    (50) op_val -> .

    LPAR            reduce using rule 50 (op_val -> .)
    MINUS           reduce using rule 50 (op_val -> .)
    ID              reduce using rule 50 (op_val -> .)
    NUMINT          reduce using rule 50 (op_val -> .)
    NUMFLOAT        reduce using rule 50 (op_val -> .)
    BOOLEANTYPE     reduce using rule 50 (op_val -> .)

    op_val                         shift and go to state 103

state 82

    (48) termino -> factor DIVIDE . op_val termino
    (50) op_val -> .

    LPAR            reduce using rule 50 (op_val -> .)
    MINUS           reduce using rule 50 (op_val -> .)
    ID              reduce using rule 50 (op_val -> .)
    NUMINT          reduce using rule 50 (op_val -> .)
    NUMFLOAT        reduce using rule 50 (op_val -> .)
    BOOLEANTYPE     reduce using rule 50 (op_val -> .)

    op_val                         shift and go to state 104

state 83

    (44) exp -> termino PLUS . op_val exp
    (50) op_val -> .

    LPAR            reduce using rule 50 (op_val -> .)
    MINUS           reduce using rule 50 (op_val -> .)
    ID              reduce using rule 50 (op_val -> .)
    NUMINT          reduce using rule 50 (op_val -> .)
    NUMFLOAT        reduce using rule 50 (op_val -> .)
    BOOLEANTYPE     reduce using rule 50 (op_val -> .)

    op_val                         shift and go to state 105

state 84

    (45) exp -> termino MINUS . op_val exp
    (50) op_val -> .

    LPAR            reduce using rule 50 (op_val -> .)
    MINUS           reduce using rule 50 (op_val -> .)
    ID              reduce using rule 50 (op_val -> .)
    NUMINT          reduce using rule 50 (op_val -> .)
    NUMFLOAT        reduce using rule 50 (op_val -> .)
    BOOLEANTYPE     reduce using rule 50 (op_val -> .)

    op_val                         shift and go to state 106

state 85

    (16) blockx -> vars blockx .

    RCBRACKET       reduce using rule 16 (blockx -> vars blockx .)


state 86

    (63) cycle -> WHILE cycle_1 . LPAR exp RPAR cycle_2 block cycle_3

    LPAR            shift and go to state 107


state 87

    (58) print -> PRINT LPAR . printx RPAR
    (59) printx -> . expression
    (60) printx -> . STRING
    (61) printx -> . expression COMA printx
    (62) printx -> . STRING COMA printx
    (41) expression -> . exp
    (42) expression -> . exp termino_val COMPARISON op_val expression
    (43) exp -> . termino
    (44) exp -> . termino PLUS op_val exp
    (45) exp -> . termino MINUS op_val exp
    (46) termino -> . factor
    (47) termino -> . factor MULTIPLY op_val termino
    (48) termino -> . factor DIVIDE op_val termino
    (51) factor -> . LPAR expression RPAR
    (52) factor -> . MINUS varcte
    (53) factor -> . varcte termino_val
    (54) varcte -> . ID
    (55) varcte -> . NUMINT
    (56) varcte -> . NUMFLOAT
    (57) varcte -> . BOOLEANTYPE

    STRING          shift and go to state 109
    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 42

    varcte                         shift and go to state 40
    printx                         shift and go to state 108
    exp                            shift and go to state 43
    factor                         shift and go to state 44
    expression                     shift and go to state 110
    termino                        shift and go to state 47

state 88

    (73) list -> LIST idCheck_List . EQUAL LBRACKET listx RBRACKET

    EQUAL           shift and go to state 111


state 89

    (80) idCheck_List -> ID .

    EQUAL           reduce using rule 80 (idCheck_List -> ID .)


state 90

    (86) add -> ID idCheck_Add . POINT ADD LPAR listx_add RPAR
    (88) remove -> ID idCheck_Add . POINT REMOVE LPAR RPAR

    POINT           shift and go to state 112


state 91

    (89) call -> ID id_call . LPAR RPAR
    (90) call -> ID id_call . LPAR par_call params RPAR

    LPAR            shift and go to state 113


state 92

    (18) blockx -> statement blockx .

    RCBRACKET       reduce using rule 18 (blockx -> statement blockx .)


state 93

    (67) condition -> IF LPAR . exp RPAR cond_1 block else cond_2
    (43) exp -> . termino
    (44) exp -> . termino PLUS op_val exp
    (45) exp -> . termino MINUS op_val exp
    (46) termino -> . factor
    (47) termino -> . factor MULTIPLY op_val termino
    (48) termino -> . factor DIVIDE op_val termino
    (51) factor -> . LPAR expression RPAR
    (52) factor -> . MINUS varcte
    (53) factor -> . varcte termino_val
    (54) varcte -> . ID
    (55) varcte -> . NUMINT
    (56) varcte -> . NUMFLOAT
    (57) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 42

    varcte                         shift and go to state 40
    termino                        shift and go to state 47
    exp                            shift and go to state 114
    factor                         shift and go to state 44

state 94

    (98) eat -> EAT LPAR . ID RPAR

    ID              shift and go to state 115


state 95

    (100) play -> PLAY LPAR . ID RPAR

    ID              shift and go to state 116


state 96

    (97) move -> MOVE LPAR . ID RPAR

    ID              shift and go to state 117


state 97

    (14) block -> LCBRACKET blockx RCBRACKET .

    INT             reduce using rule 14 (block -> LCBRACKET blockx RCBRACKET .)
    FLOAT           reduce using rule 14 (block -> LCBRACKET blockx RCBRACKET .)
    BOOLEAN         reduce using rule 14 (block -> LCBRACKET blockx RCBRACKET .)
    ID              reduce using rule 14 (block -> LCBRACKET blockx RCBRACKET .)
    IF              reduce using rule 14 (block -> LCBRACKET blockx RCBRACKET .)
    WHILE           reduce using rule 14 (block -> LCBRACKET blockx RCBRACKET .)
    PRINT           reduce using rule 14 (block -> LCBRACKET blockx RCBRACKET .)
    LIST            reduce using rule 14 (block -> LCBRACKET blockx RCBRACKET .)
    MOVE            reduce using rule 14 (block -> LCBRACKET blockx RCBRACKET .)
    EAT             reduce using rule 14 (block -> LCBRACKET blockx RCBRACKET .)
    CLEAN           reduce using rule 14 (block -> LCBRACKET blockx RCBRACKET .)
    PLAY            reduce using rule 14 (block -> LCBRACKET blockx RCBRACKET .)
    TURNLEFT        reduce using rule 14 (block -> LCBRACKET blockx RCBRACKET .)
    TURNRIGHT       reduce using rule 14 (block -> LCBRACKET blockx RCBRACKET .)
    RCBRACKET       reduce using rule 14 (block -> LCBRACKET blockx RCBRACKET .)
    ELSE            reduce using rule 14 (block -> LCBRACKET blockx RCBRACKET .)
    FUNC            reduce using rule 14 (block -> LCBRACKET blockx RCBRACKET .)
    $end            reduce using rule 14 (block -> LCBRACKET blockx RCBRACKET .)


state 98

    (102) turnright -> TURNRIGHT LPAR . RPAR

    RPAR            shift and go to state 118


state 99

    (99) clean -> CLEAN LPAR . ID RPAR

    ID              shift and go to state 119


state 100

    (101) turnleft -> TURNLEFT LPAR . RPAR

    RPAR            shift and go to state 120


state 101

    (51) factor -> LPAR expression RPAR .

    MULTIPLY        reduce using rule 51 (factor -> LPAR expression RPAR .)
    DIVIDE          reduce using rule 51 (factor -> LPAR expression RPAR .)
    PLUS            reduce using rule 51 (factor -> LPAR expression RPAR .)
    MINUS           reduce using rule 51 (factor -> LPAR expression RPAR .)
    COMPARISON      reduce using rule 51 (factor -> LPAR expression RPAR .)
    ID              reduce using rule 51 (factor -> LPAR expression RPAR .)
    FUNC            reduce using rule 51 (factor -> LPAR expression RPAR .)
    $end            reduce using rule 51 (factor -> LPAR expression RPAR .)
    INT             reduce using rule 51 (factor -> LPAR expression RPAR .)
    FLOAT           reduce using rule 51 (factor -> LPAR expression RPAR .)
    BOOLEAN         reduce using rule 51 (factor -> LPAR expression RPAR .)
    IF              reduce using rule 51 (factor -> LPAR expression RPAR .)
    WHILE           reduce using rule 51 (factor -> LPAR expression RPAR .)
    PRINT           reduce using rule 51 (factor -> LPAR expression RPAR .)
    LIST            reduce using rule 51 (factor -> LPAR expression RPAR .)
    MOVE            reduce using rule 51 (factor -> LPAR expression RPAR .)
    EAT             reduce using rule 51 (factor -> LPAR expression RPAR .)
    CLEAN           reduce using rule 51 (factor -> LPAR expression RPAR .)
    PLAY            reduce using rule 51 (factor -> LPAR expression RPAR .)
    TURNLEFT        reduce using rule 51 (factor -> LPAR expression RPAR .)
    TURNRIGHT       reduce using rule 51 (factor -> LPAR expression RPAR .)
    RCBRACKET       reduce using rule 51 (factor -> LPAR expression RPAR .)
    RPAR            reduce using rule 51 (factor -> LPAR expression RPAR .)
    COMA            reduce using rule 51 (factor -> LPAR expression RPAR .)


state 102

    (42) expression -> exp termino_val COMPARISON . op_val expression
    (50) op_val -> .

    LPAR            reduce using rule 50 (op_val -> .)
    MINUS           reduce using rule 50 (op_val -> .)
    ID              reduce using rule 50 (op_val -> .)
    NUMINT          reduce using rule 50 (op_val -> .)
    NUMFLOAT        reduce using rule 50 (op_val -> .)
    BOOLEANTYPE     reduce using rule 50 (op_val -> .)

    op_val                         shift and go to state 121

state 103

    (47) termino -> factor MULTIPLY op_val . termino
    (46) termino -> . factor
    (47) termino -> . factor MULTIPLY op_val termino
    (48) termino -> . factor DIVIDE op_val termino
    (51) factor -> . LPAR expression RPAR
    (52) factor -> . MINUS varcte
    (53) factor -> . varcte termino_val
    (54) varcte -> . ID
    (55) varcte -> . NUMINT
    (56) varcte -> . NUMFLOAT
    (57) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 42

    varcte                         shift and go to state 40
    factor                         shift and go to state 44
    termino                        shift and go to state 122

state 104

    (48) termino -> factor DIVIDE op_val . termino
    (46) termino -> . factor
    (47) termino -> . factor MULTIPLY op_val termino
    (48) termino -> . factor DIVIDE op_val termino
    (51) factor -> . LPAR expression RPAR
    (52) factor -> . MINUS varcte
    (53) factor -> . varcte termino_val
    (54) varcte -> . ID
    (55) varcte -> . NUMINT
    (56) varcte -> . NUMFLOAT
    (57) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 42

    varcte                         shift and go to state 40
    factor                         shift and go to state 44
    termino                        shift and go to state 123

state 105

    (44) exp -> termino PLUS op_val . exp
    (43) exp -> . termino
    (44) exp -> . termino PLUS op_val exp
    (45) exp -> . termino MINUS op_val exp
    (46) termino -> . factor
    (47) termino -> . factor MULTIPLY op_val termino
    (48) termino -> . factor DIVIDE op_val termino
    (51) factor -> . LPAR expression RPAR
    (52) factor -> . MINUS varcte
    (53) factor -> . varcte termino_val
    (54) varcte -> . ID
    (55) varcte -> . NUMINT
    (56) varcte -> . NUMFLOAT
    (57) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 42

    varcte                         shift and go to state 40
    termino                        shift and go to state 47
    exp                            shift and go to state 124
    factor                         shift and go to state 44

state 106

    (45) exp -> termino MINUS op_val . exp
    (43) exp -> . termino
    (44) exp -> . termino PLUS op_val exp
    (45) exp -> . termino MINUS op_val exp
    (46) termino -> . factor
    (47) termino -> . factor MULTIPLY op_val termino
    (48) termino -> . factor DIVIDE op_val termino
    (51) factor -> . LPAR expression RPAR
    (52) factor -> . MINUS varcte
    (53) factor -> . varcte termino_val
    (54) varcte -> . ID
    (55) varcte -> . NUMINT
    (56) varcte -> . NUMFLOAT
    (57) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 42

    varcte                         shift and go to state 40
    termino                        shift and go to state 47
    exp                            shift and go to state 125
    factor                         shift and go to state 44

state 107

    (63) cycle -> WHILE cycle_1 LPAR . exp RPAR cycle_2 block cycle_3
    (43) exp -> . termino
    (44) exp -> . termino PLUS op_val exp
    (45) exp -> . termino MINUS op_val exp
    (46) termino -> . factor
    (47) termino -> . factor MULTIPLY op_val termino
    (48) termino -> . factor DIVIDE op_val termino
    (51) factor -> . LPAR expression RPAR
    (52) factor -> . MINUS varcte
    (53) factor -> . varcte termino_val
    (54) varcte -> . ID
    (55) varcte -> . NUMINT
    (56) varcte -> . NUMFLOAT
    (57) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 42

    termino                        shift and go to state 47
    exp                            shift and go to state 126
    factor                         shift and go to state 44
    varcte                         shift and go to state 40

state 108

    (58) print -> PRINT LPAR printx . RPAR

    RPAR            shift and go to state 127


state 109

    (60) printx -> STRING .
    (62) printx -> STRING . COMA printx

    RPAR            reduce using rule 60 (printx -> STRING .)
    COMA            shift and go to state 128


state 110

    (59) printx -> expression .
    (61) printx -> expression . COMA printx

    RPAR            reduce using rule 59 (printx -> expression .)
    COMA            shift and go to state 129


state 111

    (73) list -> LIST idCheck_List EQUAL . LBRACKET listx RBRACKET

    LBRACKET        shift and go to state 130


state 112

    (86) add -> ID idCheck_Add POINT . ADD LPAR listx_add RPAR
    (88) remove -> ID idCheck_Add POINT . REMOVE LPAR RPAR

    ADD             shift and go to state 132
    REMOVE          shift and go to state 131


state 113

    (89) call -> ID id_call LPAR . RPAR
    (90) call -> ID id_call LPAR . par_call params RPAR
    (92) par_call -> .

    RPAR            shift and go to state 134
    ID              reduce using rule 92 (par_call -> .)
    LPAR            reduce using rule 92 (par_call -> .)
    MINUS           reduce using rule 92 (par_call -> .)
    NUMINT          reduce using rule 92 (par_call -> .)
    NUMFLOAT        reduce using rule 92 (par_call -> .)
    BOOLEANTYPE     reduce using rule 92 (par_call -> .)

    par_call                       shift and go to state 133

state 114

    (67) condition -> IF LPAR exp . RPAR cond_1 block else cond_2

    RPAR            shift and go to state 135


state 115

    (98) eat -> EAT LPAR ID . RPAR

    RPAR            shift and go to state 136


state 116

    (100) play -> PLAY LPAR ID . RPAR

    RPAR            shift and go to state 137


state 117

    (97) move -> MOVE LPAR ID . RPAR

    RPAR            shift and go to state 138


state 118

    (102) turnright -> TURNRIGHT LPAR RPAR .

    INT             reduce using rule 102 (turnright -> TURNRIGHT LPAR RPAR .)
    FLOAT           reduce using rule 102 (turnright -> TURNRIGHT LPAR RPAR .)
    BOOLEAN         reduce using rule 102 (turnright -> TURNRIGHT LPAR RPAR .)
    ID              reduce using rule 102 (turnright -> TURNRIGHT LPAR RPAR .)
    IF              reduce using rule 102 (turnright -> TURNRIGHT LPAR RPAR .)
    WHILE           reduce using rule 102 (turnright -> TURNRIGHT LPAR RPAR .)
    PRINT           reduce using rule 102 (turnright -> TURNRIGHT LPAR RPAR .)
    LIST            reduce using rule 102 (turnright -> TURNRIGHT LPAR RPAR .)
    MOVE            reduce using rule 102 (turnright -> TURNRIGHT LPAR RPAR .)
    EAT             reduce using rule 102 (turnright -> TURNRIGHT LPAR RPAR .)
    CLEAN           reduce using rule 102 (turnright -> TURNRIGHT LPAR RPAR .)
    PLAY            reduce using rule 102 (turnright -> TURNRIGHT LPAR RPAR .)
    TURNLEFT        reduce using rule 102 (turnright -> TURNRIGHT LPAR RPAR .)
    TURNRIGHT       reduce using rule 102 (turnright -> TURNRIGHT LPAR RPAR .)
    RCBRACKET       reduce using rule 102 (turnright -> TURNRIGHT LPAR RPAR .)


state 119

    (99) clean -> CLEAN LPAR ID . RPAR

    RPAR            shift and go to state 139


state 120

    (101) turnleft -> TURNLEFT LPAR RPAR .

    INT             reduce using rule 101 (turnleft -> TURNLEFT LPAR RPAR .)
    FLOAT           reduce using rule 101 (turnleft -> TURNLEFT LPAR RPAR .)
    BOOLEAN         reduce using rule 101 (turnleft -> TURNLEFT LPAR RPAR .)
    ID              reduce using rule 101 (turnleft -> TURNLEFT LPAR RPAR .)
    IF              reduce using rule 101 (turnleft -> TURNLEFT LPAR RPAR .)
    WHILE           reduce using rule 101 (turnleft -> TURNLEFT LPAR RPAR .)
    PRINT           reduce using rule 101 (turnleft -> TURNLEFT LPAR RPAR .)
    LIST            reduce using rule 101 (turnleft -> TURNLEFT LPAR RPAR .)
    MOVE            reduce using rule 101 (turnleft -> TURNLEFT LPAR RPAR .)
    EAT             reduce using rule 101 (turnleft -> TURNLEFT LPAR RPAR .)
    CLEAN           reduce using rule 101 (turnleft -> TURNLEFT LPAR RPAR .)
    PLAY            reduce using rule 101 (turnleft -> TURNLEFT LPAR RPAR .)
    TURNLEFT        reduce using rule 101 (turnleft -> TURNLEFT LPAR RPAR .)
    TURNRIGHT       reduce using rule 101 (turnleft -> TURNLEFT LPAR RPAR .)
    RCBRACKET       reduce using rule 101 (turnleft -> TURNLEFT LPAR RPAR .)


state 121

    (42) expression -> exp termino_val COMPARISON op_val . expression
    (41) expression -> . exp
    (42) expression -> . exp termino_val COMPARISON op_val expression
    (43) exp -> . termino
    (44) exp -> . termino PLUS op_val exp
    (45) exp -> . termino MINUS op_val exp
    (46) termino -> . factor
    (47) termino -> . factor MULTIPLY op_val termino
    (48) termino -> . factor DIVIDE op_val termino
    (51) factor -> . LPAR expression RPAR
    (52) factor -> . MINUS varcte
    (53) factor -> . varcte termino_val
    (54) varcte -> . ID
    (55) varcte -> . NUMINT
    (56) varcte -> . NUMFLOAT
    (57) varcte -> . BOOLEANTYPE

    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 42

    varcte                         shift and go to state 40
    exp                            shift and go to state 43
    factor                         shift and go to state 44
    expression                     shift and go to state 140
    termino                        shift and go to state 47

state 122

    (47) termino -> factor MULTIPLY op_val termino .

    PLUS            reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    MINUS           reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    COMPARISON      reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    COMA            reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    RPAR            reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    ID              reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    FUNC            reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    $end            reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    INT             reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    FLOAT           reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    BOOLEAN         reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    IF              reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    WHILE           reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    PRINT           reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    LIST            reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    MOVE            reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    EAT             reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    CLEAN           reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    PLAY            reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    TURNLEFT        reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    TURNRIGHT       reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)
    RCBRACKET       reduce using rule 47 (termino -> factor MULTIPLY op_val termino .)


state 123

    (48) termino -> factor DIVIDE op_val termino .

    PLUS            reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    MINUS           reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    COMPARISON      reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    COMA            reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    RPAR            reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    ID              reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    FUNC            reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    $end            reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    INT             reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    FLOAT           reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    BOOLEAN         reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    IF              reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    WHILE           reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    PRINT           reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    LIST            reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    MOVE            reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    EAT             reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    CLEAN           reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    PLAY            reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    TURNLEFT        reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    TURNRIGHT       reduce using rule 48 (termino -> factor DIVIDE op_val termino .)
    RCBRACKET       reduce using rule 48 (termino -> factor DIVIDE op_val termino .)


state 124

    (44) exp -> termino PLUS op_val exp .

    COMPARISON      reduce using rule 44 (exp -> termino PLUS op_val exp .)
    COMA            reduce using rule 44 (exp -> termino PLUS op_val exp .)
    RPAR            reduce using rule 44 (exp -> termino PLUS op_val exp .)
    ID              reduce using rule 44 (exp -> termino PLUS op_val exp .)
    FUNC            reduce using rule 44 (exp -> termino PLUS op_val exp .)
    $end            reduce using rule 44 (exp -> termino PLUS op_val exp .)
    INT             reduce using rule 44 (exp -> termino PLUS op_val exp .)
    FLOAT           reduce using rule 44 (exp -> termino PLUS op_val exp .)
    BOOLEAN         reduce using rule 44 (exp -> termino PLUS op_val exp .)
    IF              reduce using rule 44 (exp -> termino PLUS op_val exp .)
    WHILE           reduce using rule 44 (exp -> termino PLUS op_val exp .)
    PRINT           reduce using rule 44 (exp -> termino PLUS op_val exp .)
    LIST            reduce using rule 44 (exp -> termino PLUS op_val exp .)
    MOVE            reduce using rule 44 (exp -> termino PLUS op_val exp .)
    EAT             reduce using rule 44 (exp -> termino PLUS op_val exp .)
    CLEAN           reduce using rule 44 (exp -> termino PLUS op_val exp .)
    PLAY            reduce using rule 44 (exp -> termino PLUS op_val exp .)
    TURNLEFT        reduce using rule 44 (exp -> termino PLUS op_val exp .)
    TURNRIGHT       reduce using rule 44 (exp -> termino PLUS op_val exp .)
    RCBRACKET       reduce using rule 44 (exp -> termino PLUS op_val exp .)


state 125

    (45) exp -> termino MINUS op_val exp .

    COMPARISON      reduce using rule 45 (exp -> termino MINUS op_val exp .)
    COMA            reduce using rule 45 (exp -> termino MINUS op_val exp .)
    RPAR            reduce using rule 45 (exp -> termino MINUS op_val exp .)
    ID              reduce using rule 45 (exp -> termino MINUS op_val exp .)
    FUNC            reduce using rule 45 (exp -> termino MINUS op_val exp .)
    $end            reduce using rule 45 (exp -> termino MINUS op_val exp .)
    INT             reduce using rule 45 (exp -> termino MINUS op_val exp .)
    FLOAT           reduce using rule 45 (exp -> termino MINUS op_val exp .)
    BOOLEAN         reduce using rule 45 (exp -> termino MINUS op_val exp .)
    IF              reduce using rule 45 (exp -> termino MINUS op_val exp .)
    WHILE           reduce using rule 45 (exp -> termino MINUS op_val exp .)
    PRINT           reduce using rule 45 (exp -> termino MINUS op_val exp .)
    LIST            reduce using rule 45 (exp -> termino MINUS op_val exp .)
    MOVE            reduce using rule 45 (exp -> termino MINUS op_val exp .)
    EAT             reduce using rule 45 (exp -> termino MINUS op_val exp .)
    CLEAN           reduce using rule 45 (exp -> termino MINUS op_val exp .)
    PLAY            reduce using rule 45 (exp -> termino MINUS op_val exp .)
    TURNLEFT        reduce using rule 45 (exp -> termino MINUS op_val exp .)
    TURNRIGHT       reduce using rule 45 (exp -> termino MINUS op_val exp .)
    RCBRACKET       reduce using rule 45 (exp -> termino MINUS op_val exp .)


state 126

    (63) cycle -> WHILE cycle_1 LPAR exp . RPAR cycle_2 block cycle_3

    RPAR            shift and go to state 141


state 127

    (58) print -> PRINT LPAR printx RPAR .

    INT             reduce using rule 58 (print -> PRINT LPAR printx RPAR .)
    FLOAT           reduce using rule 58 (print -> PRINT LPAR printx RPAR .)
    BOOLEAN         reduce using rule 58 (print -> PRINT LPAR printx RPAR .)
    ID              reduce using rule 58 (print -> PRINT LPAR printx RPAR .)
    IF              reduce using rule 58 (print -> PRINT LPAR printx RPAR .)
    WHILE           reduce using rule 58 (print -> PRINT LPAR printx RPAR .)
    PRINT           reduce using rule 58 (print -> PRINT LPAR printx RPAR .)
    LIST            reduce using rule 58 (print -> PRINT LPAR printx RPAR .)
    MOVE            reduce using rule 58 (print -> PRINT LPAR printx RPAR .)
    EAT             reduce using rule 58 (print -> PRINT LPAR printx RPAR .)
    CLEAN           reduce using rule 58 (print -> PRINT LPAR printx RPAR .)
    PLAY            reduce using rule 58 (print -> PRINT LPAR printx RPAR .)
    TURNLEFT        reduce using rule 58 (print -> PRINT LPAR printx RPAR .)
    TURNRIGHT       reduce using rule 58 (print -> PRINT LPAR printx RPAR .)
    RCBRACKET       reduce using rule 58 (print -> PRINT LPAR printx RPAR .)


state 128

    (62) printx -> STRING COMA . printx
    (59) printx -> . expression
    (60) printx -> . STRING
    (61) printx -> . expression COMA printx
    (62) printx -> . STRING COMA printx
    (41) expression -> . exp
    (42) expression -> . exp termino_val COMPARISON op_val expression
    (43) exp -> . termino
    (44) exp -> . termino PLUS op_val exp
    (45) exp -> . termino MINUS op_val exp
    (46) termino -> . factor
    (47) termino -> . factor MULTIPLY op_val termino
    (48) termino -> . factor DIVIDE op_val termino
    (51) factor -> . LPAR expression RPAR
    (52) factor -> . MINUS varcte
    (53) factor -> . varcte termino_val
    (54) varcte -> . ID
    (55) varcte -> . NUMINT
    (56) varcte -> . NUMFLOAT
    (57) varcte -> . BOOLEANTYPE

    STRING          shift and go to state 109
    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 42

    varcte                         shift and go to state 40
    printx                         shift and go to state 142
    exp                            shift and go to state 43
    factor                         shift and go to state 44
    expression                     shift and go to state 110
    termino                        shift and go to state 47

state 129

    (61) printx -> expression COMA . printx
    (59) printx -> . expression
    (60) printx -> . STRING
    (61) printx -> . expression COMA printx
    (62) printx -> . STRING COMA printx
    (41) expression -> . exp
    (42) expression -> . exp termino_val COMPARISON op_val expression
    (43) exp -> . termino
    (44) exp -> . termino PLUS op_val exp
    (45) exp -> . termino MINUS op_val exp
    (46) termino -> . factor
    (47) termino -> . factor MULTIPLY op_val termino
    (48) termino -> . factor DIVIDE op_val termino
    (51) factor -> . LPAR expression RPAR
    (52) factor -> . MINUS varcte
    (53) factor -> . varcte termino_val
    (54) varcte -> . ID
    (55) varcte -> . NUMINT
    (56) varcte -> . NUMFLOAT
    (57) varcte -> . BOOLEANTYPE

    STRING          shift and go to state 109
    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 41
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 42

    varcte                         shift and go to state 40
    printx                         shift and go to state 143
    exp                            shift and go to state 43
    factor                         shift and go to state 44
    expression                     shift and go to state 110
    termino                        shift and go to state 47

state 130

    (73) list -> LIST idCheck_List EQUAL LBRACKET . listx RBRACKET
    (74) listx -> . ID id_param
    (75) listx -> . ID id_param COMA listx
    (76) listx -> . NUMINT id_param
    (77) listx -> . NUMINT id_param COMA listx
    (78) listx -> . NUMFLOAT id_param
    (79) listx -> . NUMFLOAT id_param COMA listx

    ID              shift and go to state 147
    NUMINT          shift and go to state 145
    NUMFLOAT        shift and go to state 146

    listx                          shift and go to state 144

state 131

    (88) remove -> ID idCheck_Add POINT REMOVE . LPAR RPAR

    LPAR            shift and go to state 148


state 132

    (86) add -> ID idCheck_Add POINT ADD . LPAR listx_add RPAR

    LPAR            shift and go to state 149


state 133

    (90) call -> ID id_call LPAR par_call . params RPAR
    (93) params -> . expression COMA params
    (94) params -> . ID COMA params
    (95) params -> . expression
    (96) params -> . ID
    (41) expression -> . exp
    (42) expression -> . exp termino_val COMPARISON op_val expression
    (43) exp -> . termino
    (44) exp -> . termino PLUS op_val exp
    (45) exp -> . termino MINUS op_val exp
    (46) termino -> . factor
    (47) termino -> . factor MULTIPLY op_val termino
    (48) termino -> . factor DIVIDE op_val termino
    (51) factor -> . LPAR expression RPAR
    (52) factor -> . MINUS varcte
    (53) factor -> . varcte termino_val
    (54) varcte -> . ID
    (55) varcte -> . NUMINT
    (56) varcte -> . NUMFLOAT
    (57) varcte -> . BOOLEANTYPE

    ID              shift and go to state 151
    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 42

    varcte                         shift and go to state 40
    params                         shift and go to state 150
    exp                            shift and go to state 43
    factor                         shift and go to state 44
    expression                     shift and go to state 152
    termino                        shift and go to state 47

state 134

    (89) call -> ID id_call LPAR RPAR .

    INT             reduce using rule 89 (call -> ID id_call LPAR RPAR .)
    FLOAT           reduce using rule 89 (call -> ID id_call LPAR RPAR .)
    BOOLEAN         reduce using rule 89 (call -> ID id_call LPAR RPAR .)
    ID              reduce using rule 89 (call -> ID id_call LPAR RPAR .)
    IF              reduce using rule 89 (call -> ID id_call LPAR RPAR .)
    WHILE           reduce using rule 89 (call -> ID id_call LPAR RPAR .)
    PRINT           reduce using rule 89 (call -> ID id_call LPAR RPAR .)
    LIST            reduce using rule 89 (call -> ID id_call LPAR RPAR .)
    MOVE            reduce using rule 89 (call -> ID id_call LPAR RPAR .)
    EAT             reduce using rule 89 (call -> ID id_call LPAR RPAR .)
    CLEAN           reduce using rule 89 (call -> ID id_call LPAR RPAR .)
    PLAY            reduce using rule 89 (call -> ID id_call LPAR RPAR .)
    TURNLEFT        reduce using rule 89 (call -> ID id_call LPAR RPAR .)
    TURNRIGHT       reduce using rule 89 (call -> ID id_call LPAR RPAR .)
    RCBRACKET       reduce using rule 89 (call -> ID id_call LPAR RPAR .)


state 135

    (67) condition -> IF LPAR exp RPAR . cond_1 block else cond_2
    (70) cond_1 -> .

    LCBRACKET       reduce using rule 70 (cond_1 -> .)

    cond_1                         shift and go to state 153

state 136

    (98) eat -> EAT LPAR ID RPAR .

    INT             reduce using rule 98 (eat -> EAT LPAR ID RPAR .)
    FLOAT           reduce using rule 98 (eat -> EAT LPAR ID RPAR .)
    BOOLEAN         reduce using rule 98 (eat -> EAT LPAR ID RPAR .)
    ID              reduce using rule 98 (eat -> EAT LPAR ID RPAR .)
    IF              reduce using rule 98 (eat -> EAT LPAR ID RPAR .)
    WHILE           reduce using rule 98 (eat -> EAT LPAR ID RPAR .)
    PRINT           reduce using rule 98 (eat -> EAT LPAR ID RPAR .)
    LIST            reduce using rule 98 (eat -> EAT LPAR ID RPAR .)
    MOVE            reduce using rule 98 (eat -> EAT LPAR ID RPAR .)
    EAT             reduce using rule 98 (eat -> EAT LPAR ID RPAR .)
    CLEAN           reduce using rule 98 (eat -> EAT LPAR ID RPAR .)
    PLAY            reduce using rule 98 (eat -> EAT LPAR ID RPAR .)
    TURNLEFT        reduce using rule 98 (eat -> EAT LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 98 (eat -> EAT LPAR ID RPAR .)
    RCBRACKET       reduce using rule 98 (eat -> EAT LPAR ID RPAR .)


state 137

    (100) play -> PLAY LPAR ID RPAR .

    INT             reduce using rule 100 (play -> PLAY LPAR ID RPAR .)
    FLOAT           reduce using rule 100 (play -> PLAY LPAR ID RPAR .)
    BOOLEAN         reduce using rule 100 (play -> PLAY LPAR ID RPAR .)
    ID              reduce using rule 100 (play -> PLAY LPAR ID RPAR .)
    IF              reduce using rule 100 (play -> PLAY LPAR ID RPAR .)
    WHILE           reduce using rule 100 (play -> PLAY LPAR ID RPAR .)
    PRINT           reduce using rule 100 (play -> PLAY LPAR ID RPAR .)
    LIST            reduce using rule 100 (play -> PLAY LPAR ID RPAR .)
    MOVE            reduce using rule 100 (play -> PLAY LPAR ID RPAR .)
    EAT             reduce using rule 100 (play -> PLAY LPAR ID RPAR .)
    CLEAN           reduce using rule 100 (play -> PLAY LPAR ID RPAR .)
    PLAY            reduce using rule 100 (play -> PLAY LPAR ID RPAR .)
    TURNLEFT        reduce using rule 100 (play -> PLAY LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 100 (play -> PLAY LPAR ID RPAR .)
    RCBRACKET       reduce using rule 100 (play -> PLAY LPAR ID RPAR .)


state 138

    (97) move -> MOVE LPAR ID RPAR .

    INT             reduce using rule 97 (move -> MOVE LPAR ID RPAR .)
    FLOAT           reduce using rule 97 (move -> MOVE LPAR ID RPAR .)
    BOOLEAN         reduce using rule 97 (move -> MOVE LPAR ID RPAR .)
    ID              reduce using rule 97 (move -> MOVE LPAR ID RPAR .)
    IF              reduce using rule 97 (move -> MOVE LPAR ID RPAR .)
    WHILE           reduce using rule 97 (move -> MOVE LPAR ID RPAR .)
    PRINT           reduce using rule 97 (move -> MOVE LPAR ID RPAR .)
    LIST            reduce using rule 97 (move -> MOVE LPAR ID RPAR .)
    MOVE            reduce using rule 97 (move -> MOVE LPAR ID RPAR .)
    EAT             reduce using rule 97 (move -> MOVE LPAR ID RPAR .)
    CLEAN           reduce using rule 97 (move -> MOVE LPAR ID RPAR .)
    PLAY            reduce using rule 97 (move -> MOVE LPAR ID RPAR .)
    TURNLEFT        reduce using rule 97 (move -> MOVE LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 97 (move -> MOVE LPAR ID RPAR .)
    RCBRACKET       reduce using rule 97 (move -> MOVE LPAR ID RPAR .)


state 139

    (99) clean -> CLEAN LPAR ID RPAR .

    INT             reduce using rule 99 (clean -> CLEAN LPAR ID RPAR .)
    FLOAT           reduce using rule 99 (clean -> CLEAN LPAR ID RPAR .)
    BOOLEAN         reduce using rule 99 (clean -> CLEAN LPAR ID RPAR .)
    ID              reduce using rule 99 (clean -> CLEAN LPAR ID RPAR .)
    IF              reduce using rule 99 (clean -> CLEAN LPAR ID RPAR .)
    WHILE           reduce using rule 99 (clean -> CLEAN LPAR ID RPAR .)
    PRINT           reduce using rule 99 (clean -> CLEAN LPAR ID RPAR .)
    LIST            reduce using rule 99 (clean -> CLEAN LPAR ID RPAR .)
    MOVE            reduce using rule 99 (clean -> CLEAN LPAR ID RPAR .)
    EAT             reduce using rule 99 (clean -> CLEAN LPAR ID RPAR .)
    CLEAN           reduce using rule 99 (clean -> CLEAN LPAR ID RPAR .)
    PLAY            reduce using rule 99 (clean -> CLEAN LPAR ID RPAR .)
    TURNLEFT        reduce using rule 99 (clean -> CLEAN LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 99 (clean -> CLEAN LPAR ID RPAR .)
    RCBRACKET       reduce using rule 99 (clean -> CLEAN LPAR ID RPAR .)


state 140

    (42) expression -> exp termino_val COMPARISON op_val expression .

    ID              reduce using rule 42 (expression -> exp termino_val COMPARISON op_val expression .)
    FUNC            reduce using rule 42 (expression -> exp termino_val COMPARISON op_val expression .)
    $end            reduce using rule 42 (expression -> exp termino_val COMPARISON op_val expression .)
    INT             reduce using rule 42 (expression -> exp termino_val COMPARISON op_val expression .)
    FLOAT           reduce using rule 42 (expression -> exp termino_val COMPARISON op_val expression .)
    BOOLEAN         reduce using rule 42 (expression -> exp termino_val COMPARISON op_val expression .)
    IF              reduce using rule 42 (expression -> exp termino_val COMPARISON op_val expression .)
    WHILE           reduce using rule 42 (expression -> exp termino_val COMPARISON op_val expression .)
    PRINT           reduce using rule 42 (expression -> exp termino_val COMPARISON op_val expression .)
    LIST            reduce using rule 42 (expression -> exp termino_val COMPARISON op_val expression .)
    MOVE            reduce using rule 42 (expression -> exp termino_val COMPARISON op_val expression .)
    EAT             reduce using rule 42 (expression -> exp termino_val COMPARISON op_val expression .)
    CLEAN           reduce using rule 42 (expression -> exp termino_val COMPARISON op_val expression .)
    PLAY            reduce using rule 42 (expression -> exp termino_val COMPARISON op_val expression .)
    TURNLEFT        reduce using rule 42 (expression -> exp termino_val COMPARISON op_val expression .)
    TURNRIGHT       reduce using rule 42 (expression -> exp termino_val COMPARISON op_val expression .)
    RCBRACKET       reduce using rule 42 (expression -> exp termino_val COMPARISON op_val expression .)
    RPAR            reduce using rule 42 (expression -> exp termino_val COMPARISON op_val expression .)
    COMA            reduce using rule 42 (expression -> exp termino_val COMPARISON op_val expression .)


state 141

    (63) cycle -> WHILE cycle_1 LPAR exp RPAR . cycle_2 block cycle_3
    (65) cycle_2 -> .

    LCBRACKET       reduce using rule 65 (cycle_2 -> .)

    cycle_2                        shift and go to state 154

state 142

    (62) printx -> STRING COMA printx .

    RPAR            reduce using rule 62 (printx -> STRING COMA printx .)


state 143

    (61) printx -> expression COMA printx .

    RPAR            reduce using rule 61 (printx -> expression COMA printx .)


state 144

    (73) list -> LIST idCheck_List EQUAL LBRACKET listx . RBRACKET

    RBRACKET        shift and go to state 155


state 145

    (76) listx -> NUMINT . id_param
    (77) listx -> NUMINT . id_param COMA listx
    (81) id_param -> .

    COMA            reduce using rule 81 (id_param -> .)
    RBRACKET        reduce using rule 81 (id_param -> .)

    id_param                       shift and go to state 156

state 146

    (78) listx -> NUMFLOAT . id_param
    (79) listx -> NUMFLOAT . id_param COMA listx
    (81) id_param -> .

    COMA            reduce using rule 81 (id_param -> .)
    RBRACKET        reduce using rule 81 (id_param -> .)

    id_param                       shift and go to state 157

state 147

    (74) listx -> ID . id_param
    (75) listx -> ID . id_param COMA listx
    (81) id_param -> .

    COMA            reduce using rule 81 (id_param -> .)
    RBRACKET        reduce using rule 81 (id_param -> .)

    id_param                       shift and go to state 158

state 148

    (88) remove -> ID idCheck_Add POINT REMOVE LPAR . RPAR

    RPAR            shift and go to state 159


state 149

    (86) add -> ID idCheck_Add POINT ADD LPAR . listx_add RPAR
    (83) listx_add -> . ID id_param2
    (84) listx_add -> . NUMINT id_param2
    (85) listx_add -> . NUMFLOAT id_param2

    ID              shift and go to state 161
    NUMINT          shift and go to state 160
    NUMFLOAT        shift and go to state 162

    listx_add                      shift and go to state 163

state 150

    (90) call -> ID id_call LPAR par_call params . RPAR

    RPAR            shift and go to state 164


state 151

    (94) params -> ID . COMA params
    (96) params -> ID .
    (54) varcte -> ID .

  ! shift/reduce conflict for COMA resolved as shift
  ! reduce/reduce conflict for RPAR resolved using rule 54 (varcte -> ID .)
    COMA            shift and go to state 165
    MULTIPLY        reduce using rule 54 (varcte -> ID .)
    DIVIDE          reduce using rule 54 (varcte -> ID .)
    PLUS            reduce using rule 54 (varcte -> ID .)
    MINUS           reduce using rule 54 (varcte -> ID .)
    COMPARISON      reduce using rule 54 (varcte -> ID .)
    RPAR            reduce using rule 54 (varcte -> ID .)

  ! RPAR            [ reduce using rule 96 (params -> ID .) ]
  ! COMA            [ reduce using rule 54 (varcte -> ID .) ]


state 152

    (93) params -> expression . COMA params
    (95) params -> expression .

    COMA            shift and go to state 166
    RPAR            reduce using rule 95 (params -> expression .)


state 153

    (67) condition -> IF LPAR exp RPAR cond_1 . block else cond_2
    (14) block -> . LCBRACKET blockx RCBRACKET

    LCBRACKET       shift and go to state 35

    block                          shift and go to state 167

state 154

    (63) cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 . block cycle_3
    (14) block -> . LCBRACKET blockx RCBRACKET

    LCBRACKET       shift and go to state 35

    block                          shift and go to state 168

state 155

    (73) list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .

    INT             reduce using rule 73 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    FLOAT           reduce using rule 73 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    BOOLEAN         reduce using rule 73 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    ID              reduce using rule 73 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    IF              reduce using rule 73 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    WHILE           reduce using rule 73 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    PRINT           reduce using rule 73 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    LIST            reduce using rule 73 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    MOVE            reduce using rule 73 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    EAT             reduce using rule 73 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    CLEAN           reduce using rule 73 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    PLAY            reduce using rule 73 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    TURNLEFT        reduce using rule 73 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    TURNRIGHT       reduce using rule 73 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)
    RCBRACKET       reduce using rule 73 (list -> LIST idCheck_List EQUAL LBRACKET listx RBRACKET .)


state 156

    (76) listx -> NUMINT id_param .
    (77) listx -> NUMINT id_param . COMA listx

    RBRACKET        reduce using rule 76 (listx -> NUMINT id_param .)
    COMA            shift and go to state 169


state 157

    (78) listx -> NUMFLOAT id_param .
    (79) listx -> NUMFLOAT id_param . COMA listx

    RBRACKET        reduce using rule 78 (listx -> NUMFLOAT id_param .)
    COMA            shift and go to state 170


state 158

    (74) listx -> ID id_param .
    (75) listx -> ID id_param . COMA listx

    RBRACKET        reduce using rule 74 (listx -> ID id_param .)
    COMA            shift and go to state 171


state 159

    (88) remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .

    INT             reduce using rule 88 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    FLOAT           reduce using rule 88 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    BOOLEAN         reduce using rule 88 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    ID              reduce using rule 88 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    IF              reduce using rule 88 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    WHILE           reduce using rule 88 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    PRINT           reduce using rule 88 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    LIST            reduce using rule 88 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    MOVE            reduce using rule 88 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    EAT             reduce using rule 88 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    CLEAN           reduce using rule 88 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    PLAY            reduce using rule 88 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    TURNLEFT        reduce using rule 88 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    TURNRIGHT       reduce using rule 88 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)
    RCBRACKET       reduce using rule 88 (remove -> ID idCheck_Add POINT REMOVE LPAR RPAR .)


state 160

    (84) listx_add -> NUMINT . id_param2
    (82) id_param2 -> .

    RPAR            reduce using rule 82 (id_param2 -> .)

    id_param2                      shift and go to state 172

state 161

    (83) listx_add -> ID . id_param2
    (82) id_param2 -> .

    RPAR            reduce using rule 82 (id_param2 -> .)

    id_param2                      shift and go to state 173

state 162

    (85) listx_add -> NUMFLOAT . id_param2
    (82) id_param2 -> .

    RPAR            reduce using rule 82 (id_param2 -> .)

    id_param2                      shift and go to state 174

state 163

    (86) add -> ID idCheck_Add POINT ADD LPAR listx_add . RPAR

    RPAR            shift and go to state 175


state 164

    (90) call -> ID id_call LPAR par_call params RPAR .

    INT             reduce using rule 90 (call -> ID id_call LPAR par_call params RPAR .)
    FLOAT           reduce using rule 90 (call -> ID id_call LPAR par_call params RPAR .)
    BOOLEAN         reduce using rule 90 (call -> ID id_call LPAR par_call params RPAR .)
    ID              reduce using rule 90 (call -> ID id_call LPAR par_call params RPAR .)
    IF              reduce using rule 90 (call -> ID id_call LPAR par_call params RPAR .)
    WHILE           reduce using rule 90 (call -> ID id_call LPAR par_call params RPAR .)
    PRINT           reduce using rule 90 (call -> ID id_call LPAR par_call params RPAR .)
    LIST            reduce using rule 90 (call -> ID id_call LPAR par_call params RPAR .)
    MOVE            reduce using rule 90 (call -> ID id_call LPAR par_call params RPAR .)
    EAT             reduce using rule 90 (call -> ID id_call LPAR par_call params RPAR .)
    CLEAN           reduce using rule 90 (call -> ID id_call LPAR par_call params RPAR .)
    PLAY            reduce using rule 90 (call -> ID id_call LPAR par_call params RPAR .)
    TURNLEFT        reduce using rule 90 (call -> ID id_call LPAR par_call params RPAR .)
    TURNRIGHT       reduce using rule 90 (call -> ID id_call LPAR par_call params RPAR .)
    RCBRACKET       reduce using rule 90 (call -> ID id_call LPAR par_call params RPAR .)


state 165

    (94) params -> ID COMA . params
    (93) params -> . expression COMA params
    (94) params -> . ID COMA params
    (95) params -> . expression
    (96) params -> . ID
    (41) expression -> . exp
    (42) expression -> . exp termino_val COMPARISON op_val expression
    (43) exp -> . termino
    (44) exp -> . termino PLUS op_val exp
    (45) exp -> . termino MINUS op_val exp
    (46) termino -> . factor
    (47) termino -> . factor MULTIPLY op_val termino
    (48) termino -> . factor DIVIDE op_val termino
    (51) factor -> . LPAR expression RPAR
    (52) factor -> . MINUS varcte
    (53) factor -> . varcte termino_val
    (54) varcte -> . ID
    (55) varcte -> . NUMINT
    (56) varcte -> . NUMFLOAT
    (57) varcte -> . BOOLEANTYPE

    ID              shift and go to state 151
    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 42

    varcte                         shift and go to state 40
    params                         shift and go to state 176
    exp                            shift and go to state 43
    factor                         shift and go to state 44
    expression                     shift and go to state 152
    termino                        shift and go to state 47

state 166

    (93) params -> expression COMA . params
    (93) params -> . expression COMA params
    (94) params -> . ID COMA params
    (95) params -> . expression
    (96) params -> . ID
    (41) expression -> . exp
    (42) expression -> . exp termino_val COMPARISON op_val expression
    (43) exp -> . termino
    (44) exp -> . termino PLUS op_val exp
    (45) exp -> . termino MINUS op_val exp
    (46) termino -> . factor
    (47) termino -> . factor MULTIPLY op_val termino
    (48) termino -> . factor DIVIDE op_val termino
    (51) factor -> . LPAR expression RPAR
    (52) factor -> . MINUS varcte
    (53) factor -> . varcte termino_val
    (54) varcte -> . ID
    (55) varcte -> . NUMINT
    (56) varcte -> . NUMFLOAT
    (57) varcte -> . BOOLEANTYPE

    ID              shift and go to state 151
    LPAR            shift and go to state 37
    MINUS           shift and go to state 38
    NUMINT          shift and go to state 39
    NUMFLOAT        shift and go to state 45
    BOOLEANTYPE     shift and go to state 42

    varcte                         shift and go to state 40
    params                         shift and go to state 177
    exp                            shift and go to state 43
    factor                         shift and go to state 44
    expression                     shift and go to state 152
    termino                        shift and go to state 47

state 167

    (67) condition -> IF LPAR exp RPAR cond_1 block . else cond_2
    (68) else -> . ELSE cond_else block
    (69) else -> . empty
    (103) empty -> .

    ELSE            shift and go to state 178
    INT             reduce using rule 103 (empty -> .)
    FLOAT           reduce using rule 103 (empty -> .)
    BOOLEAN         reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    PRINT           reduce using rule 103 (empty -> .)
    LIST            reduce using rule 103 (empty -> .)
    MOVE            reduce using rule 103 (empty -> .)
    EAT             reduce using rule 103 (empty -> .)
    CLEAN           reduce using rule 103 (empty -> .)
    PLAY            reduce using rule 103 (empty -> .)
    TURNLEFT        reduce using rule 103 (empty -> .)
    TURNRIGHT       reduce using rule 103 (empty -> .)
    RCBRACKET       reduce using rule 103 (empty -> .)

    else                           shift and go to state 180
    empty                          shift and go to state 179

state 168

    (63) cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block . cycle_3
    (66) cycle_3 -> .

    INT             reduce using rule 66 (cycle_3 -> .)
    FLOAT           reduce using rule 66 (cycle_3 -> .)
    BOOLEAN         reduce using rule 66 (cycle_3 -> .)
    ID              reduce using rule 66 (cycle_3 -> .)
    IF              reduce using rule 66 (cycle_3 -> .)
    WHILE           reduce using rule 66 (cycle_3 -> .)
    PRINT           reduce using rule 66 (cycle_3 -> .)
    LIST            reduce using rule 66 (cycle_3 -> .)
    MOVE            reduce using rule 66 (cycle_3 -> .)
    EAT             reduce using rule 66 (cycle_3 -> .)
    CLEAN           reduce using rule 66 (cycle_3 -> .)
    PLAY            reduce using rule 66 (cycle_3 -> .)
    TURNLEFT        reduce using rule 66 (cycle_3 -> .)
    TURNRIGHT       reduce using rule 66 (cycle_3 -> .)
    RCBRACKET       reduce using rule 66 (cycle_3 -> .)

    cycle_3                        shift and go to state 181

state 169

    (77) listx -> NUMINT id_param COMA . listx
    (74) listx -> . ID id_param
    (75) listx -> . ID id_param COMA listx
    (76) listx -> . NUMINT id_param
    (77) listx -> . NUMINT id_param COMA listx
    (78) listx -> . NUMFLOAT id_param
    (79) listx -> . NUMFLOAT id_param COMA listx

    ID              shift and go to state 147
    NUMINT          shift and go to state 145
    NUMFLOAT        shift and go to state 146

    listx                          shift and go to state 182

state 170

    (79) listx -> NUMFLOAT id_param COMA . listx
    (74) listx -> . ID id_param
    (75) listx -> . ID id_param COMA listx
    (76) listx -> . NUMINT id_param
    (77) listx -> . NUMINT id_param COMA listx
    (78) listx -> . NUMFLOAT id_param
    (79) listx -> . NUMFLOAT id_param COMA listx

    ID              shift and go to state 147
    NUMINT          shift and go to state 145
    NUMFLOAT        shift and go to state 146

    listx                          shift and go to state 183

state 171

    (75) listx -> ID id_param COMA . listx
    (74) listx -> . ID id_param
    (75) listx -> . ID id_param COMA listx
    (76) listx -> . NUMINT id_param
    (77) listx -> . NUMINT id_param COMA listx
    (78) listx -> . NUMFLOAT id_param
    (79) listx -> . NUMFLOAT id_param COMA listx

    ID              shift and go to state 147
    NUMINT          shift and go to state 145
    NUMFLOAT        shift and go to state 146

    listx                          shift and go to state 184

state 172

    (84) listx_add -> NUMINT id_param2 .

    RPAR            reduce using rule 84 (listx_add -> NUMINT id_param2 .)


state 173

    (83) listx_add -> ID id_param2 .

    RPAR            reduce using rule 83 (listx_add -> ID id_param2 .)


state 174

    (85) listx_add -> NUMFLOAT id_param2 .

    RPAR            reduce using rule 85 (listx_add -> NUMFLOAT id_param2 .)


state 175

    (86) add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .

    INT             reduce using rule 86 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    FLOAT           reduce using rule 86 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    BOOLEAN         reduce using rule 86 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    ID              reduce using rule 86 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    IF              reduce using rule 86 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    WHILE           reduce using rule 86 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    PRINT           reduce using rule 86 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    LIST            reduce using rule 86 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    MOVE            reduce using rule 86 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    EAT             reduce using rule 86 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    CLEAN           reduce using rule 86 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    PLAY            reduce using rule 86 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    TURNLEFT        reduce using rule 86 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    TURNRIGHT       reduce using rule 86 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)
    RCBRACKET       reduce using rule 86 (add -> ID idCheck_Add POINT ADD LPAR listx_add RPAR .)


state 176

    (94) params -> ID COMA params .

    RPAR            reduce using rule 94 (params -> ID COMA params .)


state 177

    (93) params -> expression COMA params .

    RPAR            reduce using rule 93 (params -> expression COMA params .)


state 178

    (68) else -> ELSE . cond_else block
    (72) cond_else -> .

    LCBRACKET       reduce using rule 72 (cond_else -> .)

    cond_else                      shift and go to state 185

state 179

    (69) else -> empty .

    INT             reduce using rule 69 (else -> empty .)
    FLOAT           reduce using rule 69 (else -> empty .)
    BOOLEAN         reduce using rule 69 (else -> empty .)
    ID              reduce using rule 69 (else -> empty .)
    IF              reduce using rule 69 (else -> empty .)
    WHILE           reduce using rule 69 (else -> empty .)
    PRINT           reduce using rule 69 (else -> empty .)
    LIST            reduce using rule 69 (else -> empty .)
    MOVE            reduce using rule 69 (else -> empty .)
    EAT             reduce using rule 69 (else -> empty .)
    CLEAN           reduce using rule 69 (else -> empty .)
    PLAY            reduce using rule 69 (else -> empty .)
    TURNLEFT        reduce using rule 69 (else -> empty .)
    TURNRIGHT       reduce using rule 69 (else -> empty .)
    RCBRACKET       reduce using rule 69 (else -> empty .)


state 180

    (67) condition -> IF LPAR exp RPAR cond_1 block else . cond_2
    (71) cond_2 -> .

    INT             reduce using rule 71 (cond_2 -> .)
    FLOAT           reduce using rule 71 (cond_2 -> .)
    BOOLEAN         reduce using rule 71 (cond_2 -> .)
    ID              reduce using rule 71 (cond_2 -> .)
    IF              reduce using rule 71 (cond_2 -> .)
    WHILE           reduce using rule 71 (cond_2 -> .)
    PRINT           reduce using rule 71 (cond_2 -> .)
    LIST            reduce using rule 71 (cond_2 -> .)
    MOVE            reduce using rule 71 (cond_2 -> .)
    EAT             reduce using rule 71 (cond_2 -> .)
    CLEAN           reduce using rule 71 (cond_2 -> .)
    PLAY            reduce using rule 71 (cond_2 -> .)
    TURNLEFT        reduce using rule 71 (cond_2 -> .)
    TURNRIGHT       reduce using rule 71 (cond_2 -> .)
    RCBRACKET       reduce using rule 71 (cond_2 -> .)

    cond_2                         shift and go to state 186

state 181

    (63) cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .

    INT             reduce using rule 63 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    FLOAT           reduce using rule 63 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    BOOLEAN         reduce using rule 63 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    ID              reduce using rule 63 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    IF              reduce using rule 63 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    WHILE           reduce using rule 63 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    PRINT           reduce using rule 63 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    LIST            reduce using rule 63 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    MOVE            reduce using rule 63 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    EAT             reduce using rule 63 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    CLEAN           reduce using rule 63 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    PLAY            reduce using rule 63 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    TURNLEFT        reduce using rule 63 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    TURNRIGHT       reduce using rule 63 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)
    RCBRACKET       reduce using rule 63 (cycle -> WHILE cycle_1 LPAR exp RPAR cycle_2 block cycle_3 .)


state 182

    (77) listx -> NUMINT id_param COMA listx .

    RBRACKET        reduce using rule 77 (listx -> NUMINT id_param COMA listx .)


state 183

    (79) listx -> NUMFLOAT id_param COMA listx .

    RBRACKET        reduce using rule 79 (listx -> NUMFLOAT id_param COMA listx .)


state 184

    (75) listx -> ID id_param COMA listx .

    RBRACKET        reduce using rule 75 (listx -> ID id_param COMA listx .)


state 185

    (68) else -> ELSE cond_else . block
    (14) block -> . LCBRACKET blockx RCBRACKET

    LCBRACKET       shift and go to state 35

    block                          shift and go to state 187

state 186

    (67) condition -> IF LPAR exp RPAR cond_1 block else cond_2 .

    INT             reduce using rule 67 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    FLOAT           reduce using rule 67 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    BOOLEAN         reduce using rule 67 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    ID              reduce using rule 67 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    IF              reduce using rule 67 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    WHILE           reduce using rule 67 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    PRINT           reduce using rule 67 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    LIST            reduce using rule 67 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    MOVE            reduce using rule 67 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    EAT             reduce using rule 67 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    CLEAN           reduce using rule 67 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    PLAY            reduce using rule 67 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    TURNLEFT        reduce using rule 67 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    TURNRIGHT       reduce using rule 67 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)
    RCBRACKET       reduce using rule 67 (condition -> IF LPAR exp RPAR cond_1 block else cond_2 .)


state 187

    (68) else -> ELSE cond_else block .

    INT             reduce using rule 68 (else -> ELSE cond_else block .)
    FLOAT           reduce using rule 68 (else -> ELSE cond_else block .)
    BOOLEAN         reduce using rule 68 (else -> ELSE cond_else block .)
    ID              reduce using rule 68 (else -> ELSE cond_else block .)
    IF              reduce using rule 68 (else -> ELSE cond_else block .)
    WHILE           reduce using rule 68 (else -> ELSE cond_else block .)
    PRINT           reduce using rule 68 (else -> ELSE cond_else block .)
    LIST            reduce using rule 68 (else -> ELSE cond_else block .)
    MOVE            reduce using rule 68 (else -> ELSE cond_else block .)
    EAT             reduce using rule 68 (else -> ELSE cond_else block .)
    CLEAN           reduce using rule 68 (else -> ELSE cond_else block .)
    PLAY            reduce using rule 68 (else -> ELSE cond_else block .)
    TURNLEFT        reduce using rule 68 (else -> ELSE cond_else block .)
    TURNRIGHT       reduce using rule 68 (else -> ELSE cond_else block .)
    RCBRACKET       reduce using rule 68 (else -> ELSE cond_else block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNC in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 6 resolved as shift
WARNING: shift/reduce conflict for COMA in state 151 resolved as shift
WARNING: reduce/reduce conflict in state 151 resolved using rule (varcte -> ID)
WARNING: rejected rule (params -> ID) in state 151
WARNING: Rule (params -> ID) is never reduced
