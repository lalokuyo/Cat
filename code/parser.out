Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    TRUE
    SEMICOLON
    COLON
    FALSE

Grammar

Rule 0     S' -> class
Rule 1     class -> func class
Rule 2     class -> func
Rule 3     func -> FUNC idCheck LPAR funcx RPAR block
Rule 4     idCheck -> ID
Rule 5     funcx -> vars
Rule 6     funcx -> empty
Rule 7     block -> LBRACKET blockx RBRACKET
Rule 8     blockx -> vars
Rule 9     blockx -> vars blockx
Rule 10    blockx -> statement
Rule 11    blockx -> statement blockx
Rule 12    varsCycle -> <empty>
Rule 13    statement -> asign
Rule 14    statement -> condition
Rule 15    statement -> cycle
Rule 16    statement -> print
Rule 17    statement -> list
Rule 18    statement -> call
Rule 19    statement -> move
Rule 20    statement -> eat
Rule 21    statement -> clean
Rule 22    statement -> play
Rule 23    statement -> add
Rule 24    statement -> turnleft
Rule 25    statement -> turnright
Rule 26    vars -> type ID
Rule 27    type -> INT
Rule 28    type -> FLOAT
Rule 29    type -> BOOLEAN
Rule 30    asign -> ID EQUAL expression
Rule 31    expression -> exp
Rule 32    expression -> exp COMPARISON exp
Rule 33    exp -> termino
Rule 34    exp -> termino PLUS exp
Rule 35    exp -> termino MINUS exp
Rule 36    exp -> termino MULTIPLY exp
Rule 37    exp -> termino DIVIDE exp
Rule 38    termino -> LPAR expression RPAR
Rule 39    termino -> PLUS varcte
Rule 40    termino -> MINUS varcte
Rule 41    termino -> varcte
Rule 42    varcte -> ID
Rule 43    varcte -> NUMINT
Rule 44    varcte -> NUMFLOAT
Rule 45    print -> PRINT LPAR printx RPAR
Rule 46    printx -> expression
Rule 47    printx -> STRING
Rule 48    printx -> expression COMA printx
Rule 49    printx -> STRING COMA printx
Rule 50    cycle -> WHILE LPAR expression RPAR block
Rule 51    condition -> IF LPAR expression RPAR block
Rule 52    condition -> IF LPAR expression RPAR block ELSE block
Rule 53    list -> LIST ID EQUAL LBRACKET listx RBRACKET
Rule 54    listx -> ID
Rule 55    listx -> NUMINT
Rule 56    listx -> ID COMA listx
Rule 57    listx -> NUMINT COMA listx
Rule 58    call -> ID LPAR RPAR
Rule 59    call -> ID LPAR ID RPAR
Rule 60    move -> MOVE LPAR ID RPAR
Rule 61    eat -> EAT LPAR ID RPAR
Rule 62    clean -> CLEAN LPAR ID RPAR
Rule 63    play -> PLAY LPAR ID RPAR
Rule 64    add -> ID POINT ADD LPAR CANDY RPAR
Rule 65    add -> ID POINT ADD LPAR POOP RPAR
Rule 66    add -> ID POINT ADD LPAR BALL RPAR
Rule 67    turnleft -> TURNLEFT LPAR RPAR
Rule 68    turnright -> TURNRIGHT LPAR RPAR
Rule 69    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 64 65 66
BALL                 : 66
BOOLEAN              : 29
CANDY                : 64
CLEAN                : 62
COLON                : 
COMA                 : 48 49 56 57
COMPARISON           : 32
DIVIDE               : 37
EAT                  : 61
ELSE                 : 52
EQUAL                : 30 53
FALSE                : 
FLOAT                : 28
FUNC                 : 3
ID                   : 4 26 30 42 53 54 56 58 59 59 60 61 62 63 64 65 66
IF                   : 51 52
INT                  : 27
LBRACKET             : 7 53
LIST                 : 53
LPAR                 : 3 38 45 50 51 52 58 59 60 61 62 63 64 65 66 67 68
MINUS                : 35 40
MOVE                 : 60
MULTIPLY             : 36
NUMFLOAT             : 44
NUMINT               : 43 55 57
PLAY                 : 63
PLUS                 : 34 39
POINT                : 64 65 66
POOP                 : 65
PRINT                : 45
RBRACKET             : 7 53
RPAR                 : 3 38 45 50 51 52 58 59 60 61 62 63 64 65 66 67 68
SEMICOLON            : 
STRING               : 47 49
TRUE                 : 
TURNLEFT             : 67
TURNRIGHT            : 68
WHILE                : 50
error                : 

Nonterminals, with rules where they appear

add                  : 23
asign                : 13
block                : 3 50 51 52 52
blockx               : 7 9 11
call                 : 18
class                : 1 0
clean                : 21
condition            : 14
cycle                : 15
eat                  : 20
empty                : 6
exp                  : 31 32 32 34 35 36 37
expression           : 30 38 46 48 50 51 52
func                 : 1 2
funcx                : 3
idCheck              : 3
list                 : 17
listx                : 53 56 57
move                 : 19
play                 : 22
print                : 16
printx               : 45 48 49
statement            : 10 11
termino              : 33 34 35 36 37
turnleft             : 24
turnright            : 25
type                 : 26
varcte               : 39 40 41
vars                 : 5 8 9
varsCycle            : 

Parsing method: LALR

state 0

    (0) S' -> . class
    (1) class -> . func class
    (2) class -> . func
    (3) func -> . FUNC idCheck LPAR funcx RPAR block

    FUNC            shift and go to state 2

    class                          shift and go to state 3
    func                           shift and go to state 1

state 1

    (1) class -> func . class
    (2) class -> func .
    (1) class -> . func class
    (2) class -> . func
    (3) func -> . FUNC idCheck LPAR funcx RPAR block

    $end            reduce using rule 2 (class -> func .)
    FUNC            shift and go to state 2

    class                          shift and go to state 4
    func                           shift and go to state 1

state 2

    (3) func -> FUNC . idCheck LPAR funcx RPAR block
    (4) idCheck -> . ID

    ID              shift and go to state 6

    idCheck                        shift and go to state 5

state 3

    (0) S' -> class .



state 4

    (1) class -> func class .

    $end            reduce using rule 1 (class -> func class .)


state 5

    (3) func -> FUNC idCheck . LPAR funcx RPAR block

    LPAR            shift and go to state 7


state 6

    (4) idCheck -> ID .

    LPAR            reduce using rule 4 (idCheck -> ID .)


state 7

    (3) func -> FUNC idCheck LPAR . funcx RPAR block
    (5) funcx -> . vars
    (6) funcx -> . empty
    (26) vars -> . type ID
    (69) empty -> .
    (27) type -> . INT
    (28) type -> . FLOAT
    (29) type -> . BOOLEAN

    RPAR            reduce using rule 69 (empty -> .)
    INT             shift and go to state 10
    FLOAT           shift and go to state 8
    BOOLEAN         shift and go to state 12

    vars                           shift and go to state 9
    funcx                          shift and go to state 11
    type                           shift and go to state 14
    empty                          shift and go to state 13

state 8

    (28) type -> FLOAT .

    ID              reduce using rule 28 (type -> FLOAT .)


state 9

    (5) funcx -> vars .

    RPAR            reduce using rule 5 (funcx -> vars .)


state 10

    (27) type -> INT .

    ID              reduce using rule 27 (type -> INT .)


state 11

    (3) func -> FUNC idCheck LPAR funcx . RPAR block

    RPAR            shift and go to state 15


state 12

    (29) type -> BOOLEAN .

    ID              reduce using rule 29 (type -> BOOLEAN .)


state 13

    (6) funcx -> empty .

    RPAR            reduce using rule 6 (funcx -> empty .)


state 14

    (26) vars -> type . ID

    ID              shift and go to state 16


state 15

    (3) func -> FUNC idCheck LPAR funcx RPAR . block
    (7) block -> . LBRACKET blockx RBRACKET

    LBRACKET        shift and go to state 17

    block                          shift and go to state 18

state 16

    (26) vars -> type ID .

    RPAR            reduce using rule 26 (vars -> type ID .)
    INT             reduce using rule 26 (vars -> type ID .)
    FLOAT           reduce using rule 26 (vars -> type ID .)
    BOOLEAN         reduce using rule 26 (vars -> type ID .)
    ID              reduce using rule 26 (vars -> type ID .)
    IF              reduce using rule 26 (vars -> type ID .)
    WHILE           reduce using rule 26 (vars -> type ID .)
    PRINT           reduce using rule 26 (vars -> type ID .)
    LIST            reduce using rule 26 (vars -> type ID .)
    MOVE            reduce using rule 26 (vars -> type ID .)
    EAT             reduce using rule 26 (vars -> type ID .)
    CLEAN           reduce using rule 26 (vars -> type ID .)
    PLAY            reduce using rule 26 (vars -> type ID .)
    TURNLEFT        reduce using rule 26 (vars -> type ID .)
    TURNRIGHT       reduce using rule 26 (vars -> type ID .)
    RBRACKET        reduce using rule 26 (vars -> type ID .)


state 17

    (7) block -> LBRACKET . blockx RBRACKET
    (8) blockx -> . vars
    (9) blockx -> . vars blockx
    (10) blockx -> . statement
    (11) blockx -> . statement blockx
    (26) vars -> . type ID
    (13) statement -> . asign
    (14) statement -> . condition
    (15) statement -> . cycle
    (16) statement -> . print
    (17) statement -> . list
    (18) statement -> . call
    (19) statement -> . move
    (20) statement -> . eat
    (21) statement -> . clean
    (22) statement -> . play
    (23) statement -> . add
    (24) statement -> . turnleft
    (25) statement -> . turnright
    (27) type -> . INT
    (28) type -> . FLOAT
    (29) type -> . BOOLEAN
    (30) asign -> . ID EQUAL expression
    (51) condition -> . IF LPAR expression RPAR block
    (52) condition -> . IF LPAR expression RPAR block ELSE block
    (50) cycle -> . WHILE LPAR expression RPAR block
    (45) print -> . PRINT LPAR printx RPAR
    (53) list -> . LIST ID EQUAL LBRACKET listx RBRACKET
    (58) call -> . ID LPAR RPAR
    (59) call -> . ID LPAR ID RPAR
    (60) move -> . MOVE LPAR ID RPAR
    (61) eat -> . EAT LPAR ID RPAR
    (62) clean -> . CLEAN LPAR ID RPAR
    (63) play -> . PLAY LPAR ID RPAR
    (64) add -> . ID POINT ADD LPAR CANDY RPAR
    (65) add -> . ID POINT ADD LPAR POOP RPAR
    (66) add -> . ID POINT ADD LPAR BALL RPAR
    (67) turnleft -> . TURNLEFT LPAR RPAR
    (68) turnright -> . TURNRIGHT LPAR RPAR

    INT             shift and go to state 10
    FLOAT           shift and go to state 8
    BOOLEAN         shift and go to state 12
    ID              shift and go to state 25
    IF              shift and go to state 31
    WHILE           shift and go to state 22
    PRINT           shift and go to state 23
    LIST            shift and go to state 24
    MOVE            shift and go to state 35
    EAT             shift and go to state 32
    CLEAN           shift and go to state 39
    PLAY            shift and go to state 33
    TURNLEFT        shift and go to state 20
    TURNRIGHT       shift and go to state 38

    play                           shift and go to state 34
    clean                          shift and go to state 45
    vars                           shift and go to state 19
    turnleft                       shift and go to state 36
    move                           shift and go to state 21
    list                           shift and go to state 43
    asign                          shift and go to state 44
    turnright                      shift and go to state 26
    add                            shift and go to state 27
    call                           shift and go to state 28
    statement                      shift and go to state 29
    print                          shift and go to state 30
    blockx                         shift and go to state 37
    type                           shift and go to state 14
    eat                            shift and go to state 40
    condition                      shift and go to state 41
    cycle                          shift and go to state 42

state 18

    (3) func -> FUNC idCheck LPAR funcx RPAR block .

    FUNC            reduce using rule 3 (func -> FUNC idCheck LPAR funcx RPAR block .)
    $end            reduce using rule 3 (func -> FUNC idCheck LPAR funcx RPAR block .)


state 19

    (8) blockx -> vars .
    (9) blockx -> vars . blockx
    (8) blockx -> . vars
    (9) blockx -> . vars blockx
    (10) blockx -> . statement
    (11) blockx -> . statement blockx
    (26) vars -> . type ID
    (13) statement -> . asign
    (14) statement -> . condition
    (15) statement -> . cycle
    (16) statement -> . print
    (17) statement -> . list
    (18) statement -> . call
    (19) statement -> . move
    (20) statement -> . eat
    (21) statement -> . clean
    (22) statement -> . play
    (23) statement -> . add
    (24) statement -> . turnleft
    (25) statement -> . turnright
    (27) type -> . INT
    (28) type -> . FLOAT
    (29) type -> . BOOLEAN
    (30) asign -> . ID EQUAL expression
    (51) condition -> . IF LPAR expression RPAR block
    (52) condition -> . IF LPAR expression RPAR block ELSE block
    (50) cycle -> . WHILE LPAR expression RPAR block
    (45) print -> . PRINT LPAR printx RPAR
    (53) list -> . LIST ID EQUAL LBRACKET listx RBRACKET
    (58) call -> . ID LPAR RPAR
    (59) call -> . ID LPAR ID RPAR
    (60) move -> . MOVE LPAR ID RPAR
    (61) eat -> . EAT LPAR ID RPAR
    (62) clean -> . CLEAN LPAR ID RPAR
    (63) play -> . PLAY LPAR ID RPAR
    (64) add -> . ID POINT ADD LPAR CANDY RPAR
    (65) add -> . ID POINT ADD LPAR POOP RPAR
    (66) add -> . ID POINT ADD LPAR BALL RPAR
    (67) turnleft -> . TURNLEFT LPAR RPAR
    (68) turnright -> . TURNRIGHT LPAR RPAR

    RBRACKET        reduce using rule 8 (blockx -> vars .)
    INT             shift and go to state 10
    FLOAT           shift and go to state 8
    BOOLEAN         shift and go to state 12
    ID              shift and go to state 25
    IF              shift and go to state 31
    WHILE           shift and go to state 22
    PRINT           shift and go to state 23
    LIST            shift and go to state 24
    MOVE            shift and go to state 35
    EAT             shift and go to state 32
    CLEAN           shift and go to state 39
    PLAY            shift and go to state 33
    TURNLEFT        shift and go to state 20
    TURNRIGHT       shift and go to state 38

    play                           shift and go to state 34
    clean                          shift and go to state 45
    vars                           shift and go to state 19
    turnleft                       shift and go to state 36
    move                           shift and go to state 21
    list                           shift and go to state 43
    asign                          shift and go to state 44
    turnright                      shift and go to state 26
    add                            shift and go to state 27
    call                           shift and go to state 28
    statement                      shift and go to state 29
    print                          shift and go to state 30
    blockx                         shift and go to state 46
    type                           shift and go to state 14
    eat                            shift and go to state 40
    condition                      shift and go to state 41
    cycle                          shift and go to state 42

state 20

    (67) turnleft -> TURNLEFT . LPAR RPAR

    LPAR            shift and go to state 47


state 21

    (19) statement -> move .

    INT             reduce using rule 19 (statement -> move .)
    FLOAT           reduce using rule 19 (statement -> move .)
    BOOLEAN         reduce using rule 19 (statement -> move .)
    ID              reduce using rule 19 (statement -> move .)
    IF              reduce using rule 19 (statement -> move .)
    WHILE           reduce using rule 19 (statement -> move .)
    PRINT           reduce using rule 19 (statement -> move .)
    LIST            reduce using rule 19 (statement -> move .)
    MOVE            reduce using rule 19 (statement -> move .)
    EAT             reduce using rule 19 (statement -> move .)
    CLEAN           reduce using rule 19 (statement -> move .)
    PLAY            reduce using rule 19 (statement -> move .)
    TURNLEFT        reduce using rule 19 (statement -> move .)
    TURNRIGHT       reduce using rule 19 (statement -> move .)
    RBRACKET        reduce using rule 19 (statement -> move .)


state 22

    (50) cycle -> WHILE . LPAR expression RPAR block

    LPAR            shift and go to state 48


state 23

    (45) print -> PRINT . LPAR printx RPAR

    LPAR            shift and go to state 49


state 24

    (53) list -> LIST . ID EQUAL LBRACKET listx RBRACKET

    ID              shift and go to state 50


state 25

    (30) asign -> ID . EQUAL expression
    (58) call -> ID . LPAR RPAR
    (59) call -> ID . LPAR ID RPAR
    (64) add -> ID . POINT ADD LPAR CANDY RPAR
    (65) add -> ID . POINT ADD LPAR POOP RPAR
    (66) add -> ID . POINT ADD LPAR BALL RPAR

    EQUAL           shift and go to state 53
    LPAR            shift and go to state 51
    POINT           shift and go to state 52


state 26

    (25) statement -> turnright .

    INT             reduce using rule 25 (statement -> turnright .)
    FLOAT           reduce using rule 25 (statement -> turnright .)
    BOOLEAN         reduce using rule 25 (statement -> turnright .)
    ID              reduce using rule 25 (statement -> turnright .)
    IF              reduce using rule 25 (statement -> turnright .)
    WHILE           reduce using rule 25 (statement -> turnright .)
    PRINT           reduce using rule 25 (statement -> turnright .)
    LIST            reduce using rule 25 (statement -> turnright .)
    MOVE            reduce using rule 25 (statement -> turnright .)
    EAT             reduce using rule 25 (statement -> turnright .)
    CLEAN           reduce using rule 25 (statement -> turnright .)
    PLAY            reduce using rule 25 (statement -> turnright .)
    TURNLEFT        reduce using rule 25 (statement -> turnright .)
    TURNRIGHT       reduce using rule 25 (statement -> turnright .)
    RBRACKET        reduce using rule 25 (statement -> turnright .)


state 27

    (23) statement -> add .

    INT             reduce using rule 23 (statement -> add .)
    FLOAT           reduce using rule 23 (statement -> add .)
    BOOLEAN         reduce using rule 23 (statement -> add .)
    ID              reduce using rule 23 (statement -> add .)
    IF              reduce using rule 23 (statement -> add .)
    WHILE           reduce using rule 23 (statement -> add .)
    PRINT           reduce using rule 23 (statement -> add .)
    LIST            reduce using rule 23 (statement -> add .)
    MOVE            reduce using rule 23 (statement -> add .)
    EAT             reduce using rule 23 (statement -> add .)
    CLEAN           reduce using rule 23 (statement -> add .)
    PLAY            reduce using rule 23 (statement -> add .)
    TURNLEFT        reduce using rule 23 (statement -> add .)
    TURNRIGHT       reduce using rule 23 (statement -> add .)
    RBRACKET        reduce using rule 23 (statement -> add .)


state 28

    (18) statement -> call .

    INT             reduce using rule 18 (statement -> call .)
    FLOAT           reduce using rule 18 (statement -> call .)
    BOOLEAN         reduce using rule 18 (statement -> call .)
    ID              reduce using rule 18 (statement -> call .)
    IF              reduce using rule 18 (statement -> call .)
    WHILE           reduce using rule 18 (statement -> call .)
    PRINT           reduce using rule 18 (statement -> call .)
    LIST            reduce using rule 18 (statement -> call .)
    MOVE            reduce using rule 18 (statement -> call .)
    EAT             reduce using rule 18 (statement -> call .)
    CLEAN           reduce using rule 18 (statement -> call .)
    PLAY            reduce using rule 18 (statement -> call .)
    TURNLEFT        reduce using rule 18 (statement -> call .)
    TURNRIGHT       reduce using rule 18 (statement -> call .)
    RBRACKET        reduce using rule 18 (statement -> call .)


state 29

    (10) blockx -> statement .
    (11) blockx -> statement . blockx
    (8) blockx -> . vars
    (9) blockx -> . vars blockx
    (10) blockx -> . statement
    (11) blockx -> . statement blockx
    (26) vars -> . type ID
    (13) statement -> . asign
    (14) statement -> . condition
    (15) statement -> . cycle
    (16) statement -> . print
    (17) statement -> . list
    (18) statement -> . call
    (19) statement -> . move
    (20) statement -> . eat
    (21) statement -> . clean
    (22) statement -> . play
    (23) statement -> . add
    (24) statement -> . turnleft
    (25) statement -> . turnright
    (27) type -> . INT
    (28) type -> . FLOAT
    (29) type -> . BOOLEAN
    (30) asign -> . ID EQUAL expression
    (51) condition -> . IF LPAR expression RPAR block
    (52) condition -> . IF LPAR expression RPAR block ELSE block
    (50) cycle -> . WHILE LPAR expression RPAR block
    (45) print -> . PRINT LPAR printx RPAR
    (53) list -> . LIST ID EQUAL LBRACKET listx RBRACKET
    (58) call -> . ID LPAR RPAR
    (59) call -> . ID LPAR ID RPAR
    (60) move -> . MOVE LPAR ID RPAR
    (61) eat -> . EAT LPAR ID RPAR
    (62) clean -> . CLEAN LPAR ID RPAR
    (63) play -> . PLAY LPAR ID RPAR
    (64) add -> . ID POINT ADD LPAR CANDY RPAR
    (65) add -> . ID POINT ADD LPAR POOP RPAR
    (66) add -> . ID POINT ADD LPAR BALL RPAR
    (67) turnleft -> . TURNLEFT LPAR RPAR
    (68) turnright -> . TURNRIGHT LPAR RPAR

    RBRACKET        reduce using rule 10 (blockx -> statement .)
    INT             shift and go to state 10
    FLOAT           shift and go to state 8
    BOOLEAN         shift and go to state 12
    ID              shift and go to state 25
    IF              shift and go to state 31
    WHILE           shift and go to state 22
    PRINT           shift and go to state 23
    LIST            shift and go to state 24
    MOVE            shift and go to state 35
    EAT             shift and go to state 32
    CLEAN           shift and go to state 39
    PLAY            shift and go to state 33
    TURNLEFT        shift and go to state 20
    TURNRIGHT       shift and go to state 38

    play                           shift and go to state 34
    clean                          shift and go to state 45
    vars                           shift and go to state 19
    turnleft                       shift and go to state 36
    move                           shift and go to state 21
    list                           shift and go to state 43
    asign                          shift and go to state 44
    turnright                      shift and go to state 26
    add                            shift and go to state 27
    call                           shift and go to state 28
    statement                      shift and go to state 29
    print                          shift and go to state 30
    blockx                         shift and go to state 54
    type                           shift and go to state 14
    eat                            shift and go to state 40
    condition                      shift and go to state 41
    cycle                          shift and go to state 42

state 30

    (16) statement -> print .

    INT             reduce using rule 16 (statement -> print .)
    FLOAT           reduce using rule 16 (statement -> print .)
    BOOLEAN         reduce using rule 16 (statement -> print .)
    ID              reduce using rule 16 (statement -> print .)
    IF              reduce using rule 16 (statement -> print .)
    WHILE           reduce using rule 16 (statement -> print .)
    PRINT           reduce using rule 16 (statement -> print .)
    LIST            reduce using rule 16 (statement -> print .)
    MOVE            reduce using rule 16 (statement -> print .)
    EAT             reduce using rule 16 (statement -> print .)
    CLEAN           reduce using rule 16 (statement -> print .)
    PLAY            reduce using rule 16 (statement -> print .)
    TURNLEFT        reduce using rule 16 (statement -> print .)
    TURNRIGHT       reduce using rule 16 (statement -> print .)
    RBRACKET        reduce using rule 16 (statement -> print .)


state 31

    (51) condition -> IF . LPAR expression RPAR block
    (52) condition -> IF . LPAR expression RPAR block ELSE block

    LPAR            shift and go to state 55


state 32

    (61) eat -> EAT . LPAR ID RPAR

    LPAR            shift and go to state 56


state 33

    (63) play -> PLAY . LPAR ID RPAR

    LPAR            shift and go to state 57


state 34

    (22) statement -> play .

    INT             reduce using rule 22 (statement -> play .)
    FLOAT           reduce using rule 22 (statement -> play .)
    BOOLEAN         reduce using rule 22 (statement -> play .)
    ID              reduce using rule 22 (statement -> play .)
    IF              reduce using rule 22 (statement -> play .)
    WHILE           reduce using rule 22 (statement -> play .)
    PRINT           reduce using rule 22 (statement -> play .)
    LIST            reduce using rule 22 (statement -> play .)
    MOVE            reduce using rule 22 (statement -> play .)
    EAT             reduce using rule 22 (statement -> play .)
    CLEAN           reduce using rule 22 (statement -> play .)
    PLAY            reduce using rule 22 (statement -> play .)
    TURNLEFT        reduce using rule 22 (statement -> play .)
    TURNRIGHT       reduce using rule 22 (statement -> play .)
    RBRACKET        reduce using rule 22 (statement -> play .)


state 35

    (60) move -> MOVE . LPAR ID RPAR

    LPAR            shift and go to state 58


state 36

    (24) statement -> turnleft .

    INT             reduce using rule 24 (statement -> turnleft .)
    FLOAT           reduce using rule 24 (statement -> turnleft .)
    BOOLEAN         reduce using rule 24 (statement -> turnleft .)
    ID              reduce using rule 24 (statement -> turnleft .)
    IF              reduce using rule 24 (statement -> turnleft .)
    WHILE           reduce using rule 24 (statement -> turnleft .)
    PRINT           reduce using rule 24 (statement -> turnleft .)
    LIST            reduce using rule 24 (statement -> turnleft .)
    MOVE            reduce using rule 24 (statement -> turnleft .)
    EAT             reduce using rule 24 (statement -> turnleft .)
    CLEAN           reduce using rule 24 (statement -> turnleft .)
    PLAY            reduce using rule 24 (statement -> turnleft .)
    TURNLEFT        reduce using rule 24 (statement -> turnleft .)
    TURNRIGHT       reduce using rule 24 (statement -> turnleft .)
    RBRACKET        reduce using rule 24 (statement -> turnleft .)


state 37

    (7) block -> LBRACKET blockx . RBRACKET

    RBRACKET        shift and go to state 59


state 38

    (68) turnright -> TURNRIGHT . LPAR RPAR

    LPAR            shift and go to state 60


state 39

    (62) clean -> CLEAN . LPAR ID RPAR

    LPAR            shift and go to state 61


state 40

    (20) statement -> eat .

    INT             reduce using rule 20 (statement -> eat .)
    FLOAT           reduce using rule 20 (statement -> eat .)
    BOOLEAN         reduce using rule 20 (statement -> eat .)
    ID              reduce using rule 20 (statement -> eat .)
    IF              reduce using rule 20 (statement -> eat .)
    WHILE           reduce using rule 20 (statement -> eat .)
    PRINT           reduce using rule 20 (statement -> eat .)
    LIST            reduce using rule 20 (statement -> eat .)
    MOVE            reduce using rule 20 (statement -> eat .)
    EAT             reduce using rule 20 (statement -> eat .)
    CLEAN           reduce using rule 20 (statement -> eat .)
    PLAY            reduce using rule 20 (statement -> eat .)
    TURNLEFT        reduce using rule 20 (statement -> eat .)
    TURNRIGHT       reduce using rule 20 (statement -> eat .)
    RBRACKET        reduce using rule 20 (statement -> eat .)


state 41

    (14) statement -> condition .

    INT             reduce using rule 14 (statement -> condition .)
    FLOAT           reduce using rule 14 (statement -> condition .)
    BOOLEAN         reduce using rule 14 (statement -> condition .)
    ID              reduce using rule 14 (statement -> condition .)
    IF              reduce using rule 14 (statement -> condition .)
    WHILE           reduce using rule 14 (statement -> condition .)
    PRINT           reduce using rule 14 (statement -> condition .)
    LIST            reduce using rule 14 (statement -> condition .)
    MOVE            reduce using rule 14 (statement -> condition .)
    EAT             reduce using rule 14 (statement -> condition .)
    CLEAN           reduce using rule 14 (statement -> condition .)
    PLAY            reduce using rule 14 (statement -> condition .)
    TURNLEFT        reduce using rule 14 (statement -> condition .)
    TURNRIGHT       reduce using rule 14 (statement -> condition .)
    RBRACKET        reduce using rule 14 (statement -> condition .)


state 42

    (15) statement -> cycle .

    INT             reduce using rule 15 (statement -> cycle .)
    FLOAT           reduce using rule 15 (statement -> cycle .)
    BOOLEAN         reduce using rule 15 (statement -> cycle .)
    ID              reduce using rule 15 (statement -> cycle .)
    IF              reduce using rule 15 (statement -> cycle .)
    WHILE           reduce using rule 15 (statement -> cycle .)
    PRINT           reduce using rule 15 (statement -> cycle .)
    LIST            reduce using rule 15 (statement -> cycle .)
    MOVE            reduce using rule 15 (statement -> cycle .)
    EAT             reduce using rule 15 (statement -> cycle .)
    CLEAN           reduce using rule 15 (statement -> cycle .)
    PLAY            reduce using rule 15 (statement -> cycle .)
    TURNLEFT        reduce using rule 15 (statement -> cycle .)
    TURNRIGHT       reduce using rule 15 (statement -> cycle .)
    RBRACKET        reduce using rule 15 (statement -> cycle .)


state 43

    (17) statement -> list .

    INT             reduce using rule 17 (statement -> list .)
    FLOAT           reduce using rule 17 (statement -> list .)
    BOOLEAN         reduce using rule 17 (statement -> list .)
    ID              reduce using rule 17 (statement -> list .)
    IF              reduce using rule 17 (statement -> list .)
    WHILE           reduce using rule 17 (statement -> list .)
    PRINT           reduce using rule 17 (statement -> list .)
    LIST            reduce using rule 17 (statement -> list .)
    MOVE            reduce using rule 17 (statement -> list .)
    EAT             reduce using rule 17 (statement -> list .)
    CLEAN           reduce using rule 17 (statement -> list .)
    PLAY            reduce using rule 17 (statement -> list .)
    TURNLEFT        reduce using rule 17 (statement -> list .)
    TURNRIGHT       reduce using rule 17 (statement -> list .)
    RBRACKET        reduce using rule 17 (statement -> list .)


state 44

    (13) statement -> asign .

    INT             reduce using rule 13 (statement -> asign .)
    FLOAT           reduce using rule 13 (statement -> asign .)
    BOOLEAN         reduce using rule 13 (statement -> asign .)
    ID              reduce using rule 13 (statement -> asign .)
    IF              reduce using rule 13 (statement -> asign .)
    WHILE           reduce using rule 13 (statement -> asign .)
    PRINT           reduce using rule 13 (statement -> asign .)
    LIST            reduce using rule 13 (statement -> asign .)
    MOVE            reduce using rule 13 (statement -> asign .)
    EAT             reduce using rule 13 (statement -> asign .)
    CLEAN           reduce using rule 13 (statement -> asign .)
    PLAY            reduce using rule 13 (statement -> asign .)
    TURNLEFT        reduce using rule 13 (statement -> asign .)
    TURNRIGHT       reduce using rule 13 (statement -> asign .)
    RBRACKET        reduce using rule 13 (statement -> asign .)


state 45

    (21) statement -> clean .

    INT             reduce using rule 21 (statement -> clean .)
    FLOAT           reduce using rule 21 (statement -> clean .)
    BOOLEAN         reduce using rule 21 (statement -> clean .)
    ID              reduce using rule 21 (statement -> clean .)
    IF              reduce using rule 21 (statement -> clean .)
    WHILE           reduce using rule 21 (statement -> clean .)
    PRINT           reduce using rule 21 (statement -> clean .)
    LIST            reduce using rule 21 (statement -> clean .)
    MOVE            reduce using rule 21 (statement -> clean .)
    EAT             reduce using rule 21 (statement -> clean .)
    CLEAN           reduce using rule 21 (statement -> clean .)
    PLAY            reduce using rule 21 (statement -> clean .)
    TURNLEFT        reduce using rule 21 (statement -> clean .)
    TURNRIGHT       reduce using rule 21 (statement -> clean .)
    RBRACKET        reduce using rule 21 (statement -> clean .)


state 46

    (9) blockx -> vars blockx .

    RBRACKET        reduce using rule 9 (blockx -> vars blockx .)


state 47

    (67) turnleft -> TURNLEFT LPAR . RPAR

    RPAR            shift and go to state 62


state 48

    (50) cycle -> WHILE LPAR . expression RPAR block
    (31) expression -> . exp
    (32) expression -> . exp COMPARISON exp
    (33) exp -> . termino
    (34) exp -> . termino PLUS exp
    (35) exp -> . termino MINUS exp
    (36) exp -> . termino MULTIPLY exp
    (37) exp -> . termino DIVIDE exp
    (38) termino -> . LPAR expression RPAR
    (39) termino -> . PLUS varcte
    (40) termino -> . MINUS varcte
    (41) termino -> . varcte
    (42) varcte -> . ID
    (43) varcte -> . NUMINT
    (44) varcte -> . NUMFLOAT

    LPAR            shift and go to state 63
    PLUS            shift and go to state 66
    MINUS           shift and go to state 71
    ID              shift and go to state 69
    NUMINT          shift and go to state 64
    NUMFLOAT        shift and go to state 65

    varcte                         shift and go to state 72
    expression                     shift and go to state 70
    exp                            shift and go to state 68
    termino                        shift and go to state 67

state 49

    (45) print -> PRINT LPAR . printx RPAR
    (46) printx -> . expression
    (47) printx -> . STRING
    (48) printx -> . expression COMA printx
    (49) printx -> . STRING COMA printx
    (31) expression -> . exp
    (32) expression -> . exp COMPARISON exp
    (33) exp -> . termino
    (34) exp -> . termino PLUS exp
    (35) exp -> . termino MINUS exp
    (36) exp -> . termino MULTIPLY exp
    (37) exp -> . termino DIVIDE exp
    (38) termino -> . LPAR expression RPAR
    (39) termino -> . PLUS varcte
    (40) termino -> . MINUS varcte
    (41) termino -> . varcte
    (42) varcte -> . ID
    (43) varcte -> . NUMINT
    (44) varcte -> . NUMFLOAT

    STRING          shift and go to state 73
    LPAR            shift and go to state 63
    PLUS            shift and go to state 66
    MINUS           shift and go to state 71
    ID              shift and go to state 69
    NUMINT          shift and go to state 64
    NUMFLOAT        shift and go to state 65

    printx                         shift and go to state 74
    expression                     shift and go to state 75
    termino                        shift and go to state 67
    exp                            shift and go to state 68
    varcte                         shift and go to state 72

state 50

    (53) list -> LIST ID . EQUAL LBRACKET listx RBRACKET

    EQUAL           shift and go to state 76


state 51

    (58) call -> ID LPAR . RPAR
    (59) call -> ID LPAR . ID RPAR

    RPAR            shift and go to state 78
    ID              shift and go to state 77


state 52

    (64) add -> ID POINT . ADD LPAR CANDY RPAR
    (65) add -> ID POINT . ADD LPAR POOP RPAR
    (66) add -> ID POINT . ADD LPAR BALL RPAR

    ADD             shift and go to state 79


state 53

    (30) asign -> ID EQUAL . expression
    (31) expression -> . exp
    (32) expression -> . exp COMPARISON exp
    (33) exp -> . termino
    (34) exp -> . termino PLUS exp
    (35) exp -> . termino MINUS exp
    (36) exp -> . termino MULTIPLY exp
    (37) exp -> . termino DIVIDE exp
    (38) termino -> . LPAR expression RPAR
    (39) termino -> . PLUS varcte
    (40) termino -> . MINUS varcte
    (41) termino -> . varcte
    (42) varcte -> . ID
    (43) varcte -> . NUMINT
    (44) varcte -> . NUMFLOAT

    LPAR            shift and go to state 63
    PLUS            shift and go to state 66
    MINUS           shift and go to state 71
    ID              shift and go to state 69
    NUMINT          shift and go to state 64
    NUMFLOAT        shift and go to state 65

    expression                     shift and go to state 80
    termino                        shift and go to state 67
    exp                            shift and go to state 68
    varcte                         shift and go to state 72

state 54

    (11) blockx -> statement blockx .

    RBRACKET        reduce using rule 11 (blockx -> statement blockx .)


state 55

    (51) condition -> IF LPAR . expression RPAR block
    (52) condition -> IF LPAR . expression RPAR block ELSE block
    (31) expression -> . exp
    (32) expression -> . exp COMPARISON exp
    (33) exp -> . termino
    (34) exp -> . termino PLUS exp
    (35) exp -> . termino MINUS exp
    (36) exp -> . termino MULTIPLY exp
    (37) exp -> . termino DIVIDE exp
    (38) termino -> . LPAR expression RPAR
    (39) termino -> . PLUS varcte
    (40) termino -> . MINUS varcte
    (41) termino -> . varcte
    (42) varcte -> . ID
    (43) varcte -> . NUMINT
    (44) varcte -> . NUMFLOAT

    LPAR            shift and go to state 63
    PLUS            shift and go to state 66
    MINUS           shift and go to state 71
    ID              shift and go to state 69
    NUMINT          shift and go to state 64
    NUMFLOAT        shift and go to state 65

    varcte                         shift and go to state 72
    expression                     shift and go to state 81
    exp                            shift and go to state 68
    termino                        shift and go to state 67

state 56

    (61) eat -> EAT LPAR . ID RPAR

    ID              shift and go to state 82


state 57

    (63) play -> PLAY LPAR . ID RPAR

    ID              shift and go to state 83


state 58

    (60) move -> MOVE LPAR . ID RPAR

    ID              shift and go to state 84


state 59

    (7) block -> LBRACKET blockx RBRACKET .

    ELSE            reduce using rule 7 (block -> LBRACKET blockx RBRACKET .)
    INT             reduce using rule 7 (block -> LBRACKET blockx RBRACKET .)
    FLOAT           reduce using rule 7 (block -> LBRACKET blockx RBRACKET .)
    BOOLEAN         reduce using rule 7 (block -> LBRACKET blockx RBRACKET .)
    ID              reduce using rule 7 (block -> LBRACKET blockx RBRACKET .)
    IF              reduce using rule 7 (block -> LBRACKET blockx RBRACKET .)
    WHILE           reduce using rule 7 (block -> LBRACKET blockx RBRACKET .)
    PRINT           reduce using rule 7 (block -> LBRACKET blockx RBRACKET .)
    LIST            reduce using rule 7 (block -> LBRACKET blockx RBRACKET .)
    MOVE            reduce using rule 7 (block -> LBRACKET blockx RBRACKET .)
    EAT             reduce using rule 7 (block -> LBRACKET blockx RBRACKET .)
    CLEAN           reduce using rule 7 (block -> LBRACKET blockx RBRACKET .)
    PLAY            reduce using rule 7 (block -> LBRACKET blockx RBRACKET .)
    TURNLEFT        reduce using rule 7 (block -> LBRACKET blockx RBRACKET .)
    TURNRIGHT       reduce using rule 7 (block -> LBRACKET blockx RBRACKET .)
    RBRACKET        reduce using rule 7 (block -> LBRACKET blockx RBRACKET .)
    FUNC            reduce using rule 7 (block -> LBRACKET blockx RBRACKET .)
    $end            reduce using rule 7 (block -> LBRACKET blockx RBRACKET .)


state 60

    (68) turnright -> TURNRIGHT LPAR . RPAR

    RPAR            shift and go to state 85


state 61

    (62) clean -> CLEAN LPAR . ID RPAR

    ID              shift and go to state 86


state 62

    (67) turnleft -> TURNLEFT LPAR RPAR .

    INT             reduce using rule 67 (turnleft -> TURNLEFT LPAR RPAR .)
    FLOAT           reduce using rule 67 (turnleft -> TURNLEFT LPAR RPAR .)
    BOOLEAN         reduce using rule 67 (turnleft -> TURNLEFT LPAR RPAR .)
    ID              reduce using rule 67 (turnleft -> TURNLEFT LPAR RPAR .)
    IF              reduce using rule 67 (turnleft -> TURNLEFT LPAR RPAR .)
    WHILE           reduce using rule 67 (turnleft -> TURNLEFT LPAR RPAR .)
    PRINT           reduce using rule 67 (turnleft -> TURNLEFT LPAR RPAR .)
    LIST            reduce using rule 67 (turnleft -> TURNLEFT LPAR RPAR .)
    MOVE            reduce using rule 67 (turnleft -> TURNLEFT LPAR RPAR .)
    EAT             reduce using rule 67 (turnleft -> TURNLEFT LPAR RPAR .)
    CLEAN           reduce using rule 67 (turnleft -> TURNLEFT LPAR RPAR .)
    PLAY            reduce using rule 67 (turnleft -> TURNLEFT LPAR RPAR .)
    TURNLEFT        reduce using rule 67 (turnleft -> TURNLEFT LPAR RPAR .)
    TURNRIGHT       reduce using rule 67 (turnleft -> TURNLEFT LPAR RPAR .)
    RBRACKET        reduce using rule 67 (turnleft -> TURNLEFT LPAR RPAR .)


state 63

    (38) termino -> LPAR . expression RPAR
    (31) expression -> . exp
    (32) expression -> . exp COMPARISON exp
    (33) exp -> . termino
    (34) exp -> . termino PLUS exp
    (35) exp -> . termino MINUS exp
    (36) exp -> . termino MULTIPLY exp
    (37) exp -> . termino DIVIDE exp
    (38) termino -> . LPAR expression RPAR
    (39) termino -> . PLUS varcte
    (40) termino -> . MINUS varcte
    (41) termino -> . varcte
    (42) varcte -> . ID
    (43) varcte -> . NUMINT
    (44) varcte -> . NUMFLOAT

    LPAR            shift and go to state 63
    PLUS            shift and go to state 66
    MINUS           shift and go to state 71
    ID              shift and go to state 69
    NUMINT          shift and go to state 64
    NUMFLOAT        shift and go to state 65

    expression                     shift and go to state 87
    termino                        shift and go to state 67
    exp                            shift and go to state 68
    varcte                         shift and go to state 72

state 64

    (43) varcte -> NUMINT .

    PLUS            reduce using rule 43 (varcte -> NUMINT .)
    MINUS           reduce using rule 43 (varcte -> NUMINT .)
    MULTIPLY        reduce using rule 43 (varcte -> NUMINT .)
    DIVIDE          reduce using rule 43 (varcte -> NUMINT .)
    COMPARISON      reduce using rule 43 (varcte -> NUMINT .)
    RPAR            reduce using rule 43 (varcte -> NUMINT .)
    COMA            reduce using rule 43 (varcte -> NUMINT .)
    INT             reduce using rule 43 (varcte -> NUMINT .)
    FLOAT           reduce using rule 43 (varcte -> NUMINT .)
    BOOLEAN         reduce using rule 43 (varcte -> NUMINT .)
    ID              reduce using rule 43 (varcte -> NUMINT .)
    IF              reduce using rule 43 (varcte -> NUMINT .)
    WHILE           reduce using rule 43 (varcte -> NUMINT .)
    PRINT           reduce using rule 43 (varcte -> NUMINT .)
    LIST            reduce using rule 43 (varcte -> NUMINT .)
    MOVE            reduce using rule 43 (varcte -> NUMINT .)
    EAT             reduce using rule 43 (varcte -> NUMINT .)
    CLEAN           reduce using rule 43 (varcte -> NUMINT .)
    PLAY            reduce using rule 43 (varcte -> NUMINT .)
    TURNLEFT        reduce using rule 43 (varcte -> NUMINT .)
    TURNRIGHT       reduce using rule 43 (varcte -> NUMINT .)
    RBRACKET        reduce using rule 43 (varcte -> NUMINT .)


state 65

    (44) varcte -> NUMFLOAT .

    PLUS            reduce using rule 44 (varcte -> NUMFLOAT .)
    MINUS           reduce using rule 44 (varcte -> NUMFLOAT .)
    MULTIPLY        reduce using rule 44 (varcte -> NUMFLOAT .)
    DIVIDE          reduce using rule 44 (varcte -> NUMFLOAT .)
    COMPARISON      reduce using rule 44 (varcte -> NUMFLOAT .)
    RPAR            reduce using rule 44 (varcte -> NUMFLOAT .)
    COMA            reduce using rule 44 (varcte -> NUMFLOAT .)
    INT             reduce using rule 44 (varcte -> NUMFLOAT .)
    FLOAT           reduce using rule 44 (varcte -> NUMFLOAT .)
    BOOLEAN         reduce using rule 44 (varcte -> NUMFLOAT .)
    ID              reduce using rule 44 (varcte -> NUMFLOAT .)
    IF              reduce using rule 44 (varcte -> NUMFLOAT .)
    WHILE           reduce using rule 44 (varcte -> NUMFLOAT .)
    PRINT           reduce using rule 44 (varcte -> NUMFLOAT .)
    LIST            reduce using rule 44 (varcte -> NUMFLOAT .)
    MOVE            reduce using rule 44 (varcte -> NUMFLOAT .)
    EAT             reduce using rule 44 (varcte -> NUMFLOAT .)
    CLEAN           reduce using rule 44 (varcte -> NUMFLOAT .)
    PLAY            reduce using rule 44 (varcte -> NUMFLOAT .)
    TURNLEFT        reduce using rule 44 (varcte -> NUMFLOAT .)
    TURNRIGHT       reduce using rule 44 (varcte -> NUMFLOAT .)
    RBRACKET        reduce using rule 44 (varcte -> NUMFLOAT .)


state 66

    (39) termino -> PLUS . varcte
    (42) varcte -> . ID
    (43) varcte -> . NUMINT
    (44) varcte -> . NUMFLOAT

    ID              shift and go to state 69
    NUMINT          shift and go to state 64
    NUMFLOAT        shift and go to state 65

    varcte                         shift and go to state 88

state 67

    (33) exp -> termino .
    (34) exp -> termino . PLUS exp
    (35) exp -> termino . MINUS exp
    (36) exp -> termino . MULTIPLY exp
    (37) exp -> termino . DIVIDE exp

    COMPARISON      reduce using rule 33 (exp -> termino .)
    RPAR            reduce using rule 33 (exp -> termino .)
    COMA            reduce using rule 33 (exp -> termino .)
    INT             reduce using rule 33 (exp -> termino .)
    FLOAT           reduce using rule 33 (exp -> termino .)
    BOOLEAN         reduce using rule 33 (exp -> termino .)
    ID              reduce using rule 33 (exp -> termino .)
    IF              reduce using rule 33 (exp -> termino .)
    WHILE           reduce using rule 33 (exp -> termino .)
    PRINT           reduce using rule 33 (exp -> termino .)
    LIST            reduce using rule 33 (exp -> termino .)
    MOVE            reduce using rule 33 (exp -> termino .)
    EAT             reduce using rule 33 (exp -> termino .)
    CLEAN           reduce using rule 33 (exp -> termino .)
    PLAY            reduce using rule 33 (exp -> termino .)
    TURNLEFT        reduce using rule 33 (exp -> termino .)
    TURNRIGHT       reduce using rule 33 (exp -> termino .)
    RBRACKET        reduce using rule 33 (exp -> termino .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 92
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 89


state 68

    (31) expression -> exp .
    (32) expression -> exp . COMPARISON exp

    COMA            reduce using rule 31 (expression -> exp .)
    RPAR            reduce using rule 31 (expression -> exp .)
    INT             reduce using rule 31 (expression -> exp .)
    FLOAT           reduce using rule 31 (expression -> exp .)
    BOOLEAN         reduce using rule 31 (expression -> exp .)
    ID              reduce using rule 31 (expression -> exp .)
    IF              reduce using rule 31 (expression -> exp .)
    WHILE           reduce using rule 31 (expression -> exp .)
    PRINT           reduce using rule 31 (expression -> exp .)
    LIST            reduce using rule 31 (expression -> exp .)
    MOVE            reduce using rule 31 (expression -> exp .)
    EAT             reduce using rule 31 (expression -> exp .)
    CLEAN           reduce using rule 31 (expression -> exp .)
    PLAY            reduce using rule 31 (expression -> exp .)
    TURNLEFT        reduce using rule 31 (expression -> exp .)
    TURNRIGHT       reduce using rule 31 (expression -> exp .)
    RBRACKET        reduce using rule 31 (expression -> exp .)
    COMPARISON      shift and go to state 93


state 69

    (42) varcte -> ID .

    PLUS            reduce using rule 42 (varcte -> ID .)
    MINUS           reduce using rule 42 (varcte -> ID .)
    MULTIPLY        reduce using rule 42 (varcte -> ID .)
    DIVIDE          reduce using rule 42 (varcte -> ID .)
    COMPARISON      reduce using rule 42 (varcte -> ID .)
    RPAR            reduce using rule 42 (varcte -> ID .)
    COMA            reduce using rule 42 (varcte -> ID .)
    INT             reduce using rule 42 (varcte -> ID .)
    FLOAT           reduce using rule 42 (varcte -> ID .)
    BOOLEAN         reduce using rule 42 (varcte -> ID .)
    ID              reduce using rule 42 (varcte -> ID .)
    IF              reduce using rule 42 (varcte -> ID .)
    WHILE           reduce using rule 42 (varcte -> ID .)
    PRINT           reduce using rule 42 (varcte -> ID .)
    LIST            reduce using rule 42 (varcte -> ID .)
    MOVE            reduce using rule 42 (varcte -> ID .)
    EAT             reduce using rule 42 (varcte -> ID .)
    CLEAN           reduce using rule 42 (varcte -> ID .)
    PLAY            reduce using rule 42 (varcte -> ID .)
    TURNLEFT        reduce using rule 42 (varcte -> ID .)
    TURNRIGHT       reduce using rule 42 (varcte -> ID .)
    RBRACKET        reduce using rule 42 (varcte -> ID .)


state 70

    (50) cycle -> WHILE LPAR expression . RPAR block

    RPAR            shift and go to state 94


state 71

    (40) termino -> MINUS . varcte
    (42) varcte -> . ID
    (43) varcte -> . NUMINT
    (44) varcte -> . NUMFLOAT

    ID              shift and go to state 69
    NUMINT          shift and go to state 64
    NUMFLOAT        shift and go to state 65

    varcte                         shift and go to state 95

state 72

    (41) termino -> varcte .

    PLUS            reduce using rule 41 (termino -> varcte .)
    MINUS           reduce using rule 41 (termino -> varcte .)
    MULTIPLY        reduce using rule 41 (termino -> varcte .)
    DIVIDE          reduce using rule 41 (termino -> varcte .)
    COMPARISON      reduce using rule 41 (termino -> varcte .)
    RPAR            reduce using rule 41 (termino -> varcte .)
    INT             reduce using rule 41 (termino -> varcte .)
    FLOAT           reduce using rule 41 (termino -> varcte .)
    BOOLEAN         reduce using rule 41 (termino -> varcte .)
    ID              reduce using rule 41 (termino -> varcte .)
    IF              reduce using rule 41 (termino -> varcte .)
    WHILE           reduce using rule 41 (termino -> varcte .)
    PRINT           reduce using rule 41 (termino -> varcte .)
    LIST            reduce using rule 41 (termino -> varcte .)
    MOVE            reduce using rule 41 (termino -> varcte .)
    EAT             reduce using rule 41 (termino -> varcte .)
    CLEAN           reduce using rule 41 (termino -> varcte .)
    PLAY            reduce using rule 41 (termino -> varcte .)
    TURNLEFT        reduce using rule 41 (termino -> varcte .)
    TURNRIGHT       reduce using rule 41 (termino -> varcte .)
    RBRACKET        reduce using rule 41 (termino -> varcte .)
    COMA            reduce using rule 41 (termino -> varcte .)


state 73

    (47) printx -> STRING .
    (49) printx -> STRING . COMA printx

    RPAR            reduce using rule 47 (printx -> STRING .)
    COMA            shift and go to state 96


state 74

    (45) print -> PRINT LPAR printx . RPAR

    RPAR            shift and go to state 97


state 75

    (46) printx -> expression .
    (48) printx -> expression . COMA printx

    RPAR            reduce using rule 46 (printx -> expression .)
    COMA            shift and go to state 98


state 76

    (53) list -> LIST ID EQUAL . LBRACKET listx RBRACKET

    LBRACKET        shift and go to state 99


state 77

    (59) call -> ID LPAR ID . RPAR

    RPAR            shift and go to state 100


state 78

    (58) call -> ID LPAR RPAR .

    INT             reduce using rule 58 (call -> ID LPAR RPAR .)
    FLOAT           reduce using rule 58 (call -> ID LPAR RPAR .)
    BOOLEAN         reduce using rule 58 (call -> ID LPAR RPAR .)
    ID              reduce using rule 58 (call -> ID LPAR RPAR .)
    IF              reduce using rule 58 (call -> ID LPAR RPAR .)
    WHILE           reduce using rule 58 (call -> ID LPAR RPAR .)
    PRINT           reduce using rule 58 (call -> ID LPAR RPAR .)
    LIST            reduce using rule 58 (call -> ID LPAR RPAR .)
    MOVE            reduce using rule 58 (call -> ID LPAR RPAR .)
    EAT             reduce using rule 58 (call -> ID LPAR RPAR .)
    CLEAN           reduce using rule 58 (call -> ID LPAR RPAR .)
    PLAY            reduce using rule 58 (call -> ID LPAR RPAR .)
    TURNLEFT        reduce using rule 58 (call -> ID LPAR RPAR .)
    TURNRIGHT       reduce using rule 58 (call -> ID LPAR RPAR .)
    RBRACKET        reduce using rule 58 (call -> ID LPAR RPAR .)


state 79

    (64) add -> ID POINT ADD . LPAR CANDY RPAR
    (65) add -> ID POINT ADD . LPAR POOP RPAR
    (66) add -> ID POINT ADD . LPAR BALL RPAR

    LPAR            shift and go to state 101


state 80

    (30) asign -> ID EQUAL expression .

    INT             reduce using rule 30 (asign -> ID EQUAL expression .)
    FLOAT           reduce using rule 30 (asign -> ID EQUAL expression .)
    BOOLEAN         reduce using rule 30 (asign -> ID EQUAL expression .)
    ID              reduce using rule 30 (asign -> ID EQUAL expression .)
    IF              reduce using rule 30 (asign -> ID EQUAL expression .)
    WHILE           reduce using rule 30 (asign -> ID EQUAL expression .)
    PRINT           reduce using rule 30 (asign -> ID EQUAL expression .)
    LIST            reduce using rule 30 (asign -> ID EQUAL expression .)
    MOVE            reduce using rule 30 (asign -> ID EQUAL expression .)
    EAT             reduce using rule 30 (asign -> ID EQUAL expression .)
    CLEAN           reduce using rule 30 (asign -> ID EQUAL expression .)
    PLAY            reduce using rule 30 (asign -> ID EQUAL expression .)
    TURNLEFT        reduce using rule 30 (asign -> ID EQUAL expression .)
    TURNRIGHT       reduce using rule 30 (asign -> ID EQUAL expression .)
    RBRACKET        reduce using rule 30 (asign -> ID EQUAL expression .)


state 81

    (51) condition -> IF LPAR expression . RPAR block
    (52) condition -> IF LPAR expression . RPAR block ELSE block

    RPAR            shift and go to state 102


state 82

    (61) eat -> EAT LPAR ID . RPAR

    RPAR            shift and go to state 103


state 83

    (63) play -> PLAY LPAR ID . RPAR

    RPAR            shift and go to state 104


state 84

    (60) move -> MOVE LPAR ID . RPAR

    RPAR            shift and go to state 105


state 85

    (68) turnright -> TURNRIGHT LPAR RPAR .

    INT             reduce using rule 68 (turnright -> TURNRIGHT LPAR RPAR .)
    FLOAT           reduce using rule 68 (turnright -> TURNRIGHT LPAR RPAR .)
    BOOLEAN         reduce using rule 68 (turnright -> TURNRIGHT LPAR RPAR .)
    ID              reduce using rule 68 (turnright -> TURNRIGHT LPAR RPAR .)
    IF              reduce using rule 68 (turnright -> TURNRIGHT LPAR RPAR .)
    WHILE           reduce using rule 68 (turnright -> TURNRIGHT LPAR RPAR .)
    PRINT           reduce using rule 68 (turnright -> TURNRIGHT LPAR RPAR .)
    LIST            reduce using rule 68 (turnright -> TURNRIGHT LPAR RPAR .)
    MOVE            reduce using rule 68 (turnright -> TURNRIGHT LPAR RPAR .)
    EAT             reduce using rule 68 (turnright -> TURNRIGHT LPAR RPAR .)
    CLEAN           reduce using rule 68 (turnright -> TURNRIGHT LPAR RPAR .)
    PLAY            reduce using rule 68 (turnright -> TURNRIGHT LPAR RPAR .)
    TURNLEFT        reduce using rule 68 (turnright -> TURNRIGHT LPAR RPAR .)
    TURNRIGHT       reduce using rule 68 (turnright -> TURNRIGHT LPAR RPAR .)
    RBRACKET        reduce using rule 68 (turnright -> TURNRIGHT LPAR RPAR .)


state 86

    (62) clean -> CLEAN LPAR ID . RPAR

    RPAR            shift and go to state 106


state 87

    (38) termino -> LPAR expression . RPAR

    RPAR            shift and go to state 107


state 88

    (39) termino -> PLUS varcte .

    PLUS            reduce using rule 39 (termino -> PLUS varcte .)
    MINUS           reduce using rule 39 (termino -> PLUS varcte .)
    MULTIPLY        reduce using rule 39 (termino -> PLUS varcte .)
    DIVIDE          reduce using rule 39 (termino -> PLUS varcte .)
    COMPARISON      reduce using rule 39 (termino -> PLUS varcte .)
    RPAR            reduce using rule 39 (termino -> PLUS varcte .)
    INT             reduce using rule 39 (termino -> PLUS varcte .)
    FLOAT           reduce using rule 39 (termino -> PLUS varcte .)
    BOOLEAN         reduce using rule 39 (termino -> PLUS varcte .)
    ID              reduce using rule 39 (termino -> PLUS varcte .)
    IF              reduce using rule 39 (termino -> PLUS varcte .)
    WHILE           reduce using rule 39 (termino -> PLUS varcte .)
    PRINT           reduce using rule 39 (termino -> PLUS varcte .)
    LIST            reduce using rule 39 (termino -> PLUS varcte .)
    MOVE            reduce using rule 39 (termino -> PLUS varcte .)
    EAT             reduce using rule 39 (termino -> PLUS varcte .)
    CLEAN           reduce using rule 39 (termino -> PLUS varcte .)
    PLAY            reduce using rule 39 (termino -> PLUS varcte .)
    TURNLEFT        reduce using rule 39 (termino -> PLUS varcte .)
    TURNRIGHT       reduce using rule 39 (termino -> PLUS varcte .)
    RBRACKET        reduce using rule 39 (termino -> PLUS varcte .)
    COMA            reduce using rule 39 (termino -> PLUS varcte .)


state 89

    (37) exp -> termino DIVIDE . exp
    (33) exp -> . termino
    (34) exp -> . termino PLUS exp
    (35) exp -> . termino MINUS exp
    (36) exp -> . termino MULTIPLY exp
    (37) exp -> . termino DIVIDE exp
    (38) termino -> . LPAR expression RPAR
    (39) termino -> . PLUS varcte
    (40) termino -> . MINUS varcte
    (41) termino -> . varcte
    (42) varcte -> . ID
    (43) varcte -> . NUMINT
    (44) varcte -> . NUMFLOAT

    LPAR            shift and go to state 63
    PLUS            shift and go to state 66
    MINUS           shift and go to state 71
    ID              shift and go to state 69
    NUMINT          shift and go to state 64
    NUMFLOAT        shift and go to state 65

    termino                        shift and go to state 67
    exp                            shift and go to state 108
    varcte                         shift and go to state 72

state 90

    (34) exp -> termino PLUS . exp
    (33) exp -> . termino
    (34) exp -> . termino PLUS exp
    (35) exp -> . termino MINUS exp
    (36) exp -> . termino MULTIPLY exp
    (37) exp -> . termino DIVIDE exp
    (38) termino -> . LPAR expression RPAR
    (39) termino -> . PLUS varcte
    (40) termino -> . MINUS varcte
    (41) termino -> . varcte
    (42) varcte -> . ID
    (43) varcte -> . NUMINT
    (44) varcte -> . NUMFLOAT

    LPAR            shift and go to state 63
    PLUS            shift and go to state 66
    MINUS           shift and go to state 71
    ID              shift and go to state 69
    NUMINT          shift and go to state 64
    NUMFLOAT        shift and go to state 65

    termino                        shift and go to state 67
    exp                            shift and go to state 109
    varcte                         shift and go to state 72

state 91

    (36) exp -> termino MULTIPLY . exp
    (33) exp -> . termino
    (34) exp -> . termino PLUS exp
    (35) exp -> . termino MINUS exp
    (36) exp -> . termino MULTIPLY exp
    (37) exp -> . termino DIVIDE exp
    (38) termino -> . LPAR expression RPAR
    (39) termino -> . PLUS varcte
    (40) termino -> . MINUS varcte
    (41) termino -> . varcte
    (42) varcte -> . ID
    (43) varcte -> . NUMINT
    (44) varcte -> . NUMFLOAT

    LPAR            shift and go to state 63
    PLUS            shift and go to state 66
    MINUS           shift and go to state 71
    ID              shift and go to state 69
    NUMINT          shift and go to state 64
    NUMFLOAT        shift and go to state 65

    termino                        shift and go to state 67
    exp                            shift and go to state 110
    varcte                         shift and go to state 72

state 92

    (35) exp -> termino MINUS . exp
    (33) exp -> . termino
    (34) exp -> . termino PLUS exp
    (35) exp -> . termino MINUS exp
    (36) exp -> . termino MULTIPLY exp
    (37) exp -> . termino DIVIDE exp
    (38) termino -> . LPAR expression RPAR
    (39) termino -> . PLUS varcte
    (40) termino -> . MINUS varcte
    (41) termino -> . varcte
    (42) varcte -> . ID
    (43) varcte -> . NUMINT
    (44) varcte -> . NUMFLOAT

    LPAR            shift and go to state 63
    PLUS            shift and go to state 66
    MINUS           shift and go to state 71
    ID              shift and go to state 69
    NUMINT          shift and go to state 64
    NUMFLOAT        shift and go to state 65

    termino                        shift and go to state 67
    exp                            shift and go to state 111
    varcte                         shift and go to state 72

state 93

    (32) expression -> exp COMPARISON . exp
    (33) exp -> . termino
    (34) exp -> . termino PLUS exp
    (35) exp -> . termino MINUS exp
    (36) exp -> . termino MULTIPLY exp
    (37) exp -> . termino DIVIDE exp
    (38) termino -> . LPAR expression RPAR
    (39) termino -> . PLUS varcte
    (40) termino -> . MINUS varcte
    (41) termino -> . varcte
    (42) varcte -> . ID
    (43) varcte -> . NUMINT
    (44) varcte -> . NUMFLOAT

    LPAR            shift and go to state 63
    PLUS            shift and go to state 66
    MINUS           shift and go to state 71
    ID              shift and go to state 69
    NUMINT          shift and go to state 64
    NUMFLOAT        shift and go to state 65

    termino                        shift and go to state 67
    exp                            shift and go to state 112
    varcte                         shift and go to state 72

state 94

    (50) cycle -> WHILE LPAR expression RPAR . block
    (7) block -> . LBRACKET blockx RBRACKET

    LBRACKET        shift and go to state 17

    block                          shift and go to state 113

state 95

    (40) termino -> MINUS varcte .

    PLUS            reduce using rule 40 (termino -> MINUS varcte .)
    MINUS           reduce using rule 40 (termino -> MINUS varcte .)
    MULTIPLY        reduce using rule 40 (termino -> MINUS varcte .)
    DIVIDE          reduce using rule 40 (termino -> MINUS varcte .)
    COMPARISON      reduce using rule 40 (termino -> MINUS varcte .)
    RPAR            reduce using rule 40 (termino -> MINUS varcte .)
    INT             reduce using rule 40 (termino -> MINUS varcte .)
    FLOAT           reduce using rule 40 (termino -> MINUS varcte .)
    BOOLEAN         reduce using rule 40 (termino -> MINUS varcte .)
    ID              reduce using rule 40 (termino -> MINUS varcte .)
    IF              reduce using rule 40 (termino -> MINUS varcte .)
    WHILE           reduce using rule 40 (termino -> MINUS varcte .)
    PRINT           reduce using rule 40 (termino -> MINUS varcte .)
    LIST            reduce using rule 40 (termino -> MINUS varcte .)
    MOVE            reduce using rule 40 (termino -> MINUS varcte .)
    EAT             reduce using rule 40 (termino -> MINUS varcte .)
    CLEAN           reduce using rule 40 (termino -> MINUS varcte .)
    PLAY            reduce using rule 40 (termino -> MINUS varcte .)
    TURNLEFT        reduce using rule 40 (termino -> MINUS varcte .)
    TURNRIGHT       reduce using rule 40 (termino -> MINUS varcte .)
    RBRACKET        reduce using rule 40 (termino -> MINUS varcte .)
    COMA            reduce using rule 40 (termino -> MINUS varcte .)


state 96

    (49) printx -> STRING COMA . printx
    (46) printx -> . expression
    (47) printx -> . STRING
    (48) printx -> . expression COMA printx
    (49) printx -> . STRING COMA printx
    (31) expression -> . exp
    (32) expression -> . exp COMPARISON exp
    (33) exp -> . termino
    (34) exp -> . termino PLUS exp
    (35) exp -> . termino MINUS exp
    (36) exp -> . termino MULTIPLY exp
    (37) exp -> . termino DIVIDE exp
    (38) termino -> . LPAR expression RPAR
    (39) termino -> . PLUS varcte
    (40) termino -> . MINUS varcte
    (41) termino -> . varcte
    (42) varcte -> . ID
    (43) varcte -> . NUMINT
    (44) varcte -> . NUMFLOAT

    STRING          shift and go to state 73
    LPAR            shift and go to state 63
    PLUS            shift and go to state 66
    MINUS           shift and go to state 71
    ID              shift and go to state 69
    NUMINT          shift and go to state 64
    NUMFLOAT        shift and go to state 65

    printx                         shift and go to state 114
    expression                     shift and go to state 75
    termino                        shift and go to state 67
    exp                            shift and go to state 68
    varcte                         shift and go to state 72

state 97

    (45) print -> PRINT LPAR printx RPAR .

    INT             reduce using rule 45 (print -> PRINT LPAR printx RPAR .)
    FLOAT           reduce using rule 45 (print -> PRINT LPAR printx RPAR .)
    BOOLEAN         reduce using rule 45 (print -> PRINT LPAR printx RPAR .)
    ID              reduce using rule 45 (print -> PRINT LPAR printx RPAR .)
    IF              reduce using rule 45 (print -> PRINT LPAR printx RPAR .)
    WHILE           reduce using rule 45 (print -> PRINT LPAR printx RPAR .)
    PRINT           reduce using rule 45 (print -> PRINT LPAR printx RPAR .)
    LIST            reduce using rule 45 (print -> PRINT LPAR printx RPAR .)
    MOVE            reduce using rule 45 (print -> PRINT LPAR printx RPAR .)
    EAT             reduce using rule 45 (print -> PRINT LPAR printx RPAR .)
    CLEAN           reduce using rule 45 (print -> PRINT LPAR printx RPAR .)
    PLAY            reduce using rule 45 (print -> PRINT LPAR printx RPAR .)
    TURNLEFT        reduce using rule 45 (print -> PRINT LPAR printx RPAR .)
    TURNRIGHT       reduce using rule 45 (print -> PRINT LPAR printx RPAR .)
    RBRACKET        reduce using rule 45 (print -> PRINT LPAR printx RPAR .)


state 98

    (48) printx -> expression COMA . printx
    (46) printx -> . expression
    (47) printx -> . STRING
    (48) printx -> . expression COMA printx
    (49) printx -> . STRING COMA printx
    (31) expression -> . exp
    (32) expression -> . exp COMPARISON exp
    (33) exp -> . termino
    (34) exp -> . termino PLUS exp
    (35) exp -> . termino MINUS exp
    (36) exp -> . termino MULTIPLY exp
    (37) exp -> . termino DIVIDE exp
    (38) termino -> . LPAR expression RPAR
    (39) termino -> . PLUS varcte
    (40) termino -> . MINUS varcte
    (41) termino -> . varcte
    (42) varcte -> . ID
    (43) varcte -> . NUMINT
    (44) varcte -> . NUMFLOAT

    STRING          shift and go to state 73
    LPAR            shift and go to state 63
    PLUS            shift and go to state 66
    MINUS           shift and go to state 71
    ID              shift and go to state 69
    NUMINT          shift and go to state 64
    NUMFLOAT        shift and go to state 65

    printx                         shift and go to state 115
    expression                     shift and go to state 75
    termino                        shift and go to state 67
    exp                            shift and go to state 68
    varcte                         shift and go to state 72

state 99

    (53) list -> LIST ID EQUAL LBRACKET . listx RBRACKET
    (54) listx -> . ID
    (55) listx -> . NUMINT
    (56) listx -> . ID COMA listx
    (57) listx -> . NUMINT COMA listx

    ID              shift and go to state 118
    NUMINT          shift and go to state 117

    listx                          shift and go to state 116

state 100

    (59) call -> ID LPAR ID RPAR .

    INT             reduce using rule 59 (call -> ID LPAR ID RPAR .)
    FLOAT           reduce using rule 59 (call -> ID LPAR ID RPAR .)
    BOOLEAN         reduce using rule 59 (call -> ID LPAR ID RPAR .)
    ID              reduce using rule 59 (call -> ID LPAR ID RPAR .)
    IF              reduce using rule 59 (call -> ID LPAR ID RPAR .)
    WHILE           reduce using rule 59 (call -> ID LPAR ID RPAR .)
    PRINT           reduce using rule 59 (call -> ID LPAR ID RPAR .)
    LIST            reduce using rule 59 (call -> ID LPAR ID RPAR .)
    MOVE            reduce using rule 59 (call -> ID LPAR ID RPAR .)
    EAT             reduce using rule 59 (call -> ID LPAR ID RPAR .)
    CLEAN           reduce using rule 59 (call -> ID LPAR ID RPAR .)
    PLAY            reduce using rule 59 (call -> ID LPAR ID RPAR .)
    TURNLEFT        reduce using rule 59 (call -> ID LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 59 (call -> ID LPAR ID RPAR .)
    RBRACKET        reduce using rule 59 (call -> ID LPAR ID RPAR .)


state 101

    (64) add -> ID POINT ADD LPAR . CANDY RPAR
    (65) add -> ID POINT ADD LPAR . POOP RPAR
    (66) add -> ID POINT ADD LPAR . BALL RPAR

    CANDY           shift and go to state 121
    POOP            shift and go to state 119
    BALL            shift and go to state 120


state 102

    (51) condition -> IF LPAR expression RPAR . block
    (52) condition -> IF LPAR expression RPAR . block ELSE block
    (7) block -> . LBRACKET blockx RBRACKET

    LBRACKET        shift and go to state 17

    block                          shift and go to state 122

state 103

    (61) eat -> EAT LPAR ID RPAR .

    INT             reduce using rule 61 (eat -> EAT LPAR ID RPAR .)
    FLOAT           reduce using rule 61 (eat -> EAT LPAR ID RPAR .)
    BOOLEAN         reduce using rule 61 (eat -> EAT LPAR ID RPAR .)
    ID              reduce using rule 61 (eat -> EAT LPAR ID RPAR .)
    IF              reduce using rule 61 (eat -> EAT LPAR ID RPAR .)
    WHILE           reduce using rule 61 (eat -> EAT LPAR ID RPAR .)
    PRINT           reduce using rule 61 (eat -> EAT LPAR ID RPAR .)
    LIST            reduce using rule 61 (eat -> EAT LPAR ID RPAR .)
    MOVE            reduce using rule 61 (eat -> EAT LPAR ID RPAR .)
    EAT             reduce using rule 61 (eat -> EAT LPAR ID RPAR .)
    CLEAN           reduce using rule 61 (eat -> EAT LPAR ID RPAR .)
    PLAY            reduce using rule 61 (eat -> EAT LPAR ID RPAR .)
    TURNLEFT        reduce using rule 61 (eat -> EAT LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 61 (eat -> EAT LPAR ID RPAR .)
    RBRACKET        reduce using rule 61 (eat -> EAT LPAR ID RPAR .)


state 104

    (63) play -> PLAY LPAR ID RPAR .

    INT             reduce using rule 63 (play -> PLAY LPAR ID RPAR .)
    FLOAT           reduce using rule 63 (play -> PLAY LPAR ID RPAR .)
    BOOLEAN         reduce using rule 63 (play -> PLAY LPAR ID RPAR .)
    ID              reduce using rule 63 (play -> PLAY LPAR ID RPAR .)
    IF              reduce using rule 63 (play -> PLAY LPAR ID RPAR .)
    WHILE           reduce using rule 63 (play -> PLAY LPAR ID RPAR .)
    PRINT           reduce using rule 63 (play -> PLAY LPAR ID RPAR .)
    LIST            reduce using rule 63 (play -> PLAY LPAR ID RPAR .)
    MOVE            reduce using rule 63 (play -> PLAY LPAR ID RPAR .)
    EAT             reduce using rule 63 (play -> PLAY LPAR ID RPAR .)
    CLEAN           reduce using rule 63 (play -> PLAY LPAR ID RPAR .)
    PLAY            reduce using rule 63 (play -> PLAY LPAR ID RPAR .)
    TURNLEFT        reduce using rule 63 (play -> PLAY LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 63 (play -> PLAY LPAR ID RPAR .)
    RBRACKET        reduce using rule 63 (play -> PLAY LPAR ID RPAR .)


state 105

    (60) move -> MOVE LPAR ID RPAR .

    INT             reduce using rule 60 (move -> MOVE LPAR ID RPAR .)
    FLOAT           reduce using rule 60 (move -> MOVE LPAR ID RPAR .)
    BOOLEAN         reduce using rule 60 (move -> MOVE LPAR ID RPAR .)
    ID              reduce using rule 60 (move -> MOVE LPAR ID RPAR .)
    IF              reduce using rule 60 (move -> MOVE LPAR ID RPAR .)
    WHILE           reduce using rule 60 (move -> MOVE LPAR ID RPAR .)
    PRINT           reduce using rule 60 (move -> MOVE LPAR ID RPAR .)
    LIST            reduce using rule 60 (move -> MOVE LPAR ID RPAR .)
    MOVE            reduce using rule 60 (move -> MOVE LPAR ID RPAR .)
    EAT             reduce using rule 60 (move -> MOVE LPAR ID RPAR .)
    CLEAN           reduce using rule 60 (move -> MOVE LPAR ID RPAR .)
    PLAY            reduce using rule 60 (move -> MOVE LPAR ID RPAR .)
    TURNLEFT        reduce using rule 60 (move -> MOVE LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 60 (move -> MOVE LPAR ID RPAR .)
    RBRACKET        reduce using rule 60 (move -> MOVE LPAR ID RPAR .)


state 106

    (62) clean -> CLEAN LPAR ID RPAR .

    INT             reduce using rule 62 (clean -> CLEAN LPAR ID RPAR .)
    FLOAT           reduce using rule 62 (clean -> CLEAN LPAR ID RPAR .)
    BOOLEAN         reduce using rule 62 (clean -> CLEAN LPAR ID RPAR .)
    ID              reduce using rule 62 (clean -> CLEAN LPAR ID RPAR .)
    IF              reduce using rule 62 (clean -> CLEAN LPAR ID RPAR .)
    WHILE           reduce using rule 62 (clean -> CLEAN LPAR ID RPAR .)
    PRINT           reduce using rule 62 (clean -> CLEAN LPAR ID RPAR .)
    LIST            reduce using rule 62 (clean -> CLEAN LPAR ID RPAR .)
    MOVE            reduce using rule 62 (clean -> CLEAN LPAR ID RPAR .)
    EAT             reduce using rule 62 (clean -> CLEAN LPAR ID RPAR .)
    CLEAN           reduce using rule 62 (clean -> CLEAN LPAR ID RPAR .)
    PLAY            reduce using rule 62 (clean -> CLEAN LPAR ID RPAR .)
    TURNLEFT        reduce using rule 62 (clean -> CLEAN LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 62 (clean -> CLEAN LPAR ID RPAR .)
    RBRACKET        reduce using rule 62 (clean -> CLEAN LPAR ID RPAR .)


state 107

    (38) termino -> LPAR expression RPAR .

    PLUS            reduce using rule 38 (termino -> LPAR expression RPAR .)
    MINUS           reduce using rule 38 (termino -> LPAR expression RPAR .)
    MULTIPLY        reduce using rule 38 (termino -> LPAR expression RPAR .)
    DIVIDE          reduce using rule 38 (termino -> LPAR expression RPAR .)
    COMPARISON      reduce using rule 38 (termino -> LPAR expression RPAR .)
    RPAR            reduce using rule 38 (termino -> LPAR expression RPAR .)
    INT             reduce using rule 38 (termino -> LPAR expression RPAR .)
    FLOAT           reduce using rule 38 (termino -> LPAR expression RPAR .)
    BOOLEAN         reduce using rule 38 (termino -> LPAR expression RPAR .)
    ID              reduce using rule 38 (termino -> LPAR expression RPAR .)
    IF              reduce using rule 38 (termino -> LPAR expression RPAR .)
    WHILE           reduce using rule 38 (termino -> LPAR expression RPAR .)
    PRINT           reduce using rule 38 (termino -> LPAR expression RPAR .)
    LIST            reduce using rule 38 (termino -> LPAR expression RPAR .)
    MOVE            reduce using rule 38 (termino -> LPAR expression RPAR .)
    EAT             reduce using rule 38 (termino -> LPAR expression RPAR .)
    CLEAN           reduce using rule 38 (termino -> LPAR expression RPAR .)
    PLAY            reduce using rule 38 (termino -> LPAR expression RPAR .)
    TURNLEFT        reduce using rule 38 (termino -> LPAR expression RPAR .)
    TURNRIGHT       reduce using rule 38 (termino -> LPAR expression RPAR .)
    RBRACKET        reduce using rule 38 (termino -> LPAR expression RPAR .)
    COMA            reduce using rule 38 (termino -> LPAR expression RPAR .)


state 108

    (37) exp -> termino DIVIDE exp .

    COMPARISON      reduce using rule 37 (exp -> termino DIVIDE exp .)
    RPAR            reduce using rule 37 (exp -> termino DIVIDE exp .)
    COMA            reduce using rule 37 (exp -> termino DIVIDE exp .)
    INT             reduce using rule 37 (exp -> termino DIVIDE exp .)
    FLOAT           reduce using rule 37 (exp -> termino DIVIDE exp .)
    BOOLEAN         reduce using rule 37 (exp -> termino DIVIDE exp .)
    ID              reduce using rule 37 (exp -> termino DIVIDE exp .)
    IF              reduce using rule 37 (exp -> termino DIVIDE exp .)
    WHILE           reduce using rule 37 (exp -> termino DIVIDE exp .)
    PRINT           reduce using rule 37 (exp -> termino DIVIDE exp .)
    LIST            reduce using rule 37 (exp -> termino DIVIDE exp .)
    MOVE            reduce using rule 37 (exp -> termino DIVIDE exp .)
    EAT             reduce using rule 37 (exp -> termino DIVIDE exp .)
    CLEAN           reduce using rule 37 (exp -> termino DIVIDE exp .)
    PLAY            reduce using rule 37 (exp -> termino DIVIDE exp .)
    TURNLEFT        reduce using rule 37 (exp -> termino DIVIDE exp .)
    TURNRIGHT       reduce using rule 37 (exp -> termino DIVIDE exp .)
    RBRACKET        reduce using rule 37 (exp -> termino DIVIDE exp .)


state 109

    (34) exp -> termino PLUS exp .

    COMPARISON      reduce using rule 34 (exp -> termino PLUS exp .)
    RPAR            reduce using rule 34 (exp -> termino PLUS exp .)
    COMA            reduce using rule 34 (exp -> termino PLUS exp .)
    INT             reduce using rule 34 (exp -> termino PLUS exp .)
    FLOAT           reduce using rule 34 (exp -> termino PLUS exp .)
    BOOLEAN         reduce using rule 34 (exp -> termino PLUS exp .)
    ID              reduce using rule 34 (exp -> termino PLUS exp .)
    IF              reduce using rule 34 (exp -> termino PLUS exp .)
    WHILE           reduce using rule 34 (exp -> termino PLUS exp .)
    PRINT           reduce using rule 34 (exp -> termino PLUS exp .)
    LIST            reduce using rule 34 (exp -> termino PLUS exp .)
    MOVE            reduce using rule 34 (exp -> termino PLUS exp .)
    EAT             reduce using rule 34 (exp -> termino PLUS exp .)
    CLEAN           reduce using rule 34 (exp -> termino PLUS exp .)
    PLAY            reduce using rule 34 (exp -> termino PLUS exp .)
    TURNLEFT        reduce using rule 34 (exp -> termino PLUS exp .)
    TURNRIGHT       reduce using rule 34 (exp -> termino PLUS exp .)
    RBRACKET        reduce using rule 34 (exp -> termino PLUS exp .)


state 110

    (36) exp -> termino MULTIPLY exp .

    COMPARISON      reduce using rule 36 (exp -> termino MULTIPLY exp .)
    RPAR            reduce using rule 36 (exp -> termino MULTIPLY exp .)
    COMA            reduce using rule 36 (exp -> termino MULTIPLY exp .)
    INT             reduce using rule 36 (exp -> termino MULTIPLY exp .)
    FLOAT           reduce using rule 36 (exp -> termino MULTIPLY exp .)
    BOOLEAN         reduce using rule 36 (exp -> termino MULTIPLY exp .)
    ID              reduce using rule 36 (exp -> termino MULTIPLY exp .)
    IF              reduce using rule 36 (exp -> termino MULTIPLY exp .)
    WHILE           reduce using rule 36 (exp -> termino MULTIPLY exp .)
    PRINT           reduce using rule 36 (exp -> termino MULTIPLY exp .)
    LIST            reduce using rule 36 (exp -> termino MULTIPLY exp .)
    MOVE            reduce using rule 36 (exp -> termino MULTIPLY exp .)
    EAT             reduce using rule 36 (exp -> termino MULTIPLY exp .)
    CLEAN           reduce using rule 36 (exp -> termino MULTIPLY exp .)
    PLAY            reduce using rule 36 (exp -> termino MULTIPLY exp .)
    TURNLEFT        reduce using rule 36 (exp -> termino MULTIPLY exp .)
    TURNRIGHT       reduce using rule 36 (exp -> termino MULTIPLY exp .)
    RBRACKET        reduce using rule 36 (exp -> termino MULTIPLY exp .)


state 111

    (35) exp -> termino MINUS exp .

    COMPARISON      reduce using rule 35 (exp -> termino MINUS exp .)
    RPAR            reduce using rule 35 (exp -> termino MINUS exp .)
    COMA            reduce using rule 35 (exp -> termino MINUS exp .)
    INT             reduce using rule 35 (exp -> termino MINUS exp .)
    FLOAT           reduce using rule 35 (exp -> termino MINUS exp .)
    BOOLEAN         reduce using rule 35 (exp -> termino MINUS exp .)
    ID              reduce using rule 35 (exp -> termino MINUS exp .)
    IF              reduce using rule 35 (exp -> termino MINUS exp .)
    WHILE           reduce using rule 35 (exp -> termino MINUS exp .)
    PRINT           reduce using rule 35 (exp -> termino MINUS exp .)
    LIST            reduce using rule 35 (exp -> termino MINUS exp .)
    MOVE            reduce using rule 35 (exp -> termino MINUS exp .)
    EAT             reduce using rule 35 (exp -> termino MINUS exp .)
    CLEAN           reduce using rule 35 (exp -> termino MINUS exp .)
    PLAY            reduce using rule 35 (exp -> termino MINUS exp .)
    TURNLEFT        reduce using rule 35 (exp -> termino MINUS exp .)
    TURNRIGHT       reduce using rule 35 (exp -> termino MINUS exp .)
    RBRACKET        reduce using rule 35 (exp -> termino MINUS exp .)


state 112

    (32) expression -> exp COMPARISON exp .

    COMA            reduce using rule 32 (expression -> exp COMPARISON exp .)
    RPAR            reduce using rule 32 (expression -> exp COMPARISON exp .)
    INT             reduce using rule 32 (expression -> exp COMPARISON exp .)
    FLOAT           reduce using rule 32 (expression -> exp COMPARISON exp .)
    BOOLEAN         reduce using rule 32 (expression -> exp COMPARISON exp .)
    ID              reduce using rule 32 (expression -> exp COMPARISON exp .)
    IF              reduce using rule 32 (expression -> exp COMPARISON exp .)
    WHILE           reduce using rule 32 (expression -> exp COMPARISON exp .)
    PRINT           reduce using rule 32 (expression -> exp COMPARISON exp .)
    LIST            reduce using rule 32 (expression -> exp COMPARISON exp .)
    MOVE            reduce using rule 32 (expression -> exp COMPARISON exp .)
    EAT             reduce using rule 32 (expression -> exp COMPARISON exp .)
    CLEAN           reduce using rule 32 (expression -> exp COMPARISON exp .)
    PLAY            reduce using rule 32 (expression -> exp COMPARISON exp .)
    TURNLEFT        reduce using rule 32 (expression -> exp COMPARISON exp .)
    TURNRIGHT       reduce using rule 32 (expression -> exp COMPARISON exp .)
    RBRACKET        reduce using rule 32 (expression -> exp COMPARISON exp .)


state 113

    (50) cycle -> WHILE LPAR expression RPAR block .

    INT             reduce using rule 50 (cycle -> WHILE LPAR expression RPAR block .)
    FLOAT           reduce using rule 50 (cycle -> WHILE LPAR expression RPAR block .)
    BOOLEAN         reduce using rule 50 (cycle -> WHILE LPAR expression RPAR block .)
    ID              reduce using rule 50 (cycle -> WHILE LPAR expression RPAR block .)
    IF              reduce using rule 50 (cycle -> WHILE LPAR expression RPAR block .)
    WHILE           reduce using rule 50 (cycle -> WHILE LPAR expression RPAR block .)
    PRINT           reduce using rule 50 (cycle -> WHILE LPAR expression RPAR block .)
    LIST            reduce using rule 50 (cycle -> WHILE LPAR expression RPAR block .)
    MOVE            reduce using rule 50 (cycle -> WHILE LPAR expression RPAR block .)
    EAT             reduce using rule 50 (cycle -> WHILE LPAR expression RPAR block .)
    CLEAN           reduce using rule 50 (cycle -> WHILE LPAR expression RPAR block .)
    PLAY            reduce using rule 50 (cycle -> WHILE LPAR expression RPAR block .)
    TURNLEFT        reduce using rule 50 (cycle -> WHILE LPAR expression RPAR block .)
    TURNRIGHT       reduce using rule 50 (cycle -> WHILE LPAR expression RPAR block .)
    RBRACKET        reduce using rule 50 (cycle -> WHILE LPAR expression RPAR block .)


state 114

    (49) printx -> STRING COMA printx .

    RPAR            reduce using rule 49 (printx -> STRING COMA printx .)


state 115

    (48) printx -> expression COMA printx .

    RPAR            reduce using rule 48 (printx -> expression COMA printx .)


state 116

    (53) list -> LIST ID EQUAL LBRACKET listx . RBRACKET

    RBRACKET        shift and go to state 123


state 117

    (55) listx -> NUMINT .
    (57) listx -> NUMINT . COMA listx

    RBRACKET        reduce using rule 55 (listx -> NUMINT .)
    COMA            shift and go to state 124


state 118

    (54) listx -> ID .
    (56) listx -> ID . COMA listx

    RBRACKET        reduce using rule 54 (listx -> ID .)
    COMA            shift and go to state 125


state 119

    (65) add -> ID POINT ADD LPAR POOP . RPAR

    RPAR            shift and go to state 126


state 120

    (66) add -> ID POINT ADD LPAR BALL . RPAR

    RPAR            shift and go to state 127


state 121

    (64) add -> ID POINT ADD LPAR CANDY . RPAR

    RPAR            shift and go to state 128


state 122

    (51) condition -> IF LPAR expression RPAR block .
    (52) condition -> IF LPAR expression RPAR block . ELSE block

    INT             reduce using rule 51 (condition -> IF LPAR expression RPAR block .)
    FLOAT           reduce using rule 51 (condition -> IF LPAR expression RPAR block .)
    BOOLEAN         reduce using rule 51 (condition -> IF LPAR expression RPAR block .)
    ID              reduce using rule 51 (condition -> IF LPAR expression RPAR block .)
    IF              reduce using rule 51 (condition -> IF LPAR expression RPAR block .)
    WHILE           reduce using rule 51 (condition -> IF LPAR expression RPAR block .)
    PRINT           reduce using rule 51 (condition -> IF LPAR expression RPAR block .)
    LIST            reduce using rule 51 (condition -> IF LPAR expression RPAR block .)
    MOVE            reduce using rule 51 (condition -> IF LPAR expression RPAR block .)
    EAT             reduce using rule 51 (condition -> IF LPAR expression RPAR block .)
    CLEAN           reduce using rule 51 (condition -> IF LPAR expression RPAR block .)
    PLAY            reduce using rule 51 (condition -> IF LPAR expression RPAR block .)
    TURNLEFT        reduce using rule 51 (condition -> IF LPAR expression RPAR block .)
    TURNRIGHT       reduce using rule 51 (condition -> IF LPAR expression RPAR block .)
    RBRACKET        reduce using rule 51 (condition -> IF LPAR expression RPAR block .)
    ELSE            shift and go to state 129


state 123

    (53) list -> LIST ID EQUAL LBRACKET listx RBRACKET .

    INT             reduce using rule 53 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    FLOAT           reduce using rule 53 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    BOOLEAN         reduce using rule 53 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    ID              reduce using rule 53 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    IF              reduce using rule 53 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    WHILE           reduce using rule 53 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    PRINT           reduce using rule 53 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    LIST            reduce using rule 53 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    MOVE            reduce using rule 53 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    EAT             reduce using rule 53 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    CLEAN           reduce using rule 53 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    PLAY            reduce using rule 53 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    TURNLEFT        reduce using rule 53 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    TURNRIGHT       reduce using rule 53 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    RBRACKET        reduce using rule 53 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)


state 124

    (57) listx -> NUMINT COMA . listx
    (54) listx -> . ID
    (55) listx -> . NUMINT
    (56) listx -> . ID COMA listx
    (57) listx -> . NUMINT COMA listx

    ID              shift and go to state 118
    NUMINT          shift and go to state 117

    listx                          shift and go to state 130

state 125

    (56) listx -> ID COMA . listx
    (54) listx -> . ID
    (55) listx -> . NUMINT
    (56) listx -> . ID COMA listx
    (57) listx -> . NUMINT COMA listx

    ID              shift and go to state 118
    NUMINT          shift and go to state 117

    listx                          shift and go to state 131

state 126

    (65) add -> ID POINT ADD LPAR POOP RPAR .

    INT             reduce using rule 65 (add -> ID POINT ADD LPAR POOP RPAR .)
    FLOAT           reduce using rule 65 (add -> ID POINT ADD LPAR POOP RPAR .)
    BOOLEAN         reduce using rule 65 (add -> ID POINT ADD LPAR POOP RPAR .)
    ID              reduce using rule 65 (add -> ID POINT ADD LPAR POOP RPAR .)
    IF              reduce using rule 65 (add -> ID POINT ADD LPAR POOP RPAR .)
    WHILE           reduce using rule 65 (add -> ID POINT ADD LPAR POOP RPAR .)
    PRINT           reduce using rule 65 (add -> ID POINT ADD LPAR POOP RPAR .)
    LIST            reduce using rule 65 (add -> ID POINT ADD LPAR POOP RPAR .)
    MOVE            reduce using rule 65 (add -> ID POINT ADD LPAR POOP RPAR .)
    EAT             reduce using rule 65 (add -> ID POINT ADD LPAR POOP RPAR .)
    CLEAN           reduce using rule 65 (add -> ID POINT ADD LPAR POOP RPAR .)
    PLAY            reduce using rule 65 (add -> ID POINT ADD LPAR POOP RPAR .)
    TURNLEFT        reduce using rule 65 (add -> ID POINT ADD LPAR POOP RPAR .)
    TURNRIGHT       reduce using rule 65 (add -> ID POINT ADD LPAR POOP RPAR .)
    RBRACKET        reduce using rule 65 (add -> ID POINT ADD LPAR POOP RPAR .)


state 127

    (66) add -> ID POINT ADD LPAR BALL RPAR .

    INT             reduce using rule 66 (add -> ID POINT ADD LPAR BALL RPAR .)
    FLOAT           reduce using rule 66 (add -> ID POINT ADD LPAR BALL RPAR .)
    BOOLEAN         reduce using rule 66 (add -> ID POINT ADD LPAR BALL RPAR .)
    ID              reduce using rule 66 (add -> ID POINT ADD LPAR BALL RPAR .)
    IF              reduce using rule 66 (add -> ID POINT ADD LPAR BALL RPAR .)
    WHILE           reduce using rule 66 (add -> ID POINT ADD LPAR BALL RPAR .)
    PRINT           reduce using rule 66 (add -> ID POINT ADD LPAR BALL RPAR .)
    LIST            reduce using rule 66 (add -> ID POINT ADD LPAR BALL RPAR .)
    MOVE            reduce using rule 66 (add -> ID POINT ADD LPAR BALL RPAR .)
    EAT             reduce using rule 66 (add -> ID POINT ADD LPAR BALL RPAR .)
    CLEAN           reduce using rule 66 (add -> ID POINT ADD LPAR BALL RPAR .)
    PLAY            reduce using rule 66 (add -> ID POINT ADD LPAR BALL RPAR .)
    TURNLEFT        reduce using rule 66 (add -> ID POINT ADD LPAR BALL RPAR .)
    TURNRIGHT       reduce using rule 66 (add -> ID POINT ADD LPAR BALL RPAR .)
    RBRACKET        reduce using rule 66 (add -> ID POINT ADD LPAR BALL RPAR .)


state 128

    (64) add -> ID POINT ADD LPAR CANDY RPAR .

    INT             reduce using rule 64 (add -> ID POINT ADD LPAR CANDY RPAR .)
    FLOAT           reduce using rule 64 (add -> ID POINT ADD LPAR CANDY RPAR .)
    BOOLEAN         reduce using rule 64 (add -> ID POINT ADD LPAR CANDY RPAR .)
    ID              reduce using rule 64 (add -> ID POINT ADD LPAR CANDY RPAR .)
    IF              reduce using rule 64 (add -> ID POINT ADD LPAR CANDY RPAR .)
    WHILE           reduce using rule 64 (add -> ID POINT ADD LPAR CANDY RPAR .)
    PRINT           reduce using rule 64 (add -> ID POINT ADD LPAR CANDY RPAR .)
    LIST            reduce using rule 64 (add -> ID POINT ADD LPAR CANDY RPAR .)
    MOVE            reduce using rule 64 (add -> ID POINT ADD LPAR CANDY RPAR .)
    EAT             reduce using rule 64 (add -> ID POINT ADD LPAR CANDY RPAR .)
    CLEAN           reduce using rule 64 (add -> ID POINT ADD LPAR CANDY RPAR .)
    PLAY            reduce using rule 64 (add -> ID POINT ADD LPAR CANDY RPAR .)
    TURNLEFT        reduce using rule 64 (add -> ID POINT ADD LPAR CANDY RPAR .)
    TURNRIGHT       reduce using rule 64 (add -> ID POINT ADD LPAR CANDY RPAR .)
    RBRACKET        reduce using rule 64 (add -> ID POINT ADD LPAR CANDY RPAR .)


state 129

    (52) condition -> IF LPAR expression RPAR block ELSE . block
    (7) block -> . LBRACKET blockx RBRACKET

    LBRACKET        shift and go to state 17

    block                          shift and go to state 132

state 130

    (57) listx -> NUMINT COMA listx .

    RBRACKET        reduce using rule 57 (listx -> NUMINT COMA listx .)


state 131

    (56) listx -> ID COMA listx .

    RBRACKET        reduce using rule 56 (listx -> ID COMA listx .)


state 132

    (52) condition -> IF LPAR expression RPAR block ELSE block .

    INT             reduce using rule 52 (condition -> IF LPAR expression RPAR block ELSE block .)
    FLOAT           reduce using rule 52 (condition -> IF LPAR expression RPAR block ELSE block .)
    BOOLEAN         reduce using rule 52 (condition -> IF LPAR expression RPAR block ELSE block .)
    ID              reduce using rule 52 (condition -> IF LPAR expression RPAR block ELSE block .)
    IF              reduce using rule 52 (condition -> IF LPAR expression RPAR block ELSE block .)
    WHILE           reduce using rule 52 (condition -> IF LPAR expression RPAR block ELSE block .)
    PRINT           reduce using rule 52 (condition -> IF LPAR expression RPAR block ELSE block .)
    LIST            reduce using rule 52 (condition -> IF LPAR expression RPAR block ELSE block .)
    MOVE            reduce using rule 52 (condition -> IF LPAR expression RPAR block ELSE block .)
    EAT             reduce using rule 52 (condition -> IF LPAR expression RPAR block ELSE block .)
    CLEAN           reduce using rule 52 (condition -> IF LPAR expression RPAR block ELSE block .)
    PLAY            reduce using rule 52 (condition -> IF LPAR expression RPAR block ELSE block .)
    TURNLEFT        reduce using rule 52 (condition -> IF LPAR expression RPAR block ELSE block .)
    TURNRIGHT       reduce using rule 52 (condition -> IF LPAR expression RPAR block ELSE block .)
    RBRACKET        reduce using rule 52 (condition -> IF LPAR expression RPAR block ELSE block .)

