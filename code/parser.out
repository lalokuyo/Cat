Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    SEMICOLON
    COLON

Grammar

Rule 0     S' -> class
Rule 1     class -> vars_global init_vars func_list
Rule 2     class -> func class
Rule 3     vars_global -> varsGlobal vars_global
Rule 4     vars_global -> empty
Rule 5     init_vars -> asign init_vars
Rule 6     init_vars -> empty
Rule 7     func_list -> func func_list
Rule 8     func_list -> empty
Rule 9     func -> FUNC idCheck LPAR funcx RPAR block
Rule 10    idCheck -> ID
Rule 11    funcx -> vars
Rule 12    funcx -> empty
Rule 13    block -> LBRACKET blockx RBRACKET
Rule 14    blockx -> vars
Rule 15    blockx -> vars blockx
Rule 16    blockx -> statement
Rule 17    blockx -> statement blockx
Rule 18    statement -> asign
Rule 19    statement -> condition
Rule 20    statement -> cycle
Rule 21    statement -> print
Rule 22    statement -> list
Rule 23    statement -> call
Rule 24    statement -> move
Rule 25    statement -> eat
Rule 26    statement -> clean
Rule 27    statement -> play
Rule 28    statement -> add
Rule 29    statement -> turnleft
Rule 30    statement -> turnright
Rule 31    varsGlobal -> type ID
Rule 32    vars -> type ID
Rule 33    type -> INT
Rule 34    type -> FLOAT
Rule 35    type -> BOOLEAN
Rule 36    asign -> ID EQUAL expression
Rule 37    expression -> exp
Rule 38    expression -> exp COMPARISON exp
Rule 39    exp -> termino
Rule 40    exp -> termino PLUS exp
Rule 41    exp -> termino MINUS exp
Rule 42    exp -> termino MULTIPLY exp
Rule 43    exp -> termino DIVIDE exp
Rule 44    termino -> LPAR expression RPAR
Rule 45    termino -> PLUS varcte
Rule 46    termino -> MINUS varcte
Rule 47    termino -> varcte
Rule 48    varcte -> ID
Rule 49    varcte -> NUMINT
Rule 50    varcte -> NUMFLOAT
Rule 51    varcte -> TRUE
Rule 52    varcte -> FALSE
Rule 53    print -> PRINT LPAR printx RPAR
Rule 54    printx -> expression
Rule 55    printx -> STRING
Rule 56    printx -> expression COMA printx
Rule 57    printx -> STRING COMA printx
Rule 58    cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3
Rule 59    cycle_1 -> <empty>
Rule 60    cycle_2 -> <empty>
Rule 61    cycle_3 -> <empty>
Rule 62    condition -> IF LPAR expression cond_1 RPAR block cond_2
Rule 63    condition -> IF LPAR expression cond_1 RPAR block ELSE cond_else block cond_2
Rule 64    cond_1 -> <empty>
Rule 65    cond_2 -> <empty>
Rule 66    cond_else -> <empty>
Rule 67    list -> LIST ID EQUAL LBRACKET listx RBRACKET
Rule 68    listx -> ID
Rule 69    listx -> NUMINT
Rule 70    listx -> ID COMA listx
Rule 71    listx -> NUMINT COMA listx
Rule 72    call -> ID LPAR RPAR
Rule 73    call -> ID LPAR ID RPAR
Rule 74    move -> MOVE LPAR ID RPAR
Rule 75    eat -> EAT LPAR ID RPAR
Rule 76    clean -> CLEAN LPAR ID RPAR
Rule 77    play -> PLAY LPAR ID RPAR
Rule 78    add -> ID POINT ADD LPAR CANDY RPAR
Rule 79    add -> ID POINT ADD LPAR POOP RPAR
Rule 80    add -> ID POINT ADD LPAR BALL RPAR
Rule 81    turnleft -> TURNLEFT LPAR RPAR
Rule 82    turnright -> TURNRIGHT LPAR RPAR
Rule 83    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 78 79 80
BALL                 : 80
BOOLEAN              : 35
CANDY                : 78
CLEAN                : 76
COLON                : 
COMA                 : 56 57 70 71
COMPARISON           : 38
DIVIDE               : 43
EAT                  : 75
ELSE                 : 63
EQUAL                : 36 67
FALSE                : 52
FLOAT                : 34
FUNC                 : 9
ID                   : 10 31 32 36 48 67 68 70 72 73 73 74 75 76 77 78 79 80
IF                   : 62 63
INT                  : 33
LBRACKET             : 13 67
LIST                 : 67
LPAR                 : 9 44 53 58 62 63 72 73 74 75 76 77 78 79 80 81 82
MINUS                : 41 46
MOVE                 : 74
MULTIPLY             : 42
NUMFLOAT             : 50
NUMINT               : 49 69 71
PLAY                 : 77
PLUS                 : 40 45
POINT                : 78 79 80
POOP                 : 79
PRINT                : 53
RBRACKET             : 13 67
RPAR                 : 9 44 53 58 62 63 72 73 74 75 76 77 78 79 80 81 82
SEMICOLON            : 
STRING               : 55 57
TRUE                 : 51
TURNLEFT             : 81
TURNRIGHT            : 82
WHILE                : 58
error                : 

Nonterminals, with rules where they appear

add                  : 28
asign                : 5 18
block                : 9 58 62 63 63
blockx               : 13 15 17
call                 : 23
class                : 2 0
clean                : 26
cond_1               : 62 63
cond_2               : 62 63
cond_else            : 63
condition            : 19
cycle                : 20
cycle_1              : 58
cycle_2              : 58
cycle_3              : 58
eat                  : 25
empty                : 4 6 8 12
exp                  : 37 38 38 40 41 42 43
expression           : 36 44 54 56 58 62 63
func                 : 2 7
func_list            : 1 7
funcx                : 9
idCheck              : 9
init_vars            : 1 5
list                 : 22
listx                : 67 70 71
move                 : 24
play                 : 27
print                : 21
printx               : 53 56 57
statement            : 16 17
termino              : 39 40 41 42 43
turnleft             : 29
turnright            : 30
type                 : 31 32
varcte               : 45 46 47
vars                 : 11 14 15
varsGlobal           : 3
vars_global          : 1 3

Parsing method: LALR

state 0

    (0) S' -> . class
    (1) class -> . vars_global init_vars func_list
    (2) class -> . func class
    (3) vars_global -> . varsGlobal vars_global
    (4) vars_global -> . empty
    (9) func -> . FUNC idCheck LPAR funcx RPAR block
    (31) varsGlobal -> . type ID
    (83) empty -> .
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . BOOLEAN

  ! shift/reduce conflict for FUNC resolved as shift
    FUNC            shift and go to state 3
    ID              reduce using rule 83 (empty -> .)
    $end            reduce using rule 83 (empty -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5

  ! FUNC            [ reduce using rule 83 (empty -> .) ]

    varsGlobal                     shift and go to state 1
    func                           shift and go to state 6
    vars_global                    shift and go to state 7
    type                           shift and go to state 8
    class                          shift and go to state 9
    empty                          shift and go to state 10

state 1

    (3) vars_global -> varsGlobal . vars_global
    (3) vars_global -> . varsGlobal vars_global
    (4) vars_global -> . empty
    (31) varsGlobal -> . type ID
    (83) empty -> .
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . BOOLEAN

    ID              reduce using rule 83 (empty -> .)
    FUNC            reduce using rule 83 (empty -> .)
    $end            reduce using rule 83 (empty -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5

    varsGlobal                     shift and go to state 1
    vars_global                    shift and go to state 11
    type                           shift and go to state 8
    empty                          shift and go to state 10

state 2

    (34) type -> FLOAT .

    ID              reduce using rule 34 (type -> FLOAT .)


state 3

    (9) func -> FUNC . idCheck LPAR funcx RPAR block
    (10) idCheck -> . ID

    ID              shift and go to state 13

    idCheck                        shift and go to state 12

state 4

    (33) type -> INT .

    ID              reduce using rule 33 (type -> INT .)


state 5

    (35) type -> BOOLEAN .

    ID              reduce using rule 35 (type -> BOOLEAN .)


state 6

    (2) class -> func . class
    (1) class -> . vars_global init_vars func_list
    (2) class -> . func class
    (3) vars_global -> . varsGlobal vars_global
    (4) vars_global -> . empty
    (9) func -> . FUNC idCheck LPAR funcx RPAR block
    (31) varsGlobal -> . type ID
    (83) empty -> .
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . BOOLEAN

  ! shift/reduce conflict for FUNC resolved as shift
    FUNC            shift and go to state 3
    ID              reduce using rule 83 (empty -> .)
    $end            reduce using rule 83 (empty -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5

  ! FUNC            [ reduce using rule 83 (empty -> .) ]

    varsGlobal                     shift and go to state 1
    func                           shift and go to state 6
    vars_global                    shift and go to state 7
    type                           shift and go to state 8
    class                          shift and go to state 14
    empty                          shift and go to state 10

state 7

    (1) class -> vars_global . init_vars func_list
    (5) init_vars -> . asign init_vars
    (6) init_vars -> . empty
    (36) asign -> . ID EQUAL expression
    (83) empty -> .

    ID              shift and go to state 17
    FUNC            reduce using rule 83 (empty -> .)
    $end            reduce using rule 83 (empty -> .)

    init_vars                      shift and go to state 15
    asign                          shift and go to state 16
    empty                          shift and go to state 18

state 8

    (31) varsGlobal -> type . ID

    ID              shift and go to state 19


state 9

    (0) S' -> class .



state 10

    (4) vars_global -> empty .

    ID              reduce using rule 4 (vars_global -> empty .)
    FUNC            reduce using rule 4 (vars_global -> empty .)
    $end            reduce using rule 4 (vars_global -> empty .)


state 11

    (3) vars_global -> varsGlobal vars_global .

    ID              reduce using rule 3 (vars_global -> varsGlobal vars_global .)
    FUNC            reduce using rule 3 (vars_global -> varsGlobal vars_global .)
    $end            reduce using rule 3 (vars_global -> varsGlobal vars_global .)


state 12

    (9) func -> FUNC idCheck . LPAR funcx RPAR block

    LPAR            shift and go to state 20


state 13

    (10) idCheck -> ID .

    LPAR            reduce using rule 10 (idCheck -> ID .)


state 14

    (2) class -> func class .

    $end            reduce using rule 2 (class -> func class .)


state 15

    (1) class -> vars_global init_vars . func_list
    (7) func_list -> . func func_list
    (8) func_list -> . empty
    (9) func -> . FUNC idCheck LPAR funcx RPAR block
    (83) empty -> .

    FUNC            shift and go to state 3
    $end            reduce using rule 83 (empty -> .)

    func                           shift and go to state 21
    func_list                      shift and go to state 22
    empty                          shift and go to state 23

state 16

    (5) init_vars -> asign . init_vars
    (5) init_vars -> . asign init_vars
    (6) init_vars -> . empty
    (36) asign -> . ID EQUAL expression
    (83) empty -> .

    ID              shift and go to state 17
    FUNC            reduce using rule 83 (empty -> .)
    $end            reduce using rule 83 (empty -> .)

    empty                          shift and go to state 18
    init_vars                      shift and go to state 24
    asign                          shift and go to state 16

state 17

    (36) asign -> ID . EQUAL expression

    EQUAL           shift and go to state 25


state 18

    (6) init_vars -> empty .

    FUNC            reduce using rule 6 (init_vars -> empty .)
    $end            reduce using rule 6 (init_vars -> empty .)


state 19

    (31) varsGlobal -> type ID .

    INT             reduce using rule 31 (varsGlobal -> type ID .)
    FLOAT           reduce using rule 31 (varsGlobal -> type ID .)
    BOOLEAN         reduce using rule 31 (varsGlobal -> type ID .)
    ID              reduce using rule 31 (varsGlobal -> type ID .)
    FUNC            reduce using rule 31 (varsGlobal -> type ID .)
    $end            reduce using rule 31 (varsGlobal -> type ID .)


state 20

    (9) func -> FUNC idCheck LPAR . funcx RPAR block
    (11) funcx -> . vars
    (12) funcx -> . empty
    (32) vars -> . type ID
    (83) empty -> .
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . BOOLEAN

    RPAR            reduce using rule 83 (empty -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5

    vars                           shift and go to state 26
    funcx                          shift and go to state 27
    type                           shift and go to state 29
    empty                          shift and go to state 28

state 21

    (7) func_list -> func . func_list
    (7) func_list -> . func func_list
    (8) func_list -> . empty
    (9) func -> . FUNC idCheck LPAR funcx RPAR block
    (83) empty -> .

    FUNC            shift and go to state 3
    $end            reduce using rule 83 (empty -> .)

    empty                          shift and go to state 23
    func                           shift and go to state 21
    func_list                      shift and go to state 30

state 22

    (1) class -> vars_global init_vars func_list .

    $end            reduce using rule 1 (class -> vars_global init_vars func_list .)


state 23

    (8) func_list -> empty .

    $end            reduce using rule 8 (func_list -> empty .)


state 24

    (5) init_vars -> asign init_vars .

    FUNC            reduce using rule 5 (init_vars -> asign init_vars .)
    $end            reduce using rule 5 (init_vars -> asign init_vars .)


state 25

    (36) asign -> ID EQUAL . expression
    (37) expression -> . exp
    (38) expression -> . exp COMPARISON exp
    (39) exp -> . termino
    (40) exp -> . termino PLUS exp
    (41) exp -> . termino MINUS exp
    (42) exp -> . termino MULTIPLY exp
    (43) exp -> . termino DIVIDE exp
    (44) termino -> . LPAR expression RPAR
    (45) termino -> . PLUS varcte
    (46) termino -> . MINUS varcte
    (47) termino -> . varcte
    (48) varcte -> . ID
    (49) varcte -> . NUMINT
    (50) varcte -> . NUMFLOAT
    (51) varcte -> . TRUE
    (52) varcte -> . FALSE

    LPAR            shift and go to state 32
    PLUS            shift and go to state 36
    MINUS           shift and go to state 35
    ID              shift and go to state 41
    NUMINT          shift and go to state 33
    NUMFLOAT        shift and go to state 39
    TRUE            shift and go to state 34
    FALSE           shift and go to state 31

    expression                     shift and go to state 40
    termino                        shift and go to state 37
    exp                            shift and go to state 38
    varcte                         shift and go to state 42

state 26

    (11) funcx -> vars .

    RPAR            reduce using rule 11 (funcx -> vars .)


state 27

    (9) func -> FUNC idCheck LPAR funcx . RPAR block

    RPAR            shift and go to state 43


state 28

    (12) funcx -> empty .

    RPAR            reduce using rule 12 (funcx -> empty .)


state 29

    (32) vars -> type . ID

    ID              shift and go to state 44


state 30

    (7) func_list -> func func_list .

    $end            reduce using rule 7 (func_list -> func func_list .)


state 31

    (52) varcte -> FALSE .

    PLUS            reduce using rule 52 (varcte -> FALSE .)
    MINUS           reduce using rule 52 (varcte -> FALSE .)
    MULTIPLY        reduce using rule 52 (varcte -> FALSE .)
    DIVIDE          reduce using rule 52 (varcte -> FALSE .)
    COMPARISON      reduce using rule 52 (varcte -> FALSE .)
    COMA            reduce using rule 52 (varcte -> FALSE .)
    RPAR            reduce using rule 52 (varcte -> FALSE .)
    ID              reduce using rule 52 (varcte -> FALSE .)
    FUNC            reduce using rule 52 (varcte -> FALSE .)
    $end            reduce using rule 52 (varcte -> FALSE .)
    INT             reduce using rule 52 (varcte -> FALSE .)
    FLOAT           reduce using rule 52 (varcte -> FALSE .)
    BOOLEAN         reduce using rule 52 (varcte -> FALSE .)
    IF              reduce using rule 52 (varcte -> FALSE .)
    WHILE           reduce using rule 52 (varcte -> FALSE .)
    PRINT           reduce using rule 52 (varcte -> FALSE .)
    LIST            reduce using rule 52 (varcte -> FALSE .)
    MOVE            reduce using rule 52 (varcte -> FALSE .)
    EAT             reduce using rule 52 (varcte -> FALSE .)
    CLEAN           reduce using rule 52 (varcte -> FALSE .)
    PLAY            reduce using rule 52 (varcte -> FALSE .)
    TURNLEFT        reduce using rule 52 (varcte -> FALSE .)
    TURNRIGHT       reduce using rule 52 (varcte -> FALSE .)
    RBRACKET        reduce using rule 52 (varcte -> FALSE .)


state 32

    (44) termino -> LPAR . expression RPAR
    (37) expression -> . exp
    (38) expression -> . exp COMPARISON exp
    (39) exp -> . termino
    (40) exp -> . termino PLUS exp
    (41) exp -> . termino MINUS exp
    (42) exp -> . termino MULTIPLY exp
    (43) exp -> . termino DIVIDE exp
    (44) termino -> . LPAR expression RPAR
    (45) termino -> . PLUS varcte
    (46) termino -> . MINUS varcte
    (47) termino -> . varcte
    (48) varcte -> . ID
    (49) varcte -> . NUMINT
    (50) varcte -> . NUMFLOAT
    (51) varcte -> . TRUE
    (52) varcte -> . FALSE

    LPAR            shift and go to state 32
    PLUS            shift and go to state 36
    MINUS           shift and go to state 35
    ID              shift and go to state 41
    NUMINT          shift and go to state 33
    NUMFLOAT        shift and go to state 39
    TRUE            shift and go to state 34
    FALSE           shift and go to state 31

    expression                     shift and go to state 45
    termino                        shift and go to state 37
    exp                            shift and go to state 38
    varcte                         shift and go to state 42

state 33

    (49) varcte -> NUMINT .

    PLUS            reduce using rule 49 (varcte -> NUMINT .)
    MINUS           reduce using rule 49 (varcte -> NUMINT .)
    MULTIPLY        reduce using rule 49 (varcte -> NUMINT .)
    DIVIDE          reduce using rule 49 (varcte -> NUMINT .)
    COMPARISON      reduce using rule 49 (varcte -> NUMINT .)
    COMA            reduce using rule 49 (varcte -> NUMINT .)
    RPAR            reduce using rule 49 (varcte -> NUMINT .)
    ID              reduce using rule 49 (varcte -> NUMINT .)
    FUNC            reduce using rule 49 (varcte -> NUMINT .)
    $end            reduce using rule 49 (varcte -> NUMINT .)
    INT             reduce using rule 49 (varcte -> NUMINT .)
    FLOAT           reduce using rule 49 (varcte -> NUMINT .)
    BOOLEAN         reduce using rule 49 (varcte -> NUMINT .)
    IF              reduce using rule 49 (varcte -> NUMINT .)
    WHILE           reduce using rule 49 (varcte -> NUMINT .)
    PRINT           reduce using rule 49 (varcte -> NUMINT .)
    LIST            reduce using rule 49 (varcte -> NUMINT .)
    MOVE            reduce using rule 49 (varcte -> NUMINT .)
    EAT             reduce using rule 49 (varcte -> NUMINT .)
    CLEAN           reduce using rule 49 (varcte -> NUMINT .)
    PLAY            reduce using rule 49 (varcte -> NUMINT .)
    TURNLEFT        reduce using rule 49 (varcte -> NUMINT .)
    TURNRIGHT       reduce using rule 49 (varcte -> NUMINT .)
    RBRACKET        reduce using rule 49 (varcte -> NUMINT .)


state 34

    (51) varcte -> TRUE .

    PLUS            reduce using rule 51 (varcte -> TRUE .)
    MINUS           reduce using rule 51 (varcte -> TRUE .)
    MULTIPLY        reduce using rule 51 (varcte -> TRUE .)
    DIVIDE          reduce using rule 51 (varcte -> TRUE .)
    COMPARISON      reduce using rule 51 (varcte -> TRUE .)
    COMA            reduce using rule 51 (varcte -> TRUE .)
    RPAR            reduce using rule 51 (varcte -> TRUE .)
    ID              reduce using rule 51 (varcte -> TRUE .)
    FUNC            reduce using rule 51 (varcte -> TRUE .)
    $end            reduce using rule 51 (varcte -> TRUE .)
    INT             reduce using rule 51 (varcte -> TRUE .)
    FLOAT           reduce using rule 51 (varcte -> TRUE .)
    BOOLEAN         reduce using rule 51 (varcte -> TRUE .)
    IF              reduce using rule 51 (varcte -> TRUE .)
    WHILE           reduce using rule 51 (varcte -> TRUE .)
    PRINT           reduce using rule 51 (varcte -> TRUE .)
    LIST            reduce using rule 51 (varcte -> TRUE .)
    MOVE            reduce using rule 51 (varcte -> TRUE .)
    EAT             reduce using rule 51 (varcte -> TRUE .)
    CLEAN           reduce using rule 51 (varcte -> TRUE .)
    PLAY            reduce using rule 51 (varcte -> TRUE .)
    TURNLEFT        reduce using rule 51 (varcte -> TRUE .)
    TURNRIGHT       reduce using rule 51 (varcte -> TRUE .)
    RBRACKET        reduce using rule 51 (varcte -> TRUE .)


state 35

    (46) termino -> MINUS . varcte
    (48) varcte -> . ID
    (49) varcte -> . NUMINT
    (50) varcte -> . NUMFLOAT
    (51) varcte -> . TRUE
    (52) varcte -> . FALSE

    ID              shift and go to state 41
    NUMINT          shift and go to state 33
    NUMFLOAT        shift and go to state 39
    TRUE            shift and go to state 34
    FALSE           shift and go to state 31

    varcte                         shift and go to state 46

state 36

    (45) termino -> PLUS . varcte
    (48) varcte -> . ID
    (49) varcte -> . NUMINT
    (50) varcte -> . NUMFLOAT
    (51) varcte -> . TRUE
    (52) varcte -> . FALSE

    ID              shift and go to state 41
    NUMINT          shift and go to state 33
    NUMFLOAT        shift and go to state 39
    TRUE            shift and go to state 34
    FALSE           shift and go to state 31

    varcte                         shift and go to state 47

state 37

    (39) exp -> termino .
    (40) exp -> termino . PLUS exp
    (41) exp -> termino . MINUS exp
    (42) exp -> termino . MULTIPLY exp
    (43) exp -> termino . DIVIDE exp

    COMPARISON      reduce using rule 39 (exp -> termino .)
    ID              reduce using rule 39 (exp -> termino .)
    FUNC            reduce using rule 39 (exp -> termino .)
    $end            reduce using rule 39 (exp -> termino .)
    INT             reduce using rule 39 (exp -> termino .)
    FLOAT           reduce using rule 39 (exp -> termino .)
    BOOLEAN         reduce using rule 39 (exp -> termino .)
    IF              reduce using rule 39 (exp -> termino .)
    WHILE           reduce using rule 39 (exp -> termino .)
    PRINT           reduce using rule 39 (exp -> termino .)
    LIST            reduce using rule 39 (exp -> termino .)
    MOVE            reduce using rule 39 (exp -> termino .)
    EAT             reduce using rule 39 (exp -> termino .)
    CLEAN           reduce using rule 39 (exp -> termino .)
    PLAY            reduce using rule 39 (exp -> termino .)
    TURNLEFT        reduce using rule 39 (exp -> termino .)
    TURNRIGHT       reduce using rule 39 (exp -> termino .)
    RBRACKET        reduce using rule 39 (exp -> termino .)
    RPAR            reduce using rule 39 (exp -> termino .)
    COMA            reduce using rule 39 (exp -> termino .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 51
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 48


state 38

    (37) expression -> exp .
    (38) expression -> exp . COMPARISON exp

    RPAR            reduce using rule 37 (expression -> exp .)
    COMA            reduce using rule 37 (expression -> exp .)
    ID              reduce using rule 37 (expression -> exp .)
    FUNC            reduce using rule 37 (expression -> exp .)
    $end            reduce using rule 37 (expression -> exp .)
    INT             reduce using rule 37 (expression -> exp .)
    FLOAT           reduce using rule 37 (expression -> exp .)
    BOOLEAN         reduce using rule 37 (expression -> exp .)
    IF              reduce using rule 37 (expression -> exp .)
    WHILE           reduce using rule 37 (expression -> exp .)
    PRINT           reduce using rule 37 (expression -> exp .)
    LIST            reduce using rule 37 (expression -> exp .)
    MOVE            reduce using rule 37 (expression -> exp .)
    EAT             reduce using rule 37 (expression -> exp .)
    CLEAN           reduce using rule 37 (expression -> exp .)
    PLAY            reduce using rule 37 (expression -> exp .)
    TURNLEFT        reduce using rule 37 (expression -> exp .)
    TURNRIGHT       reduce using rule 37 (expression -> exp .)
    RBRACKET        reduce using rule 37 (expression -> exp .)
    COMPARISON      shift and go to state 52


state 39

    (50) varcte -> NUMFLOAT .

    PLUS            reduce using rule 50 (varcte -> NUMFLOAT .)
    MINUS           reduce using rule 50 (varcte -> NUMFLOAT .)
    MULTIPLY        reduce using rule 50 (varcte -> NUMFLOAT .)
    DIVIDE          reduce using rule 50 (varcte -> NUMFLOAT .)
    COMPARISON      reduce using rule 50 (varcte -> NUMFLOAT .)
    COMA            reduce using rule 50 (varcte -> NUMFLOAT .)
    RPAR            reduce using rule 50 (varcte -> NUMFLOAT .)
    ID              reduce using rule 50 (varcte -> NUMFLOAT .)
    FUNC            reduce using rule 50 (varcte -> NUMFLOAT .)
    $end            reduce using rule 50 (varcte -> NUMFLOAT .)
    INT             reduce using rule 50 (varcte -> NUMFLOAT .)
    FLOAT           reduce using rule 50 (varcte -> NUMFLOAT .)
    BOOLEAN         reduce using rule 50 (varcte -> NUMFLOAT .)
    IF              reduce using rule 50 (varcte -> NUMFLOAT .)
    WHILE           reduce using rule 50 (varcte -> NUMFLOAT .)
    PRINT           reduce using rule 50 (varcte -> NUMFLOAT .)
    LIST            reduce using rule 50 (varcte -> NUMFLOAT .)
    MOVE            reduce using rule 50 (varcte -> NUMFLOAT .)
    EAT             reduce using rule 50 (varcte -> NUMFLOAT .)
    CLEAN           reduce using rule 50 (varcte -> NUMFLOAT .)
    PLAY            reduce using rule 50 (varcte -> NUMFLOAT .)
    TURNLEFT        reduce using rule 50 (varcte -> NUMFLOAT .)
    TURNRIGHT       reduce using rule 50 (varcte -> NUMFLOAT .)
    RBRACKET        reduce using rule 50 (varcte -> NUMFLOAT .)


state 40

    (36) asign -> ID EQUAL expression .

    INT             reduce using rule 36 (asign -> ID EQUAL expression .)
    FLOAT           reduce using rule 36 (asign -> ID EQUAL expression .)
    BOOLEAN         reduce using rule 36 (asign -> ID EQUAL expression .)
    ID              reduce using rule 36 (asign -> ID EQUAL expression .)
    IF              reduce using rule 36 (asign -> ID EQUAL expression .)
    WHILE           reduce using rule 36 (asign -> ID EQUAL expression .)
    PRINT           reduce using rule 36 (asign -> ID EQUAL expression .)
    LIST            reduce using rule 36 (asign -> ID EQUAL expression .)
    MOVE            reduce using rule 36 (asign -> ID EQUAL expression .)
    EAT             reduce using rule 36 (asign -> ID EQUAL expression .)
    CLEAN           reduce using rule 36 (asign -> ID EQUAL expression .)
    PLAY            reduce using rule 36 (asign -> ID EQUAL expression .)
    TURNLEFT        reduce using rule 36 (asign -> ID EQUAL expression .)
    TURNRIGHT       reduce using rule 36 (asign -> ID EQUAL expression .)
    RBRACKET        reduce using rule 36 (asign -> ID EQUAL expression .)
    FUNC            reduce using rule 36 (asign -> ID EQUAL expression .)
    $end            reduce using rule 36 (asign -> ID EQUAL expression .)


state 41

    (48) varcte -> ID .

    PLUS            reduce using rule 48 (varcte -> ID .)
    MINUS           reduce using rule 48 (varcte -> ID .)
    MULTIPLY        reduce using rule 48 (varcte -> ID .)
    DIVIDE          reduce using rule 48 (varcte -> ID .)
    COMPARISON      reduce using rule 48 (varcte -> ID .)
    COMA            reduce using rule 48 (varcte -> ID .)
    RPAR            reduce using rule 48 (varcte -> ID .)
    ID              reduce using rule 48 (varcte -> ID .)
    FUNC            reduce using rule 48 (varcte -> ID .)
    $end            reduce using rule 48 (varcte -> ID .)
    INT             reduce using rule 48 (varcte -> ID .)
    FLOAT           reduce using rule 48 (varcte -> ID .)
    BOOLEAN         reduce using rule 48 (varcte -> ID .)
    IF              reduce using rule 48 (varcte -> ID .)
    WHILE           reduce using rule 48 (varcte -> ID .)
    PRINT           reduce using rule 48 (varcte -> ID .)
    LIST            reduce using rule 48 (varcte -> ID .)
    MOVE            reduce using rule 48 (varcte -> ID .)
    EAT             reduce using rule 48 (varcte -> ID .)
    CLEAN           reduce using rule 48 (varcte -> ID .)
    PLAY            reduce using rule 48 (varcte -> ID .)
    TURNLEFT        reduce using rule 48 (varcte -> ID .)
    TURNRIGHT       reduce using rule 48 (varcte -> ID .)
    RBRACKET        reduce using rule 48 (varcte -> ID .)


state 42

    (47) termino -> varcte .

    PLUS            reduce using rule 47 (termino -> varcte .)
    MINUS           reduce using rule 47 (termino -> varcte .)
    MULTIPLY        reduce using rule 47 (termino -> varcte .)
    DIVIDE          reduce using rule 47 (termino -> varcte .)
    COMPARISON      reduce using rule 47 (termino -> varcte .)
    RPAR            reduce using rule 47 (termino -> varcte .)
    COMA            reduce using rule 47 (termino -> varcte .)
    ID              reduce using rule 47 (termino -> varcte .)
    FUNC            reduce using rule 47 (termino -> varcte .)
    $end            reduce using rule 47 (termino -> varcte .)
    INT             reduce using rule 47 (termino -> varcte .)
    FLOAT           reduce using rule 47 (termino -> varcte .)
    BOOLEAN         reduce using rule 47 (termino -> varcte .)
    IF              reduce using rule 47 (termino -> varcte .)
    WHILE           reduce using rule 47 (termino -> varcte .)
    PRINT           reduce using rule 47 (termino -> varcte .)
    LIST            reduce using rule 47 (termino -> varcte .)
    MOVE            reduce using rule 47 (termino -> varcte .)
    EAT             reduce using rule 47 (termino -> varcte .)
    CLEAN           reduce using rule 47 (termino -> varcte .)
    PLAY            reduce using rule 47 (termino -> varcte .)
    TURNLEFT        reduce using rule 47 (termino -> varcte .)
    TURNRIGHT       reduce using rule 47 (termino -> varcte .)
    RBRACKET        reduce using rule 47 (termino -> varcte .)


state 43

    (9) func -> FUNC idCheck LPAR funcx RPAR . block
    (13) block -> . LBRACKET blockx RBRACKET

    LBRACKET        shift and go to state 53

    block                          shift and go to state 54

state 44

    (32) vars -> type ID .

    INT             reduce using rule 32 (vars -> type ID .)
    FLOAT           reduce using rule 32 (vars -> type ID .)
    BOOLEAN         reduce using rule 32 (vars -> type ID .)
    ID              reduce using rule 32 (vars -> type ID .)
    IF              reduce using rule 32 (vars -> type ID .)
    WHILE           reduce using rule 32 (vars -> type ID .)
    PRINT           reduce using rule 32 (vars -> type ID .)
    LIST            reduce using rule 32 (vars -> type ID .)
    MOVE            reduce using rule 32 (vars -> type ID .)
    EAT             reduce using rule 32 (vars -> type ID .)
    CLEAN           reduce using rule 32 (vars -> type ID .)
    PLAY            reduce using rule 32 (vars -> type ID .)
    TURNLEFT        reduce using rule 32 (vars -> type ID .)
    TURNRIGHT       reduce using rule 32 (vars -> type ID .)
    RBRACKET        reduce using rule 32 (vars -> type ID .)
    RPAR            reduce using rule 32 (vars -> type ID .)


state 45

    (44) termino -> LPAR expression . RPAR

    RPAR            shift and go to state 55


state 46

    (46) termino -> MINUS varcte .

    PLUS            reduce using rule 46 (termino -> MINUS varcte .)
    MINUS           reduce using rule 46 (termino -> MINUS varcte .)
    MULTIPLY        reduce using rule 46 (termino -> MINUS varcte .)
    DIVIDE          reduce using rule 46 (termino -> MINUS varcte .)
    COMPARISON      reduce using rule 46 (termino -> MINUS varcte .)
    RPAR            reduce using rule 46 (termino -> MINUS varcte .)
    COMA            reduce using rule 46 (termino -> MINUS varcte .)
    ID              reduce using rule 46 (termino -> MINUS varcte .)
    FUNC            reduce using rule 46 (termino -> MINUS varcte .)
    $end            reduce using rule 46 (termino -> MINUS varcte .)
    INT             reduce using rule 46 (termino -> MINUS varcte .)
    FLOAT           reduce using rule 46 (termino -> MINUS varcte .)
    BOOLEAN         reduce using rule 46 (termino -> MINUS varcte .)
    IF              reduce using rule 46 (termino -> MINUS varcte .)
    WHILE           reduce using rule 46 (termino -> MINUS varcte .)
    PRINT           reduce using rule 46 (termino -> MINUS varcte .)
    LIST            reduce using rule 46 (termino -> MINUS varcte .)
    MOVE            reduce using rule 46 (termino -> MINUS varcte .)
    EAT             reduce using rule 46 (termino -> MINUS varcte .)
    CLEAN           reduce using rule 46 (termino -> MINUS varcte .)
    PLAY            reduce using rule 46 (termino -> MINUS varcte .)
    TURNLEFT        reduce using rule 46 (termino -> MINUS varcte .)
    TURNRIGHT       reduce using rule 46 (termino -> MINUS varcte .)
    RBRACKET        reduce using rule 46 (termino -> MINUS varcte .)


state 47

    (45) termino -> PLUS varcte .

    PLUS            reduce using rule 45 (termino -> PLUS varcte .)
    MINUS           reduce using rule 45 (termino -> PLUS varcte .)
    MULTIPLY        reduce using rule 45 (termino -> PLUS varcte .)
    DIVIDE          reduce using rule 45 (termino -> PLUS varcte .)
    COMPARISON      reduce using rule 45 (termino -> PLUS varcte .)
    RPAR            reduce using rule 45 (termino -> PLUS varcte .)
    COMA            reduce using rule 45 (termino -> PLUS varcte .)
    ID              reduce using rule 45 (termino -> PLUS varcte .)
    FUNC            reduce using rule 45 (termino -> PLUS varcte .)
    $end            reduce using rule 45 (termino -> PLUS varcte .)
    INT             reduce using rule 45 (termino -> PLUS varcte .)
    FLOAT           reduce using rule 45 (termino -> PLUS varcte .)
    BOOLEAN         reduce using rule 45 (termino -> PLUS varcte .)
    IF              reduce using rule 45 (termino -> PLUS varcte .)
    WHILE           reduce using rule 45 (termino -> PLUS varcte .)
    PRINT           reduce using rule 45 (termino -> PLUS varcte .)
    LIST            reduce using rule 45 (termino -> PLUS varcte .)
    MOVE            reduce using rule 45 (termino -> PLUS varcte .)
    EAT             reduce using rule 45 (termino -> PLUS varcte .)
    CLEAN           reduce using rule 45 (termino -> PLUS varcte .)
    PLAY            reduce using rule 45 (termino -> PLUS varcte .)
    TURNLEFT        reduce using rule 45 (termino -> PLUS varcte .)
    TURNRIGHT       reduce using rule 45 (termino -> PLUS varcte .)
    RBRACKET        reduce using rule 45 (termino -> PLUS varcte .)


state 48

    (43) exp -> termino DIVIDE . exp
    (39) exp -> . termino
    (40) exp -> . termino PLUS exp
    (41) exp -> . termino MINUS exp
    (42) exp -> . termino MULTIPLY exp
    (43) exp -> . termino DIVIDE exp
    (44) termino -> . LPAR expression RPAR
    (45) termino -> . PLUS varcte
    (46) termino -> . MINUS varcte
    (47) termino -> . varcte
    (48) varcte -> . ID
    (49) varcte -> . NUMINT
    (50) varcte -> . NUMFLOAT
    (51) varcte -> . TRUE
    (52) varcte -> . FALSE

    LPAR            shift and go to state 32
    PLUS            shift and go to state 36
    MINUS           shift and go to state 35
    ID              shift and go to state 41
    NUMINT          shift and go to state 33
    NUMFLOAT        shift and go to state 39
    TRUE            shift and go to state 34
    FALSE           shift and go to state 31

    termino                        shift and go to state 37
    exp                            shift and go to state 56
    varcte                         shift and go to state 42

state 49

    (40) exp -> termino PLUS . exp
    (39) exp -> . termino
    (40) exp -> . termino PLUS exp
    (41) exp -> . termino MINUS exp
    (42) exp -> . termino MULTIPLY exp
    (43) exp -> . termino DIVIDE exp
    (44) termino -> . LPAR expression RPAR
    (45) termino -> . PLUS varcte
    (46) termino -> . MINUS varcte
    (47) termino -> . varcte
    (48) varcte -> . ID
    (49) varcte -> . NUMINT
    (50) varcte -> . NUMFLOAT
    (51) varcte -> . TRUE
    (52) varcte -> . FALSE

    LPAR            shift and go to state 32
    PLUS            shift and go to state 36
    MINUS           shift and go to state 35
    ID              shift and go to state 41
    NUMINT          shift and go to state 33
    NUMFLOAT        shift and go to state 39
    TRUE            shift and go to state 34
    FALSE           shift and go to state 31

    termino                        shift and go to state 37
    exp                            shift and go to state 57
    varcte                         shift and go to state 42

state 50

    (42) exp -> termino MULTIPLY . exp
    (39) exp -> . termino
    (40) exp -> . termino PLUS exp
    (41) exp -> . termino MINUS exp
    (42) exp -> . termino MULTIPLY exp
    (43) exp -> . termino DIVIDE exp
    (44) termino -> . LPAR expression RPAR
    (45) termino -> . PLUS varcte
    (46) termino -> . MINUS varcte
    (47) termino -> . varcte
    (48) varcte -> . ID
    (49) varcte -> . NUMINT
    (50) varcte -> . NUMFLOAT
    (51) varcte -> . TRUE
    (52) varcte -> . FALSE

    LPAR            shift and go to state 32
    PLUS            shift and go to state 36
    MINUS           shift and go to state 35
    ID              shift and go to state 41
    NUMINT          shift and go to state 33
    NUMFLOAT        shift and go to state 39
    TRUE            shift and go to state 34
    FALSE           shift and go to state 31

    termino                        shift and go to state 37
    exp                            shift and go to state 58
    varcte                         shift and go to state 42

state 51

    (41) exp -> termino MINUS . exp
    (39) exp -> . termino
    (40) exp -> . termino PLUS exp
    (41) exp -> . termino MINUS exp
    (42) exp -> . termino MULTIPLY exp
    (43) exp -> . termino DIVIDE exp
    (44) termino -> . LPAR expression RPAR
    (45) termino -> . PLUS varcte
    (46) termino -> . MINUS varcte
    (47) termino -> . varcte
    (48) varcte -> . ID
    (49) varcte -> . NUMINT
    (50) varcte -> . NUMFLOAT
    (51) varcte -> . TRUE
    (52) varcte -> . FALSE

    LPAR            shift and go to state 32
    PLUS            shift and go to state 36
    MINUS           shift and go to state 35
    ID              shift and go to state 41
    NUMINT          shift and go to state 33
    NUMFLOAT        shift and go to state 39
    TRUE            shift and go to state 34
    FALSE           shift and go to state 31

    termino                        shift and go to state 37
    exp                            shift and go to state 59
    varcte                         shift and go to state 42

state 52

    (38) expression -> exp COMPARISON . exp
    (39) exp -> . termino
    (40) exp -> . termino PLUS exp
    (41) exp -> . termino MINUS exp
    (42) exp -> . termino MULTIPLY exp
    (43) exp -> . termino DIVIDE exp
    (44) termino -> . LPAR expression RPAR
    (45) termino -> . PLUS varcte
    (46) termino -> . MINUS varcte
    (47) termino -> . varcte
    (48) varcte -> . ID
    (49) varcte -> . NUMINT
    (50) varcte -> . NUMFLOAT
    (51) varcte -> . TRUE
    (52) varcte -> . FALSE

    LPAR            shift and go to state 32
    PLUS            shift and go to state 36
    MINUS           shift and go to state 35
    ID              shift and go to state 41
    NUMINT          shift and go to state 33
    NUMFLOAT        shift and go to state 39
    TRUE            shift and go to state 34
    FALSE           shift and go to state 31

    termino                        shift and go to state 37
    exp                            shift and go to state 60
    varcte                         shift and go to state 42

state 53

    (13) block -> LBRACKET . blockx RBRACKET
    (14) blockx -> . vars
    (15) blockx -> . vars blockx
    (16) blockx -> . statement
    (17) blockx -> . statement blockx
    (32) vars -> . type ID
    (18) statement -> . asign
    (19) statement -> . condition
    (20) statement -> . cycle
    (21) statement -> . print
    (22) statement -> . list
    (23) statement -> . call
    (24) statement -> . move
    (25) statement -> . eat
    (26) statement -> . clean
    (27) statement -> . play
    (28) statement -> . add
    (29) statement -> . turnleft
    (30) statement -> . turnright
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . BOOLEAN
    (36) asign -> . ID EQUAL expression
    (62) condition -> . IF LPAR expression cond_1 RPAR block cond_2
    (63) condition -> . IF LPAR expression cond_1 RPAR block ELSE cond_else block cond_2
    (58) cycle -> . WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3
    (53) print -> . PRINT LPAR printx RPAR
    (67) list -> . LIST ID EQUAL LBRACKET listx RBRACKET
    (72) call -> . ID LPAR RPAR
    (73) call -> . ID LPAR ID RPAR
    (74) move -> . MOVE LPAR ID RPAR
    (75) eat -> . EAT LPAR ID RPAR
    (76) clean -> . CLEAN LPAR ID RPAR
    (77) play -> . PLAY LPAR ID RPAR
    (78) add -> . ID POINT ADD LPAR CANDY RPAR
    (79) add -> . ID POINT ADD LPAR POOP RPAR
    (80) add -> . ID POINT ADD LPAR BALL RPAR
    (81) turnleft -> . TURNLEFT LPAR RPAR
    (82) turnright -> . TURNRIGHT LPAR RPAR

    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5
    ID              shift and go to state 67
    IF              shift and go to state 73
    WHILE           shift and go to state 64
    PRINT           shift and go to state 65
    LIST            shift and go to state 66
    MOVE            shift and go to state 77
    EAT             shift and go to state 74
    CLEAN           shift and go to state 81
    PLAY            shift and go to state 75
    TURNLEFT        shift and go to state 62
    TURNRIGHT       shift and go to state 80

    vars                           shift and go to state 61
    move                           shift and go to state 63
    turnright                      shift and go to state 68
    add                            shift and go to state 69
    call                           shift and go to state 70
    statement                      shift and go to state 71
    print                          shift and go to state 72
    type                           shift and go to state 29
    play                           shift and go to state 76
    turnleft                       shift and go to state 78
    blockx                         shift and go to state 79
    eat                            shift and go to state 82
    condition                      shift and go to state 83
    cycle                          shift and go to state 84
    list                           shift and go to state 85
    asign                          shift and go to state 86
    clean                          shift and go to state 87

state 54

    (9) func -> FUNC idCheck LPAR funcx RPAR block .

    FUNC            reduce using rule 9 (func -> FUNC idCheck LPAR funcx RPAR block .)
    $end            reduce using rule 9 (func -> FUNC idCheck LPAR funcx RPAR block .)
    INT             reduce using rule 9 (func -> FUNC idCheck LPAR funcx RPAR block .)
    FLOAT           reduce using rule 9 (func -> FUNC idCheck LPAR funcx RPAR block .)
    BOOLEAN         reduce using rule 9 (func -> FUNC idCheck LPAR funcx RPAR block .)
    ID              reduce using rule 9 (func -> FUNC idCheck LPAR funcx RPAR block .)


state 55

    (44) termino -> LPAR expression RPAR .

    PLUS            reduce using rule 44 (termino -> LPAR expression RPAR .)
    MINUS           reduce using rule 44 (termino -> LPAR expression RPAR .)
    MULTIPLY        reduce using rule 44 (termino -> LPAR expression RPAR .)
    DIVIDE          reduce using rule 44 (termino -> LPAR expression RPAR .)
    COMPARISON      reduce using rule 44 (termino -> LPAR expression RPAR .)
    RPAR            reduce using rule 44 (termino -> LPAR expression RPAR .)
    COMA            reduce using rule 44 (termino -> LPAR expression RPAR .)
    ID              reduce using rule 44 (termino -> LPAR expression RPAR .)
    FUNC            reduce using rule 44 (termino -> LPAR expression RPAR .)
    $end            reduce using rule 44 (termino -> LPAR expression RPAR .)
    INT             reduce using rule 44 (termino -> LPAR expression RPAR .)
    FLOAT           reduce using rule 44 (termino -> LPAR expression RPAR .)
    BOOLEAN         reduce using rule 44 (termino -> LPAR expression RPAR .)
    IF              reduce using rule 44 (termino -> LPAR expression RPAR .)
    WHILE           reduce using rule 44 (termino -> LPAR expression RPAR .)
    PRINT           reduce using rule 44 (termino -> LPAR expression RPAR .)
    LIST            reduce using rule 44 (termino -> LPAR expression RPAR .)
    MOVE            reduce using rule 44 (termino -> LPAR expression RPAR .)
    EAT             reduce using rule 44 (termino -> LPAR expression RPAR .)
    CLEAN           reduce using rule 44 (termino -> LPAR expression RPAR .)
    PLAY            reduce using rule 44 (termino -> LPAR expression RPAR .)
    TURNLEFT        reduce using rule 44 (termino -> LPAR expression RPAR .)
    TURNRIGHT       reduce using rule 44 (termino -> LPAR expression RPAR .)
    RBRACKET        reduce using rule 44 (termino -> LPAR expression RPAR .)


state 56

    (43) exp -> termino DIVIDE exp .

    COMPARISON      reduce using rule 43 (exp -> termino DIVIDE exp .)
    ID              reduce using rule 43 (exp -> termino DIVIDE exp .)
    FUNC            reduce using rule 43 (exp -> termino DIVIDE exp .)
    $end            reduce using rule 43 (exp -> termino DIVIDE exp .)
    INT             reduce using rule 43 (exp -> termino DIVIDE exp .)
    FLOAT           reduce using rule 43 (exp -> termino DIVIDE exp .)
    BOOLEAN         reduce using rule 43 (exp -> termino DIVIDE exp .)
    IF              reduce using rule 43 (exp -> termino DIVIDE exp .)
    WHILE           reduce using rule 43 (exp -> termino DIVIDE exp .)
    PRINT           reduce using rule 43 (exp -> termino DIVIDE exp .)
    LIST            reduce using rule 43 (exp -> termino DIVIDE exp .)
    MOVE            reduce using rule 43 (exp -> termino DIVIDE exp .)
    EAT             reduce using rule 43 (exp -> termino DIVIDE exp .)
    CLEAN           reduce using rule 43 (exp -> termino DIVIDE exp .)
    PLAY            reduce using rule 43 (exp -> termino DIVIDE exp .)
    TURNLEFT        reduce using rule 43 (exp -> termino DIVIDE exp .)
    TURNRIGHT       reduce using rule 43 (exp -> termino DIVIDE exp .)
    RBRACKET        reduce using rule 43 (exp -> termino DIVIDE exp .)
    RPAR            reduce using rule 43 (exp -> termino DIVIDE exp .)
    COMA            reduce using rule 43 (exp -> termino DIVIDE exp .)


state 57

    (40) exp -> termino PLUS exp .

    COMPARISON      reduce using rule 40 (exp -> termino PLUS exp .)
    ID              reduce using rule 40 (exp -> termino PLUS exp .)
    FUNC            reduce using rule 40 (exp -> termino PLUS exp .)
    $end            reduce using rule 40 (exp -> termino PLUS exp .)
    INT             reduce using rule 40 (exp -> termino PLUS exp .)
    FLOAT           reduce using rule 40 (exp -> termino PLUS exp .)
    BOOLEAN         reduce using rule 40 (exp -> termino PLUS exp .)
    IF              reduce using rule 40 (exp -> termino PLUS exp .)
    WHILE           reduce using rule 40 (exp -> termino PLUS exp .)
    PRINT           reduce using rule 40 (exp -> termino PLUS exp .)
    LIST            reduce using rule 40 (exp -> termino PLUS exp .)
    MOVE            reduce using rule 40 (exp -> termino PLUS exp .)
    EAT             reduce using rule 40 (exp -> termino PLUS exp .)
    CLEAN           reduce using rule 40 (exp -> termino PLUS exp .)
    PLAY            reduce using rule 40 (exp -> termino PLUS exp .)
    TURNLEFT        reduce using rule 40 (exp -> termino PLUS exp .)
    TURNRIGHT       reduce using rule 40 (exp -> termino PLUS exp .)
    RBRACKET        reduce using rule 40 (exp -> termino PLUS exp .)
    RPAR            reduce using rule 40 (exp -> termino PLUS exp .)
    COMA            reduce using rule 40 (exp -> termino PLUS exp .)


state 58

    (42) exp -> termino MULTIPLY exp .

    COMPARISON      reduce using rule 42 (exp -> termino MULTIPLY exp .)
    ID              reduce using rule 42 (exp -> termino MULTIPLY exp .)
    FUNC            reduce using rule 42 (exp -> termino MULTIPLY exp .)
    $end            reduce using rule 42 (exp -> termino MULTIPLY exp .)
    INT             reduce using rule 42 (exp -> termino MULTIPLY exp .)
    FLOAT           reduce using rule 42 (exp -> termino MULTIPLY exp .)
    BOOLEAN         reduce using rule 42 (exp -> termino MULTIPLY exp .)
    IF              reduce using rule 42 (exp -> termino MULTIPLY exp .)
    WHILE           reduce using rule 42 (exp -> termino MULTIPLY exp .)
    PRINT           reduce using rule 42 (exp -> termino MULTIPLY exp .)
    LIST            reduce using rule 42 (exp -> termino MULTIPLY exp .)
    MOVE            reduce using rule 42 (exp -> termino MULTIPLY exp .)
    EAT             reduce using rule 42 (exp -> termino MULTIPLY exp .)
    CLEAN           reduce using rule 42 (exp -> termino MULTIPLY exp .)
    PLAY            reduce using rule 42 (exp -> termino MULTIPLY exp .)
    TURNLEFT        reduce using rule 42 (exp -> termino MULTIPLY exp .)
    TURNRIGHT       reduce using rule 42 (exp -> termino MULTIPLY exp .)
    RBRACKET        reduce using rule 42 (exp -> termino MULTIPLY exp .)
    RPAR            reduce using rule 42 (exp -> termino MULTIPLY exp .)
    COMA            reduce using rule 42 (exp -> termino MULTIPLY exp .)


state 59

    (41) exp -> termino MINUS exp .

    COMPARISON      reduce using rule 41 (exp -> termino MINUS exp .)
    ID              reduce using rule 41 (exp -> termino MINUS exp .)
    FUNC            reduce using rule 41 (exp -> termino MINUS exp .)
    $end            reduce using rule 41 (exp -> termino MINUS exp .)
    INT             reduce using rule 41 (exp -> termino MINUS exp .)
    FLOAT           reduce using rule 41 (exp -> termino MINUS exp .)
    BOOLEAN         reduce using rule 41 (exp -> termino MINUS exp .)
    IF              reduce using rule 41 (exp -> termino MINUS exp .)
    WHILE           reduce using rule 41 (exp -> termino MINUS exp .)
    PRINT           reduce using rule 41 (exp -> termino MINUS exp .)
    LIST            reduce using rule 41 (exp -> termino MINUS exp .)
    MOVE            reduce using rule 41 (exp -> termino MINUS exp .)
    EAT             reduce using rule 41 (exp -> termino MINUS exp .)
    CLEAN           reduce using rule 41 (exp -> termino MINUS exp .)
    PLAY            reduce using rule 41 (exp -> termino MINUS exp .)
    TURNLEFT        reduce using rule 41 (exp -> termino MINUS exp .)
    TURNRIGHT       reduce using rule 41 (exp -> termino MINUS exp .)
    RBRACKET        reduce using rule 41 (exp -> termino MINUS exp .)
    RPAR            reduce using rule 41 (exp -> termino MINUS exp .)
    COMA            reduce using rule 41 (exp -> termino MINUS exp .)


state 60

    (38) expression -> exp COMPARISON exp .

    RPAR            reduce using rule 38 (expression -> exp COMPARISON exp .)
    COMA            reduce using rule 38 (expression -> exp COMPARISON exp .)
    ID              reduce using rule 38 (expression -> exp COMPARISON exp .)
    FUNC            reduce using rule 38 (expression -> exp COMPARISON exp .)
    $end            reduce using rule 38 (expression -> exp COMPARISON exp .)
    INT             reduce using rule 38 (expression -> exp COMPARISON exp .)
    FLOAT           reduce using rule 38 (expression -> exp COMPARISON exp .)
    BOOLEAN         reduce using rule 38 (expression -> exp COMPARISON exp .)
    IF              reduce using rule 38 (expression -> exp COMPARISON exp .)
    WHILE           reduce using rule 38 (expression -> exp COMPARISON exp .)
    PRINT           reduce using rule 38 (expression -> exp COMPARISON exp .)
    LIST            reduce using rule 38 (expression -> exp COMPARISON exp .)
    MOVE            reduce using rule 38 (expression -> exp COMPARISON exp .)
    EAT             reduce using rule 38 (expression -> exp COMPARISON exp .)
    CLEAN           reduce using rule 38 (expression -> exp COMPARISON exp .)
    PLAY            reduce using rule 38 (expression -> exp COMPARISON exp .)
    TURNLEFT        reduce using rule 38 (expression -> exp COMPARISON exp .)
    TURNRIGHT       reduce using rule 38 (expression -> exp COMPARISON exp .)
    RBRACKET        reduce using rule 38 (expression -> exp COMPARISON exp .)


state 61

    (14) blockx -> vars .
    (15) blockx -> vars . blockx
    (14) blockx -> . vars
    (15) blockx -> . vars blockx
    (16) blockx -> . statement
    (17) blockx -> . statement blockx
    (32) vars -> . type ID
    (18) statement -> . asign
    (19) statement -> . condition
    (20) statement -> . cycle
    (21) statement -> . print
    (22) statement -> . list
    (23) statement -> . call
    (24) statement -> . move
    (25) statement -> . eat
    (26) statement -> . clean
    (27) statement -> . play
    (28) statement -> . add
    (29) statement -> . turnleft
    (30) statement -> . turnright
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . BOOLEAN
    (36) asign -> . ID EQUAL expression
    (62) condition -> . IF LPAR expression cond_1 RPAR block cond_2
    (63) condition -> . IF LPAR expression cond_1 RPAR block ELSE cond_else block cond_2
    (58) cycle -> . WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3
    (53) print -> . PRINT LPAR printx RPAR
    (67) list -> . LIST ID EQUAL LBRACKET listx RBRACKET
    (72) call -> . ID LPAR RPAR
    (73) call -> . ID LPAR ID RPAR
    (74) move -> . MOVE LPAR ID RPAR
    (75) eat -> . EAT LPAR ID RPAR
    (76) clean -> . CLEAN LPAR ID RPAR
    (77) play -> . PLAY LPAR ID RPAR
    (78) add -> . ID POINT ADD LPAR CANDY RPAR
    (79) add -> . ID POINT ADD LPAR POOP RPAR
    (80) add -> . ID POINT ADD LPAR BALL RPAR
    (81) turnleft -> . TURNLEFT LPAR RPAR
    (82) turnright -> . TURNRIGHT LPAR RPAR

    RBRACKET        reduce using rule 14 (blockx -> vars .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5
    ID              shift and go to state 67
    IF              shift and go to state 73
    WHILE           shift and go to state 64
    PRINT           shift and go to state 65
    LIST            shift and go to state 66
    MOVE            shift and go to state 77
    EAT             shift and go to state 74
    CLEAN           shift and go to state 81
    PLAY            shift and go to state 75
    TURNLEFT        shift and go to state 62
    TURNRIGHT       shift and go to state 80

    vars                           shift and go to state 61
    move                           shift and go to state 63
    turnright                      shift and go to state 68
    add                            shift and go to state 69
    call                           shift and go to state 70
    statement                      shift and go to state 71
    print                          shift and go to state 72
    type                           shift and go to state 29
    play                           shift and go to state 76
    turnleft                       shift and go to state 78
    blockx                         shift and go to state 88
    eat                            shift and go to state 82
    condition                      shift and go to state 83
    cycle                          shift and go to state 84
    list                           shift and go to state 85
    asign                          shift and go to state 86
    clean                          shift and go to state 87

state 62

    (81) turnleft -> TURNLEFT . LPAR RPAR

    LPAR            shift and go to state 89


state 63

    (24) statement -> move .

    INT             reduce using rule 24 (statement -> move .)
    FLOAT           reduce using rule 24 (statement -> move .)
    BOOLEAN         reduce using rule 24 (statement -> move .)
    ID              reduce using rule 24 (statement -> move .)
    IF              reduce using rule 24 (statement -> move .)
    WHILE           reduce using rule 24 (statement -> move .)
    PRINT           reduce using rule 24 (statement -> move .)
    LIST            reduce using rule 24 (statement -> move .)
    MOVE            reduce using rule 24 (statement -> move .)
    EAT             reduce using rule 24 (statement -> move .)
    CLEAN           reduce using rule 24 (statement -> move .)
    PLAY            reduce using rule 24 (statement -> move .)
    TURNLEFT        reduce using rule 24 (statement -> move .)
    TURNRIGHT       reduce using rule 24 (statement -> move .)
    RBRACKET        reduce using rule 24 (statement -> move .)


state 64

    (58) cycle -> WHILE . cycle_1 LPAR expression RPAR cycle_2 block cycle_3
    (59) cycle_1 -> .

    LPAR            reduce using rule 59 (cycle_1 -> .)

    cycle_1                        shift and go to state 90

state 65

    (53) print -> PRINT . LPAR printx RPAR

    LPAR            shift and go to state 91


state 66

    (67) list -> LIST . ID EQUAL LBRACKET listx RBRACKET

    ID              shift and go to state 92


state 67

    (36) asign -> ID . EQUAL expression
    (72) call -> ID . LPAR RPAR
    (73) call -> ID . LPAR ID RPAR
    (78) add -> ID . POINT ADD LPAR CANDY RPAR
    (79) add -> ID . POINT ADD LPAR POOP RPAR
    (80) add -> ID . POINT ADD LPAR BALL RPAR

    EQUAL           shift and go to state 25
    LPAR            shift and go to state 93
    POINT           shift and go to state 94


state 68

    (30) statement -> turnright .

    INT             reduce using rule 30 (statement -> turnright .)
    FLOAT           reduce using rule 30 (statement -> turnright .)
    BOOLEAN         reduce using rule 30 (statement -> turnright .)
    ID              reduce using rule 30 (statement -> turnright .)
    IF              reduce using rule 30 (statement -> turnright .)
    WHILE           reduce using rule 30 (statement -> turnright .)
    PRINT           reduce using rule 30 (statement -> turnright .)
    LIST            reduce using rule 30 (statement -> turnright .)
    MOVE            reduce using rule 30 (statement -> turnright .)
    EAT             reduce using rule 30 (statement -> turnright .)
    CLEAN           reduce using rule 30 (statement -> turnright .)
    PLAY            reduce using rule 30 (statement -> turnright .)
    TURNLEFT        reduce using rule 30 (statement -> turnright .)
    TURNRIGHT       reduce using rule 30 (statement -> turnright .)
    RBRACKET        reduce using rule 30 (statement -> turnright .)


state 69

    (28) statement -> add .

    INT             reduce using rule 28 (statement -> add .)
    FLOAT           reduce using rule 28 (statement -> add .)
    BOOLEAN         reduce using rule 28 (statement -> add .)
    ID              reduce using rule 28 (statement -> add .)
    IF              reduce using rule 28 (statement -> add .)
    WHILE           reduce using rule 28 (statement -> add .)
    PRINT           reduce using rule 28 (statement -> add .)
    LIST            reduce using rule 28 (statement -> add .)
    MOVE            reduce using rule 28 (statement -> add .)
    EAT             reduce using rule 28 (statement -> add .)
    CLEAN           reduce using rule 28 (statement -> add .)
    PLAY            reduce using rule 28 (statement -> add .)
    TURNLEFT        reduce using rule 28 (statement -> add .)
    TURNRIGHT       reduce using rule 28 (statement -> add .)
    RBRACKET        reduce using rule 28 (statement -> add .)


state 70

    (23) statement -> call .

    INT             reduce using rule 23 (statement -> call .)
    FLOAT           reduce using rule 23 (statement -> call .)
    BOOLEAN         reduce using rule 23 (statement -> call .)
    ID              reduce using rule 23 (statement -> call .)
    IF              reduce using rule 23 (statement -> call .)
    WHILE           reduce using rule 23 (statement -> call .)
    PRINT           reduce using rule 23 (statement -> call .)
    LIST            reduce using rule 23 (statement -> call .)
    MOVE            reduce using rule 23 (statement -> call .)
    EAT             reduce using rule 23 (statement -> call .)
    CLEAN           reduce using rule 23 (statement -> call .)
    PLAY            reduce using rule 23 (statement -> call .)
    TURNLEFT        reduce using rule 23 (statement -> call .)
    TURNRIGHT       reduce using rule 23 (statement -> call .)
    RBRACKET        reduce using rule 23 (statement -> call .)


state 71

    (16) blockx -> statement .
    (17) blockx -> statement . blockx
    (14) blockx -> . vars
    (15) blockx -> . vars blockx
    (16) blockx -> . statement
    (17) blockx -> . statement blockx
    (32) vars -> . type ID
    (18) statement -> . asign
    (19) statement -> . condition
    (20) statement -> . cycle
    (21) statement -> . print
    (22) statement -> . list
    (23) statement -> . call
    (24) statement -> . move
    (25) statement -> . eat
    (26) statement -> . clean
    (27) statement -> . play
    (28) statement -> . add
    (29) statement -> . turnleft
    (30) statement -> . turnright
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . BOOLEAN
    (36) asign -> . ID EQUAL expression
    (62) condition -> . IF LPAR expression cond_1 RPAR block cond_2
    (63) condition -> . IF LPAR expression cond_1 RPAR block ELSE cond_else block cond_2
    (58) cycle -> . WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3
    (53) print -> . PRINT LPAR printx RPAR
    (67) list -> . LIST ID EQUAL LBRACKET listx RBRACKET
    (72) call -> . ID LPAR RPAR
    (73) call -> . ID LPAR ID RPAR
    (74) move -> . MOVE LPAR ID RPAR
    (75) eat -> . EAT LPAR ID RPAR
    (76) clean -> . CLEAN LPAR ID RPAR
    (77) play -> . PLAY LPAR ID RPAR
    (78) add -> . ID POINT ADD LPAR CANDY RPAR
    (79) add -> . ID POINT ADD LPAR POOP RPAR
    (80) add -> . ID POINT ADD LPAR BALL RPAR
    (81) turnleft -> . TURNLEFT LPAR RPAR
    (82) turnright -> . TURNRIGHT LPAR RPAR

    RBRACKET        reduce using rule 16 (blockx -> statement .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 2
    BOOLEAN         shift and go to state 5
    ID              shift and go to state 67
    IF              shift and go to state 73
    WHILE           shift and go to state 64
    PRINT           shift and go to state 65
    LIST            shift and go to state 66
    MOVE            shift and go to state 77
    EAT             shift and go to state 74
    CLEAN           shift and go to state 81
    PLAY            shift and go to state 75
    TURNLEFT        shift and go to state 62
    TURNRIGHT       shift and go to state 80

    vars                           shift and go to state 61
    move                           shift and go to state 63
    turnright                      shift and go to state 68
    add                            shift and go to state 69
    call                           shift and go to state 70
    statement                      shift and go to state 71
    print                          shift and go to state 72
    type                           shift and go to state 29
    play                           shift and go to state 76
    turnleft                       shift and go to state 78
    blockx                         shift and go to state 95
    eat                            shift and go to state 82
    condition                      shift and go to state 83
    cycle                          shift and go to state 84
    list                           shift and go to state 85
    asign                          shift and go to state 86
    clean                          shift and go to state 87

state 72

    (21) statement -> print .

    INT             reduce using rule 21 (statement -> print .)
    FLOAT           reduce using rule 21 (statement -> print .)
    BOOLEAN         reduce using rule 21 (statement -> print .)
    ID              reduce using rule 21 (statement -> print .)
    IF              reduce using rule 21 (statement -> print .)
    WHILE           reduce using rule 21 (statement -> print .)
    PRINT           reduce using rule 21 (statement -> print .)
    LIST            reduce using rule 21 (statement -> print .)
    MOVE            reduce using rule 21 (statement -> print .)
    EAT             reduce using rule 21 (statement -> print .)
    CLEAN           reduce using rule 21 (statement -> print .)
    PLAY            reduce using rule 21 (statement -> print .)
    TURNLEFT        reduce using rule 21 (statement -> print .)
    TURNRIGHT       reduce using rule 21 (statement -> print .)
    RBRACKET        reduce using rule 21 (statement -> print .)


state 73

    (62) condition -> IF . LPAR expression cond_1 RPAR block cond_2
    (63) condition -> IF . LPAR expression cond_1 RPAR block ELSE cond_else block cond_2

    LPAR            shift and go to state 96


state 74

    (75) eat -> EAT . LPAR ID RPAR

    LPAR            shift and go to state 97


state 75

    (77) play -> PLAY . LPAR ID RPAR

    LPAR            shift and go to state 98


state 76

    (27) statement -> play .

    INT             reduce using rule 27 (statement -> play .)
    FLOAT           reduce using rule 27 (statement -> play .)
    BOOLEAN         reduce using rule 27 (statement -> play .)
    ID              reduce using rule 27 (statement -> play .)
    IF              reduce using rule 27 (statement -> play .)
    WHILE           reduce using rule 27 (statement -> play .)
    PRINT           reduce using rule 27 (statement -> play .)
    LIST            reduce using rule 27 (statement -> play .)
    MOVE            reduce using rule 27 (statement -> play .)
    EAT             reduce using rule 27 (statement -> play .)
    CLEAN           reduce using rule 27 (statement -> play .)
    PLAY            reduce using rule 27 (statement -> play .)
    TURNLEFT        reduce using rule 27 (statement -> play .)
    TURNRIGHT       reduce using rule 27 (statement -> play .)
    RBRACKET        reduce using rule 27 (statement -> play .)


state 77

    (74) move -> MOVE . LPAR ID RPAR

    LPAR            shift and go to state 99


state 78

    (29) statement -> turnleft .

    INT             reduce using rule 29 (statement -> turnleft .)
    FLOAT           reduce using rule 29 (statement -> turnleft .)
    BOOLEAN         reduce using rule 29 (statement -> turnleft .)
    ID              reduce using rule 29 (statement -> turnleft .)
    IF              reduce using rule 29 (statement -> turnleft .)
    WHILE           reduce using rule 29 (statement -> turnleft .)
    PRINT           reduce using rule 29 (statement -> turnleft .)
    LIST            reduce using rule 29 (statement -> turnleft .)
    MOVE            reduce using rule 29 (statement -> turnleft .)
    EAT             reduce using rule 29 (statement -> turnleft .)
    CLEAN           reduce using rule 29 (statement -> turnleft .)
    PLAY            reduce using rule 29 (statement -> turnleft .)
    TURNLEFT        reduce using rule 29 (statement -> turnleft .)
    TURNRIGHT       reduce using rule 29 (statement -> turnleft .)
    RBRACKET        reduce using rule 29 (statement -> turnleft .)


state 79

    (13) block -> LBRACKET blockx . RBRACKET

    RBRACKET        shift and go to state 100


state 80

    (82) turnright -> TURNRIGHT . LPAR RPAR

    LPAR            shift and go to state 101


state 81

    (76) clean -> CLEAN . LPAR ID RPAR

    LPAR            shift and go to state 102


state 82

    (25) statement -> eat .

    INT             reduce using rule 25 (statement -> eat .)
    FLOAT           reduce using rule 25 (statement -> eat .)
    BOOLEAN         reduce using rule 25 (statement -> eat .)
    ID              reduce using rule 25 (statement -> eat .)
    IF              reduce using rule 25 (statement -> eat .)
    WHILE           reduce using rule 25 (statement -> eat .)
    PRINT           reduce using rule 25 (statement -> eat .)
    LIST            reduce using rule 25 (statement -> eat .)
    MOVE            reduce using rule 25 (statement -> eat .)
    EAT             reduce using rule 25 (statement -> eat .)
    CLEAN           reduce using rule 25 (statement -> eat .)
    PLAY            reduce using rule 25 (statement -> eat .)
    TURNLEFT        reduce using rule 25 (statement -> eat .)
    TURNRIGHT       reduce using rule 25 (statement -> eat .)
    RBRACKET        reduce using rule 25 (statement -> eat .)


state 83

    (19) statement -> condition .

    INT             reduce using rule 19 (statement -> condition .)
    FLOAT           reduce using rule 19 (statement -> condition .)
    BOOLEAN         reduce using rule 19 (statement -> condition .)
    ID              reduce using rule 19 (statement -> condition .)
    IF              reduce using rule 19 (statement -> condition .)
    WHILE           reduce using rule 19 (statement -> condition .)
    PRINT           reduce using rule 19 (statement -> condition .)
    LIST            reduce using rule 19 (statement -> condition .)
    MOVE            reduce using rule 19 (statement -> condition .)
    EAT             reduce using rule 19 (statement -> condition .)
    CLEAN           reduce using rule 19 (statement -> condition .)
    PLAY            reduce using rule 19 (statement -> condition .)
    TURNLEFT        reduce using rule 19 (statement -> condition .)
    TURNRIGHT       reduce using rule 19 (statement -> condition .)
    RBRACKET        reduce using rule 19 (statement -> condition .)


state 84

    (20) statement -> cycle .

    INT             reduce using rule 20 (statement -> cycle .)
    FLOAT           reduce using rule 20 (statement -> cycle .)
    BOOLEAN         reduce using rule 20 (statement -> cycle .)
    ID              reduce using rule 20 (statement -> cycle .)
    IF              reduce using rule 20 (statement -> cycle .)
    WHILE           reduce using rule 20 (statement -> cycle .)
    PRINT           reduce using rule 20 (statement -> cycle .)
    LIST            reduce using rule 20 (statement -> cycle .)
    MOVE            reduce using rule 20 (statement -> cycle .)
    EAT             reduce using rule 20 (statement -> cycle .)
    CLEAN           reduce using rule 20 (statement -> cycle .)
    PLAY            reduce using rule 20 (statement -> cycle .)
    TURNLEFT        reduce using rule 20 (statement -> cycle .)
    TURNRIGHT       reduce using rule 20 (statement -> cycle .)
    RBRACKET        reduce using rule 20 (statement -> cycle .)


state 85

    (22) statement -> list .

    INT             reduce using rule 22 (statement -> list .)
    FLOAT           reduce using rule 22 (statement -> list .)
    BOOLEAN         reduce using rule 22 (statement -> list .)
    ID              reduce using rule 22 (statement -> list .)
    IF              reduce using rule 22 (statement -> list .)
    WHILE           reduce using rule 22 (statement -> list .)
    PRINT           reduce using rule 22 (statement -> list .)
    LIST            reduce using rule 22 (statement -> list .)
    MOVE            reduce using rule 22 (statement -> list .)
    EAT             reduce using rule 22 (statement -> list .)
    CLEAN           reduce using rule 22 (statement -> list .)
    PLAY            reduce using rule 22 (statement -> list .)
    TURNLEFT        reduce using rule 22 (statement -> list .)
    TURNRIGHT       reduce using rule 22 (statement -> list .)
    RBRACKET        reduce using rule 22 (statement -> list .)


state 86

    (18) statement -> asign .

    INT             reduce using rule 18 (statement -> asign .)
    FLOAT           reduce using rule 18 (statement -> asign .)
    BOOLEAN         reduce using rule 18 (statement -> asign .)
    ID              reduce using rule 18 (statement -> asign .)
    IF              reduce using rule 18 (statement -> asign .)
    WHILE           reduce using rule 18 (statement -> asign .)
    PRINT           reduce using rule 18 (statement -> asign .)
    LIST            reduce using rule 18 (statement -> asign .)
    MOVE            reduce using rule 18 (statement -> asign .)
    EAT             reduce using rule 18 (statement -> asign .)
    CLEAN           reduce using rule 18 (statement -> asign .)
    PLAY            reduce using rule 18 (statement -> asign .)
    TURNLEFT        reduce using rule 18 (statement -> asign .)
    TURNRIGHT       reduce using rule 18 (statement -> asign .)
    RBRACKET        reduce using rule 18 (statement -> asign .)


state 87

    (26) statement -> clean .

    INT             reduce using rule 26 (statement -> clean .)
    FLOAT           reduce using rule 26 (statement -> clean .)
    BOOLEAN         reduce using rule 26 (statement -> clean .)
    ID              reduce using rule 26 (statement -> clean .)
    IF              reduce using rule 26 (statement -> clean .)
    WHILE           reduce using rule 26 (statement -> clean .)
    PRINT           reduce using rule 26 (statement -> clean .)
    LIST            reduce using rule 26 (statement -> clean .)
    MOVE            reduce using rule 26 (statement -> clean .)
    EAT             reduce using rule 26 (statement -> clean .)
    CLEAN           reduce using rule 26 (statement -> clean .)
    PLAY            reduce using rule 26 (statement -> clean .)
    TURNLEFT        reduce using rule 26 (statement -> clean .)
    TURNRIGHT       reduce using rule 26 (statement -> clean .)
    RBRACKET        reduce using rule 26 (statement -> clean .)


state 88

    (15) blockx -> vars blockx .

    RBRACKET        reduce using rule 15 (blockx -> vars blockx .)


state 89

    (81) turnleft -> TURNLEFT LPAR . RPAR

    RPAR            shift and go to state 103


state 90

    (58) cycle -> WHILE cycle_1 . LPAR expression RPAR cycle_2 block cycle_3

    LPAR            shift and go to state 104


state 91

    (53) print -> PRINT LPAR . printx RPAR
    (54) printx -> . expression
    (55) printx -> . STRING
    (56) printx -> . expression COMA printx
    (57) printx -> . STRING COMA printx
    (37) expression -> . exp
    (38) expression -> . exp COMPARISON exp
    (39) exp -> . termino
    (40) exp -> . termino PLUS exp
    (41) exp -> . termino MINUS exp
    (42) exp -> . termino MULTIPLY exp
    (43) exp -> . termino DIVIDE exp
    (44) termino -> . LPAR expression RPAR
    (45) termino -> . PLUS varcte
    (46) termino -> . MINUS varcte
    (47) termino -> . varcte
    (48) varcte -> . ID
    (49) varcte -> . NUMINT
    (50) varcte -> . NUMFLOAT
    (51) varcte -> . TRUE
    (52) varcte -> . FALSE

    STRING          shift and go to state 105
    LPAR            shift and go to state 32
    PLUS            shift and go to state 36
    MINUS           shift and go to state 35
    ID              shift and go to state 41
    NUMINT          shift and go to state 33
    NUMFLOAT        shift and go to state 39
    TRUE            shift and go to state 34
    FALSE           shift and go to state 31

    printx                         shift and go to state 106
    expression                     shift and go to state 107
    termino                        shift and go to state 37
    exp                            shift and go to state 38
    varcte                         shift and go to state 42

state 92

    (67) list -> LIST ID . EQUAL LBRACKET listx RBRACKET

    EQUAL           shift and go to state 108


state 93

    (72) call -> ID LPAR . RPAR
    (73) call -> ID LPAR . ID RPAR

    RPAR            shift and go to state 110
    ID              shift and go to state 109


state 94

    (78) add -> ID POINT . ADD LPAR CANDY RPAR
    (79) add -> ID POINT . ADD LPAR POOP RPAR
    (80) add -> ID POINT . ADD LPAR BALL RPAR

    ADD             shift and go to state 111


state 95

    (17) blockx -> statement blockx .

    RBRACKET        reduce using rule 17 (blockx -> statement blockx .)


state 96

    (62) condition -> IF LPAR . expression cond_1 RPAR block cond_2
    (63) condition -> IF LPAR . expression cond_1 RPAR block ELSE cond_else block cond_2
    (37) expression -> . exp
    (38) expression -> . exp COMPARISON exp
    (39) exp -> . termino
    (40) exp -> . termino PLUS exp
    (41) exp -> . termino MINUS exp
    (42) exp -> . termino MULTIPLY exp
    (43) exp -> . termino DIVIDE exp
    (44) termino -> . LPAR expression RPAR
    (45) termino -> . PLUS varcte
    (46) termino -> . MINUS varcte
    (47) termino -> . varcte
    (48) varcte -> . ID
    (49) varcte -> . NUMINT
    (50) varcte -> . NUMFLOAT
    (51) varcte -> . TRUE
    (52) varcte -> . FALSE

    LPAR            shift and go to state 32
    PLUS            shift and go to state 36
    MINUS           shift and go to state 35
    ID              shift and go to state 41
    NUMINT          shift and go to state 33
    NUMFLOAT        shift and go to state 39
    TRUE            shift and go to state 34
    FALSE           shift and go to state 31

    varcte                         shift and go to state 42
    termino                        shift and go to state 37
    exp                            shift and go to state 38
    expression                     shift and go to state 112

state 97

    (75) eat -> EAT LPAR . ID RPAR

    ID              shift and go to state 113


state 98

    (77) play -> PLAY LPAR . ID RPAR

    ID              shift and go to state 114


state 99

    (74) move -> MOVE LPAR . ID RPAR

    ID              shift and go to state 115


state 100

    (13) block -> LBRACKET blockx RBRACKET .

    INT             reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    FLOAT           reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    BOOLEAN         reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    ID              reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    IF              reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    WHILE           reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    PRINT           reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    LIST            reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    MOVE            reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    EAT             reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    CLEAN           reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    PLAY            reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    TURNLEFT        reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    TURNRIGHT       reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    RBRACKET        reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    ELSE            reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    FUNC            reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)
    $end            reduce using rule 13 (block -> LBRACKET blockx RBRACKET .)


state 101

    (82) turnright -> TURNRIGHT LPAR . RPAR

    RPAR            shift and go to state 116


state 102

    (76) clean -> CLEAN LPAR . ID RPAR

    ID              shift and go to state 117


state 103

    (81) turnleft -> TURNLEFT LPAR RPAR .

    INT             reduce using rule 81 (turnleft -> TURNLEFT LPAR RPAR .)
    FLOAT           reduce using rule 81 (turnleft -> TURNLEFT LPAR RPAR .)
    BOOLEAN         reduce using rule 81 (turnleft -> TURNLEFT LPAR RPAR .)
    ID              reduce using rule 81 (turnleft -> TURNLEFT LPAR RPAR .)
    IF              reduce using rule 81 (turnleft -> TURNLEFT LPAR RPAR .)
    WHILE           reduce using rule 81 (turnleft -> TURNLEFT LPAR RPAR .)
    PRINT           reduce using rule 81 (turnleft -> TURNLEFT LPAR RPAR .)
    LIST            reduce using rule 81 (turnleft -> TURNLEFT LPAR RPAR .)
    MOVE            reduce using rule 81 (turnleft -> TURNLEFT LPAR RPAR .)
    EAT             reduce using rule 81 (turnleft -> TURNLEFT LPAR RPAR .)
    CLEAN           reduce using rule 81 (turnleft -> TURNLEFT LPAR RPAR .)
    PLAY            reduce using rule 81 (turnleft -> TURNLEFT LPAR RPAR .)
    TURNLEFT        reduce using rule 81 (turnleft -> TURNLEFT LPAR RPAR .)
    TURNRIGHT       reduce using rule 81 (turnleft -> TURNLEFT LPAR RPAR .)
    RBRACKET        reduce using rule 81 (turnleft -> TURNLEFT LPAR RPAR .)


state 104

    (58) cycle -> WHILE cycle_1 LPAR . expression RPAR cycle_2 block cycle_3
    (37) expression -> . exp
    (38) expression -> . exp COMPARISON exp
    (39) exp -> . termino
    (40) exp -> . termino PLUS exp
    (41) exp -> . termino MINUS exp
    (42) exp -> . termino MULTIPLY exp
    (43) exp -> . termino DIVIDE exp
    (44) termino -> . LPAR expression RPAR
    (45) termino -> . PLUS varcte
    (46) termino -> . MINUS varcte
    (47) termino -> . varcte
    (48) varcte -> . ID
    (49) varcte -> . NUMINT
    (50) varcte -> . NUMFLOAT
    (51) varcte -> . TRUE
    (52) varcte -> . FALSE

    LPAR            shift and go to state 32
    PLUS            shift and go to state 36
    MINUS           shift and go to state 35
    ID              shift and go to state 41
    NUMINT          shift and go to state 33
    NUMFLOAT        shift and go to state 39
    TRUE            shift and go to state 34
    FALSE           shift and go to state 31

    termino                        shift and go to state 37
    exp                            shift and go to state 38
    expression                     shift and go to state 118
    varcte                         shift and go to state 42

state 105

    (55) printx -> STRING .
    (57) printx -> STRING . COMA printx

    RPAR            reduce using rule 55 (printx -> STRING .)
    COMA            shift and go to state 119


state 106

    (53) print -> PRINT LPAR printx . RPAR

    RPAR            shift and go to state 120


state 107

    (54) printx -> expression .
    (56) printx -> expression . COMA printx

    RPAR            reduce using rule 54 (printx -> expression .)
    COMA            shift and go to state 121


state 108

    (67) list -> LIST ID EQUAL . LBRACKET listx RBRACKET

    LBRACKET        shift and go to state 122


state 109

    (73) call -> ID LPAR ID . RPAR

    RPAR            shift and go to state 123


state 110

    (72) call -> ID LPAR RPAR .

    INT             reduce using rule 72 (call -> ID LPAR RPAR .)
    FLOAT           reduce using rule 72 (call -> ID LPAR RPAR .)
    BOOLEAN         reduce using rule 72 (call -> ID LPAR RPAR .)
    ID              reduce using rule 72 (call -> ID LPAR RPAR .)
    IF              reduce using rule 72 (call -> ID LPAR RPAR .)
    WHILE           reduce using rule 72 (call -> ID LPAR RPAR .)
    PRINT           reduce using rule 72 (call -> ID LPAR RPAR .)
    LIST            reduce using rule 72 (call -> ID LPAR RPAR .)
    MOVE            reduce using rule 72 (call -> ID LPAR RPAR .)
    EAT             reduce using rule 72 (call -> ID LPAR RPAR .)
    CLEAN           reduce using rule 72 (call -> ID LPAR RPAR .)
    PLAY            reduce using rule 72 (call -> ID LPAR RPAR .)
    TURNLEFT        reduce using rule 72 (call -> ID LPAR RPAR .)
    TURNRIGHT       reduce using rule 72 (call -> ID LPAR RPAR .)
    RBRACKET        reduce using rule 72 (call -> ID LPAR RPAR .)


state 111

    (78) add -> ID POINT ADD . LPAR CANDY RPAR
    (79) add -> ID POINT ADD . LPAR POOP RPAR
    (80) add -> ID POINT ADD . LPAR BALL RPAR

    LPAR            shift and go to state 124


state 112

    (62) condition -> IF LPAR expression . cond_1 RPAR block cond_2
    (63) condition -> IF LPAR expression . cond_1 RPAR block ELSE cond_else block cond_2
    (64) cond_1 -> .

    RPAR            reduce using rule 64 (cond_1 -> .)

    cond_1                         shift and go to state 125

state 113

    (75) eat -> EAT LPAR ID . RPAR

    RPAR            shift and go to state 126


state 114

    (77) play -> PLAY LPAR ID . RPAR

    RPAR            shift and go to state 127


state 115

    (74) move -> MOVE LPAR ID . RPAR

    RPAR            shift and go to state 128


state 116

    (82) turnright -> TURNRIGHT LPAR RPAR .

    INT             reduce using rule 82 (turnright -> TURNRIGHT LPAR RPAR .)
    FLOAT           reduce using rule 82 (turnright -> TURNRIGHT LPAR RPAR .)
    BOOLEAN         reduce using rule 82 (turnright -> TURNRIGHT LPAR RPAR .)
    ID              reduce using rule 82 (turnright -> TURNRIGHT LPAR RPAR .)
    IF              reduce using rule 82 (turnright -> TURNRIGHT LPAR RPAR .)
    WHILE           reduce using rule 82 (turnright -> TURNRIGHT LPAR RPAR .)
    PRINT           reduce using rule 82 (turnright -> TURNRIGHT LPAR RPAR .)
    LIST            reduce using rule 82 (turnright -> TURNRIGHT LPAR RPAR .)
    MOVE            reduce using rule 82 (turnright -> TURNRIGHT LPAR RPAR .)
    EAT             reduce using rule 82 (turnright -> TURNRIGHT LPAR RPAR .)
    CLEAN           reduce using rule 82 (turnright -> TURNRIGHT LPAR RPAR .)
    PLAY            reduce using rule 82 (turnright -> TURNRIGHT LPAR RPAR .)
    TURNLEFT        reduce using rule 82 (turnright -> TURNRIGHT LPAR RPAR .)
    TURNRIGHT       reduce using rule 82 (turnright -> TURNRIGHT LPAR RPAR .)
    RBRACKET        reduce using rule 82 (turnright -> TURNRIGHT LPAR RPAR .)


state 117

    (76) clean -> CLEAN LPAR ID . RPAR

    RPAR            shift and go to state 129


state 118

    (58) cycle -> WHILE cycle_1 LPAR expression . RPAR cycle_2 block cycle_3

    RPAR            shift and go to state 130


state 119

    (57) printx -> STRING COMA . printx
    (54) printx -> . expression
    (55) printx -> . STRING
    (56) printx -> . expression COMA printx
    (57) printx -> . STRING COMA printx
    (37) expression -> . exp
    (38) expression -> . exp COMPARISON exp
    (39) exp -> . termino
    (40) exp -> . termino PLUS exp
    (41) exp -> . termino MINUS exp
    (42) exp -> . termino MULTIPLY exp
    (43) exp -> . termino DIVIDE exp
    (44) termino -> . LPAR expression RPAR
    (45) termino -> . PLUS varcte
    (46) termino -> . MINUS varcte
    (47) termino -> . varcte
    (48) varcte -> . ID
    (49) varcte -> . NUMINT
    (50) varcte -> . NUMFLOAT
    (51) varcte -> . TRUE
    (52) varcte -> . FALSE

    STRING          shift and go to state 105
    LPAR            shift and go to state 32
    PLUS            shift and go to state 36
    MINUS           shift and go to state 35
    ID              shift and go to state 41
    NUMINT          shift and go to state 33
    NUMFLOAT        shift and go to state 39
    TRUE            shift and go to state 34
    FALSE           shift and go to state 31

    printx                         shift and go to state 131
    expression                     shift and go to state 107
    termino                        shift and go to state 37
    exp                            shift and go to state 38
    varcte                         shift and go to state 42

state 120

    (53) print -> PRINT LPAR printx RPAR .

    INT             reduce using rule 53 (print -> PRINT LPAR printx RPAR .)
    FLOAT           reduce using rule 53 (print -> PRINT LPAR printx RPAR .)
    BOOLEAN         reduce using rule 53 (print -> PRINT LPAR printx RPAR .)
    ID              reduce using rule 53 (print -> PRINT LPAR printx RPAR .)
    IF              reduce using rule 53 (print -> PRINT LPAR printx RPAR .)
    WHILE           reduce using rule 53 (print -> PRINT LPAR printx RPAR .)
    PRINT           reduce using rule 53 (print -> PRINT LPAR printx RPAR .)
    LIST            reduce using rule 53 (print -> PRINT LPAR printx RPAR .)
    MOVE            reduce using rule 53 (print -> PRINT LPAR printx RPAR .)
    EAT             reduce using rule 53 (print -> PRINT LPAR printx RPAR .)
    CLEAN           reduce using rule 53 (print -> PRINT LPAR printx RPAR .)
    PLAY            reduce using rule 53 (print -> PRINT LPAR printx RPAR .)
    TURNLEFT        reduce using rule 53 (print -> PRINT LPAR printx RPAR .)
    TURNRIGHT       reduce using rule 53 (print -> PRINT LPAR printx RPAR .)
    RBRACKET        reduce using rule 53 (print -> PRINT LPAR printx RPAR .)


state 121

    (56) printx -> expression COMA . printx
    (54) printx -> . expression
    (55) printx -> . STRING
    (56) printx -> . expression COMA printx
    (57) printx -> . STRING COMA printx
    (37) expression -> . exp
    (38) expression -> . exp COMPARISON exp
    (39) exp -> . termino
    (40) exp -> . termino PLUS exp
    (41) exp -> . termino MINUS exp
    (42) exp -> . termino MULTIPLY exp
    (43) exp -> . termino DIVIDE exp
    (44) termino -> . LPAR expression RPAR
    (45) termino -> . PLUS varcte
    (46) termino -> . MINUS varcte
    (47) termino -> . varcte
    (48) varcte -> . ID
    (49) varcte -> . NUMINT
    (50) varcte -> . NUMFLOAT
    (51) varcte -> . TRUE
    (52) varcte -> . FALSE

    STRING          shift and go to state 105
    LPAR            shift and go to state 32
    PLUS            shift and go to state 36
    MINUS           shift and go to state 35
    ID              shift and go to state 41
    NUMINT          shift and go to state 33
    NUMFLOAT        shift and go to state 39
    TRUE            shift and go to state 34
    FALSE           shift and go to state 31

    printx                         shift and go to state 132
    expression                     shift and go to state 107
    termino                        shift and go to state 37
    exp                            shift and go to state 38
    varcte                         shift and go to state 42

state 122

    (67) list -> LIST ID EQUAL LBRACKET . listx RBRACKET
    (68) listx -> . ID
    (69) listx -> . NUMINT
    (70) listx -> . ID COMA listx
    (71) listx -> . NUMINT COMA listx

    ID              shift and go to state 135
    NUMINT          shift and go to state 134

    listx                          shift and go to state 133

state 123

    (73) call -> ID LPAR ID RPAR .

    INT             reduce using rule 73 (call -> ID LPAR ID RPAR .)
    FLOAT           reduce using rule 73 (call -> ID LPAR ID RPAR .)
    BOOLEAN         reduce using rule 73 (call -> ID LPAR ID RPAR .)
    ID              reduce using rule 73 (call -> ID LPAR ID RPAR .)
    IF              reduce using rule 73 (call -> ID LPAR ID RPAR .)
    WHILE           reduce using rule 73 (call -> ID LPAR ID RPAR .)
    PRINT           reduce using rule 73 (call -> ID LPAR ID RPAR .)
    LIST            reduce using rule 73 (call -> ID LPAR ID RPAR .)
    MOVE            reduce using rule 73 (call -> ID LPAR ID RPAR .)
    EAT             reduce using rule 73 (call -> ID LPAR ID RPAR .)
    CLEAN           reduce using rule 73 (call -> ID LPAR ID RPAR .)
    PLAY            reduce using rule 73 (call -> ID LPAR ID RPAR .)
    TURNLEFT        reduce using rule 73 (call -> ID LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 73 (call -> ID LPAR ID RPAR .)
    RBRACKET        reduce using rule 73 (call -> ID LPAR ID RPAR .)


state 124

    (78) add -> ID POINT ADD LPAR . CANDY RPAR
    (79) add -> ID POINT ADD LPAR . POOP RPAR
    (80) add -> ID POINT ADD LPAR . BALL RPAR

    CANDY           shift and go to state 138
    POOP            shift and go to state 136
    BALL            shift and go to state 137


state 125

    (62) condition -> IF LPAR expression cond_1 . RPAR block cond_2
    (63) condition -> IF LPAR expression cond_1 . RPAR block ELSE cond_else block cond_2

    RPAR            shift and go to state 139


state 126

    (75) eat -> EAT LPAR ID RPAR .

    INT             reduce using rule 75 (eat -> EAT LPAR ID RPAR .)
    FLOAT           reduce using rule 75 (eat -> EAT LPAR ID RPAR .)
    BOOLEAN         reduce using rule 75 (eat -> EAT LPAR ID RPAR .)
    ID              reduce using rule 75 (eat -> EAT LPAR ID RPAR .)
    IF              reduce using rule 75 (eat -> EAT LPAR ID RPAR .)
    WHILE           reduce using rule 75 (eat -> EAT LPAR ID RPAR .)
    PRINT           reduce using rule 75 (eat -> EAT LPAR ID RPAR .)
    LIST            reduce using rule 75 (eat -> EAT LPAR ID RPAR .)
    MOVE            reduce using rule 75 (eat -> EAT LPAR ID RPAR .)
    EAT             reduce using rule 75 (eat -> EAT LPAR ID RPAR .)
    CLEAN           reduce using rule 75 (eat -> EAT LPAR ID RPAR .)
    PLAY            reduce using rule 75 (eat -> EAT LPAR ID RPAR .)
    TURNLEFT        reduce using rule 75 (eat -> EAT LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 75 (eat -> EAT LPAR ID RPAR .)
    RBRACKET        reduce using rule 75 (eat -> EAT LPAR ID RPAR .)


state 127

    (77) play -> PLAY LPAR ID RPAR .

    INT             reduce using rule 77 (play -> PLAY LPAR ID RPAR .)
    FLOAT           reduce using rule 77 (play -> PLAY LPAR ID RPAR .)
    BOOLEAN         reduce using rule 77 (play -> PLAY LPAR ID RPAR .)
    ID              reduce using rule 77 (play -> PLAY LPAR ID RPAR .)
    IF              reduce using rule 77 (play -> PLAY LPAR ID RPAR .)
    WHILE           reduce using rule 77 (play -> PLAY LPAR ID RPAR .)
    PRINT           reduce using rule 77 (play -> PLAY LPAR ID RPAR .)
    LIST            reduce using rule 77 (play -> PLAY LPAR ID RPAR .)
    MOVE            reduce using rule 77 (play -> PLAY LPAR ID RPAR .)
    EAT             reduce using rule 77 (play -> PLAY LPAR ID RPAR .)
    CLEAN           reduce using rule 77 (play -> PLAY LPAR ID RPAR .)
    PLAY            reduce using rule 77 (play -> PLAY LPAR ID RPAR .)
    TURNLEFT        reduce using rule 77 (play -> PLAY LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 77 (play -> PLAY LPAR ID RPAR .)
    RBRACKET        reduce using rule 77 (play -> PLAY LPAR ID RPAR .)


state 128

    (74) move -> MOVE LPAR ID RPAR .

    INT             reduce using rule 74 (move -> MOVE LPAR ID RPAR .)
    FLOAT           reduce using rule 74 (move -> MOVE LPAR ID RPAR .)
    BOOLEAN         reduce using rule 74 (move -> MOVE LPAR ID RPAR .)
    ID              reduce using rule 74 (move -> MOVE LPAR ID RPAR .)
    IF              reduce using rule 74 (move -> MOVE LPAR ID RPAR .)
    WHILE           reduce using rule 74 (move -> MOVE LPAR ID RPAR .)
    PRINT           reduce using rule 74 (move -> MOVE LPAR ID RPAR .)
    LIST            reduce using rule 74 (move -> MOVE LPAR ID RPAR .)
    MOVE            reduce using rule 74 (move -> MOVE LPAR ID RPAR .)
    EAT             reduce using rule 74 (move -> MOVE LPAR ID RPAR .)
    CLEAN           reduce using rule 74 (move -> MOVE LPAR ID RPAR .)
    PLAY            reduce using rule 74 (move -> MOVE LPAR ID RPAR .)
    TURNLEFT        reduce using rule 74 (move -> MOVE LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 74 (move -> MOVE LPAR ID RPAR .)
    RBRACKET        reduce using rule 74 (move -> MOVE LPAR ID RPAR .)


state 129

    (76) clean -> CLEAN LPAR ID RPAR .

    INT             reduce using rule 76 (clean -> CLEAN LPAR ID RPAR .)
    FLOAT           reduce using rule 76 (clean -> CLEAN LPAR ID RPAR .)
    BOOLEAN         reduce using rule 76 (clean -> CLEAN LPAR ID RPAR .)
    ID              reduce using rule 76 (clean -> CLEAN LPAR ID RPAR .)
    IF              reduce using rule 76 (clean -> CLEAN LPAR ID RPAR .)
    WHILE           reduce using rule 76 (clean -> CLEAN LPAR ID RPAR .)
    PRINT           reduce using rule 76 (clean -> CLEAN LPAR ID RPAR .)
    LIST            reduce using rule 76 (clean -> CLEAN LPAR ID RPAR .)
    MOVE            reduce using rule 76 (clean -> CLEAN LPAR ID RPAR .)
    EAT             reduce using rule 76 (clean -> CLEAN LPAR ID RPAR .)
    CLEAN           reduce using rule 76 (clean -> CLEAN LPAR ID RPAR .)
    PLAY            reduce using rule 76 (clean -> CLEAN LPAR ID RPAR .)
    TURNLEFT        reduce using rule 76 (clean -> CLEAN LPAR ID RPAR .)
    TURNRIGHT       reduce using rule 76 (clean -> CLEAN LPAR ID RPAR .)
    RBRACKET        reduce using rule 76 (clean -> CLEAN LPAR ID RPAR .)


state 130

    (58) cycle -> WHILE cycle_1 LPAR expression RPAR . cycle_2 block cycle_3
    (60) cycle_2 -> .

    LBRACKET        reduce using rule 60 (cycle_2 -> .)

    cycle_2                        shift and go to state 140

state 131

    (57) printx -> STRING COMA printx .

    RPAR            reduce using rule 57 (printx -> STRING COMA printx .)


state 132

    (56) printx -> expression COMA printx .

    RPAR            reduce using rule 56 (printx -> expression COMA printx .)


state 133

    (67) list -> LIST ID EQUAL LBRACKET listx . RBRACKET

    RBRACKET        shift and go to state 141


state 134

    (69) listx -> NUMINT .
    (71) listx -> NUMINT . COMA listx

    RBRACKET        reduce using rule 69 (listx -> NUMINT .)
    COMA            shift and go to state 142


state 135

    (68) listx -> ID .
    (70) listx -> ID . COMA listx

    RBRACKET        reduce using rule 68 (listx -> ID .)
    COMA            shift and go to state 143


state 136

    (79) add -> ID POINT ADD LPAR POOP . RPAR

    RPAR            shift and go to state 144


state 137

    (80) add -> ID POINT ADD LPAR BALL . RPAR

    RPAR            shift and go to state 145


state 138

    (78) add -> ID POINT ADD LPAR CANDY . RPAR

    RPAR            shift and go to state 146


state 139

    (62) condition -> IF LPAR expression cond_1 RPAR . block cond_2
    (63) condition -> IF LPAR expression cond_1 RPAR . block ELSE cond_else block cond_2
    (13) block -> . LBRACKET blockx RBRACKET

    LBRACKET        shift and go to state 53

    block                          shift and go to state 147

state 140

    (58) cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 . block cycle_3
    (13) block -> . LBRACKET blockx RBRACKET

    LBRACKET        shift and go to state 53

    block                          shift and go to state 148

state 141

    (67) list -> LIST ID EQUAL LBRACKET listx RBRACKET .

    INT             reduce using rule 67 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    FLOAT           reduce using rule 67 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    BOOLEAN         reduce using rule 67 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    ID              reduce using rule 67 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    IF              reduce using rule 67 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    WHILE           reduce using rule 67 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    PRINT           reduce using rule 67 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    LIST            reduce using rule 67 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    MOVE            reduce using rule 67 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    EAT             reduce using rule 67 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    CLEAN           reduce using rule 67 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    PLAY            reduce using rule 67 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    TURNLEFT        reduce using rule 67 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    TURNRIGHT       reduce using rule 67 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)
    RBRACKET        reduce using rule 67 (list -> LIST ID EQUAL LBRACKET listx RBRACKET .)


state 142

    (71) listx -> NUMINT COMA . listx
    (68) listx -> . ID
    (69) listx -> . NUMINT
    (70) listx -> . ID COMA listx
    (71) listx -> . NUMINT COMA listx

    ID              shift and go to state 135
    NUMINT          shift and go to state 134

    listx                          shift and go to state 149

state 143

    (70) listx -> ID COMA . listx
    (68) listx -> . ID
    (69) listx -> . NUMINT
    (70) listx -> . ID COMA listx
    (71) listx -> . NUMINT COMA listx

    ID              shift and go to state 135
    NUMINT          shift and go to state 134

    listx                          shift and go to state 150

state 144

    (79) add -> ID POINT ADD LPAR POOP RPAR .

    INT             reduce using rule 79 (add -> ID POINT ADD LPAR POOP RPAR .)
    FLOAT           reduce using rule 79 (add -> ID POINT ADD LPAR POOP RPAR .)
    BOOLEAN         reduce using rule 79 (add -> ID POINT ADD LPAR POOP RPAR .)
    ID              reduce using rule 79 (add -> ID POINT ADD LPAR POOP RPAR .)
    IF              reduce using rule 79 (add -> ID POINT ADD LPAR POOP RPAR .)
    WHILE           reduce using rule 79 (add -> ID POINT ADD LPAR POOP RPAR .)
    PRINT           reduce using rule 79 (add -> ID POINT ADD LPAR POOP RPAR .)
    LIST            reduce using rule 79 (add -> ID POINT ADD LPAR POOP RPAR .)
    MOVE            reduce using rule 79 (add -> ID POINT ADD LPAR POOP RPAR .)
    EAT             reduce using rule 79 (add -> ID POINT ADD LPAR POOP RPAR .)
    CLEAN           reduce using rule 79 (add -> ID POINT ADD LPAR POOP RPAR .)
    PLAY            reduce using rule 79 (add -> ID POINT ADD LPAR POOP RPAR .)
    TURNLEFT        reduce using rule 79 (add -> ID POINT ADD LPAR POOP RPAR .)
    TURNRIGHT       reduce using rule 79 (add -> ID POINT ADD LPAR POOP RPAR .)
    RBRACKET        reduce using rule 79 (add -> ID POINT ADD LPAR POOP RPAR .)


state 145

    (80) add -> ID POINT ADD LPAR BALL RPAR .

    INT             reduce using rule 80 (add -> ID POINT ADD LPAR BALL RPAR .)
    FLOAT           reduce using rule 80 (add -> ID POINT ADD LPAR BALL RPAR .)
    BOOLEAN         reduce using rule 80 (add -> ID POINT ADD LPAR BALL RPAR .)
    ID              reduce using rule 80 (add -> ID POINT ADD LPAR BALL RPAR .)
    IF              reduce using rule 80 (add -> ID POINT ADD LPAR BALL RPAR .)
    WHILE           reduce using rule 80 (add -> ID POINT ADD LPAR BALL RPAR .)
    PRINT           reduce using rule 80 (add -> ID POINT ADD LPAR BALL RPAR .)
    LIST            reduce using rule 80 (add -> ID POINT ADD LPAR BALL RPAR .)
    MOVE            reduce using rule 80 (add -> ID POINT ADD LPAR BALL RPAR .)
    EAT             reduce using rule 80 (add -> ID POINT ADD LPAR BALL RPAR .)
    CLEAN           reduce using rule 80 (add -> ID POINT ADD LPAR BALL RPAR .)
    PLAY            reduce using rule 80 (add -> ID POINT ADD LPAR BALL RPAR .)
    TURNLEFT        reduce using rule 80 (add -> ID POINT ADD LPAR BALL RPAR .)
    TURNRIGHT       reduce using rule 80 (add -> ID POINT ADD LPAR BALL RPAR .)
    RBRACKET        reduce using rule 80 (add -> ID POINT ADD LPAR BALL RPAR .)


state 146

    (78) add -> ID POINT ADD LPAR CANDY RPAR .

    INT             reduce using rule 78 (add -> ID POINT ADD LPAR CANDY RPAR .)
    FLOAT           reduce using rule 78 (add -> ID POINT ADD LPAR CANDY RPAR .)
    BOOLEAN         reduce using rule 78 (add -> ID POINT ADD LPAR CANDY RPAR .)
    ID              reduce using rule 78 (add -> ID POINT ADD LPAR CANDY RPAR .)
    IF              reduce using rule 78 (add -> ID POINT ADD LPAR CANDY RPAR .)
    WHILE           reduce using rule 78 (add -> ID POINT ADD LPAR CANDY RPAR .)
    PRINT           reduce using rule 78 (add -> ID POINT ADD LPAR CANDY RPAR .)
    LIST            reduce using rule 78 (add -> ID POINT ADD LPAR CANDY RPAR .)
    MOVE            reduce using rule 78 (add -> ID POINT ADD LPAR CANDY RPAR .)
    EAT             reduce using rule 78 (add -> ID POINT ADD LPAR CANDY RPAR .)
    CLEAN           reduce using rule 78 (add -> ID POINT ADD LPAR CANDY RPAR .)
    PLAY            reduce using rule 78 (add -> ID POINT ADD LPAR CANDY RPAR .)
    TURNLEFT        reduce using rule 78 (add -> ID POINT ADD LPAR CANDY RPAR .)
    TURNRIGHT       reduce using rule 78 (add -> ID POINT ADD LPAR CANDY RPAR .)
    RBRACKET        reduce using rule 78 (add -> ID POINT ADD LPAR CANDY RPAR .)


state 147

    (62) condition -> IF LPAR expression cond_1 RPAR block . cond_2
    (63) condition -> IF LPAR expression cond_1 RPAR block . ELSE cond_else block cond_2
    (65) cond_2 -> .

    ELSE            shift and go to state 152
    INT             reduce using rule 65 (cond_2 -> .)
    FLOAT           reduce using rule 65 (cond_2 -> .)
    BOOLEAN         reduce using rule 65 (cond_2 -> .)
    ID              reduce using rule 65 (cond_2 -> .)
    IF              reduce using rule 65 (cond_2 -> .)
    WHILE           reduce using rule 65 (cond_2 -> .)
    PRINT           reduce using rule 65 (cond_2 -> .)
    LIST            reduce using rule 65 (cond_2 -> .)
    MOVE            reduce using rule 65 (cond_2 -> .)
    EAT             reduce using rule 65 (cond_2 -> .)
    CLEAN           reduce using rule 65 (cond_2 -> .)
    PLAY            reduce using rule 65 (cond_2 -> .)
    TURNLEFT        reduce using rule 65 (cond_2 -> .)
    TURNRIGHT       reduce using rule 65 (cond_2 -> .)
    RBRACKET        reduce using rule 65 (cond_2 -> .)

    cond_2                         shift and go to state 151

state 148

    (58) cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block . cycle_3
    (61) cycle_3 -> .

    INT             reduce using rule 61 (cycle_3 -> .)
    FLOAT           reduce using rule 61 (cycle_3 -> .)
    BOOLEAN         reduce using rule 61 (cycle_3 -> .)
    ID              reduce using rule 61 (cycle_3 -> .)
    IF              reduce using rule 61 (cycle_3 -> .)
    WHILE           reduce using rule 61 (cycle_3 -> .)
    PRINT           reduce using rule 61 (cycle_3 -> .)
    LIST            reduce using rule 61 (cycle_3 -> .)
    MOVE            reduce using rule 61 (cycle_3 -> .)
    EAT             reduce using rule 61 (cycle_3 -> .)
    CLEAN           reduce using rule 61 (cycle_3 -> .)
    PLAY            reduce using rule 61 (cycle_3 -> .)
    TURNLEFT        reduce using rule 61 (cycle_3 -> .)
    TURNRIGHT       reduce using rule 61 (cycle_3 -> .)
    RBRACKET        reduce using rule 61 (cycle_3 -> .)

    cycle_3                        shift and go to state 153

state 149

    (71) listx -> NUMINT COMA listx .

    RBRACKET        reduce using rule 71 (listx -> NUMINT COMA listx .)


state 150

    (70) listx -> ID COMA listx .

    RBRACKET        reduce using rule 70 (listx -> ID COMA listx .)


state 151

    (62) condition -> IF LPAR expression cond_1 RPAR block cond_2 .

    INT             reduce using rule 62 (condition -> IF LPAR expression cond_1 RPAR block cond_2 .)
    FLOAT           reduce using rule 62 (condition -> IF LPAR expression cond_1 RPAR block cond_2 .)
    BOOLEAN         reduce using rule 62 (condition -> IF LPAR expression cond_1 RPAR block cond_2 .)
    ID              reduce using rule 62 (condition -> IF LPAR expression cond_1 RPAR block cond_2 .)
    IF              reduce using rule 62 (condition -> IF LPAR expression cond_1 RPAR block cond_2 .)
    WHILE           reduce using rule 62 (condition -> IF LPAR expression cond_1 RPAR block cond_2 .)
    PRINT           reduce using rule 62 (condition -> IF LPAR expression cond_1 RPAR block cond_2 .)
    LIST            reduce using rule 62 (condition -> IF LPAR expression cond_1 RPAR block cond_2 .)
    MOVE            reduce using rule 62 (condition -> IF LPAR expression cond_1 RPAR block cond_2 .)
    EAT             reduce using rule 62 (condition -> IF LPAR expression cond_1 RPAR block cond_2 .)
    CLEAN           reduce using rule 62 (condition -> IF LPAR expression cond_1 RPAR block cond_2 .)
    PLAY            reduce using rule 62 (condition -> IF LPAR expression cond_1 RPAR block cond_2 .)
    TURNLEFT        reduce using rule 62 (condition -> IF LPAR expression cond_1 RPAR block cond_2 .)
    TURNRIGHT       reduce using rule 62 (condition -> IF LPAR expression cond_1 RPAR block cond_2 .)
    RBRACKET        reduce using rule 62 (condition -> IF LPAR expression cond_1 RPAR block cond_2 .)


state 152

    (63) condition -> IF LPAR expression cond_1 RPAR block ELSE . cond_else block cond_2
    (66) cond_else -> .

    LBRACKET        reduce using rule 66 (cond_else -> .)

    cond_else                      shift and go to state 154

state 153

    (58) cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .

    INT             reduce using rule 58 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    FLOAT           reduce using rule 58 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    BOOLEAN         reduce using rule 58 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    ID              reduce using rule 58 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    IF              reduce using rule 58 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    WHILE           reduce using rule 58 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    PRINT           reduce using rule 58 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    LIST            reduce using rule 58 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    MOVE            reduce using rule 58 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    EAT             reduce using rule 58 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    CLEAN           reduce using rule 58 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    PLAY            reduce using rule 58 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    TURNLEFT        reduce using rule 58 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    TURNRIGHT       reduce using rule 58 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)
    RBRACKET        reduce using rule 58 (cycle -> WHILE cycle_1 LPAR expression RPAR cycle_2 block cycle_3 .)


state 154

    (63) condition -> IF LPAR expression cond_1 RPAR block ELSE cond_else . block cond_2
    (13) block -> . LBRACKET blockx RBRACKET

    LBRACKET        shift and go to state 53

    block                          shift and go to state 155

state 155

    (63) condition -> IF LPAR expression cond_1 RPAR block ELSE cond_else block . cond_2
    (65) cond_2 -> .

    INT             reduce using rule 65 (cond_2 -> .)
    FLOAT           reduce using rule 65 (cond_2 -> .)
    BOOLEAN         reduce using rule 65 (cond_2 -> .)
    ID              reduce using rule 65 (cond_2 -> .)
    IF              reduce using rule 65 (cond_2 -> .)
    WHILE           reduce using rule 65 (cond_2 -> .)
    PRINT           reduce using rule 65 (cond_2 -> .)
    LIST            reduce using rule 65 (cond_2 -> .)
    MOVE            reduce using rule 65 (cond_2 -> .)
    EAT             reduce using rule 65 (cond_2 -> .)
    CLEAN           reduce using rule 65 (cond_2 -> .)
    PLAY            reduce using rule 65 (cond_2 -> .)
    TURNLEFT        reduce using rule 65 (cond_2 -> .)
    TURNRIGHT       reduce using rule 65 (cond_2 -> .)
    RBRACKET        reduce using rule 65 (cond_2 -> .)

    cond_2                         shift and go to state 156

state 156

    (63) condition -> IF LPAR expression cond_1 RPAR block ELSE cond_else block cond_2 .

    INT             reduce using rule 63 (condition -> IF LPAR expression cond_1 RPAR block ELSE cond_else block cond_2 .)
    FLOAT           reduce using rule 63 (condition -> IF LPAR expression cond_1 RPAR block ELSE cond_else block cond_2 .)
    BOOLEAN         reduce using rule 63 (condition -> IF LPAR expression cond_1 RPAR block ELSE cond_else block cond_2 .)
    ID              reduce using rule 63 (condition -> IF LPAR expression cond_1 RPAR block ELSE cond_else block cond_2 .)
    IF              reduce using rule 63 (condition -> IF LPAR expression cond_1 RPAR block ELSE cond_else block cond_2 .)
    WHILE           reduce using rule 63 (condition -> IF LPAR expression cond_1 RPAR block ELSE cond_else block cond_2 .)
    PRINT           reduce using rule 63 (condition -> IF LPAR expression cond_1 RPAR block ELSE cond_else block cond_2 .)
    LIST            reduce using rule 63 (condition -> IF LPAR expression cond_1 RPAR block ELSE cond_else block cond_2 .)
    MOVE            reduce using rule 63 (condition -> IF LPAR expression cond_1 RPAR block ELSE cond_else block cond_2 .)
    EAT             reduce using rule 63 (condition -> IF LPAR expression cond_1 RPAR block ELSE cond_else block cond_2 .)
    CLEAN           reduce using rule 63 (condition -> IF LPAR expression cond_1 RPAR block ELSE cond_else block cond_2 .)
    PLAY            reduce using rule 63 (condition -> IF LPAR expression cond_1 RPAR block ELSE cond_else block cond_2 .)
    TURNLEFT        reduce using rule 63 (condition -> IF LPAR expression cond_1 RPAR block ELSE cond_else block cond_2 .)
    TURNRIGHT       reduce using rule 63 (condition -> IF LPAR expression cond_1 RPAR block ELSE cond_else block cond_2 .)
    RBRACKET        reduce using rule 63 (condition -> IF LPAR expression cond_1 RPAR block ELSE cond_else block cond_2 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNC in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 6 resolved as shift
